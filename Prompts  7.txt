nifty_trader/backtest/views.py, 'from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from .engines.options_engine import NiftyOptionsBacktest
from .utils.data_loader import OptionDataLoader
from .models import BacktestResult
from .forms import BacktestForm
from .utils.visualization import BacktestVisualizer
from .utils.report_generator import PDFReportGenerator
import json
from django.conf import settings
from django.core.paginator import Paginator

@login_required
def new_backtest(request):
    """Render form for new backtest"""
    form = BacktestForm()
    return render(request, 'backtest/new_backtest.html', {'form': form})

@login_required
def run_backtest(request):
    """Execute backtest based on form parameters"""
    if request.method == 'POST':
        form = BacktestForm(request.POST)
        if form.is_valid():
            # Load historical data
            loader = OptionDataLoader()
            data = loader.load_nifty_data(
                form.cleaned_data['start_date'],
                form.cleaned_data['end_date']
            )
            
            # Prepare strategy parameters
            strategy_params = {
                'option_type': form.cleaned_data['option_type'],
                'risk_per_trade': form.cleaned_data['risk_per_trade'],
                'stop_loss': form.cleaned_data['stop_loss'],
                'target': form.cleaned_data['target'],
                'max_hold_days': form.cleaned_data['max_hold_days']
            }
            
            # Add WFO parameters if enabled
            if form.cleaned_data['enable_wfo']:
                strategy_params.update({
                    'wfo_in_sample': form.cleaned_data['wfo_in_sample'],
                    'wfo_out_sample': form.cleaned_data['wfo_out_sample'],
                    'param_grid': [
                        {'stop_loss': 0.8, 'target': 1.2},
                        {'stop_loss': 0.7, 'target': 1.3},
                        {'stop_loss': 0.9, 'target': 1.1}
                    ]
                })
            
            # Initialize backtest engine
            engine = NiftyOptionsBacktest(
                strategy_params=strategy_params,
                capital=form.cleaned_data['capital'],
                enable_greeks=form.cleaned_data['enable_greeks'],
                enable_wfo=form.cleaned_data['enable_wfo'],
                enable_mc=form.cleaned_data['enable_mc'],
                risk_free_rate=form.cleaned_data['risk_free_rate']
            )
            
            # Set MC simulations if enabled
            if form.cleaned_data['enable_mc']:
                engine.mc_simulations = form.cleaned_data['mc_simulations']
            
            # Run backtest
            engine.run(data)
            metrics = engine.get_performance_report()
            
            # Prepare results
            results_data = {
                'metrics': metrics,
                'equity_curve': engine.equity_curve,
                'greek_adjustments': engine.greek_adjustments[:500]  # Limit to 500 records
            }
            
            # Include trades if not WFO/MC
            if not (form.cleaned_data['enable_wfo'] or form.cleaned_data['enable_mc']):
                results_data['trades'] = [{
                    'date': t['entry_date'].strftime('%Y-%m-%d'),
                    'type': f"{'BUY' if t['pnl'] >=0 else 'SELL'}_{t['option_type']}",
                    'entry': t['entry_premium'],
                    'exit': t.get('exit_premium', None),
                    'pnl': t.get('pnl', 0),
                    'strike': t['strike'],
                    'lots': t['lots'],
                    'greek_delta': t.get('greek_history', [{}])[-1].get('delta', 0) if t.get('greek_history') else 0
                } for t in engine.trades if t['status'] == 'CLOSED']
            
            # Save results
            result = BacktestResult.objects.create(
                user=request.user,
                name=form.cleaned_data['test_name'],
                start_date=form.cleaned_data['start_date'],
                end_date=form.cleaned_data['end_date'],
                parameters=json.dumps(form.cleaned_data),
                results=json.dumps(results_data)
            )
            
            return redirect('backtest_results', result_id=result.id)
    
    return redirect('new_backtest')

@login_required
def backtest_results(request, result_id):
    """Display backtest results"""
    result = get_object_or_404(BacktestResult, id=result_id, user=request.user)
    results_data = json.loads(result.results)
    
    # Paginate trades if available
    trades = results_data.get('trades', [])
    paginator = Paginator(trades, 25)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number) if trades else None
    
    # Generate charts
    visualizer = BacktestVisualizer(result)
    equity_chart = visualizer.generate_equity_curve()
    dist_chart = visualizer.generate_trade_distribution() if trades else None
    option_chart = visualizer.generate_option_type_chart() if trades else None
    
    # Generate PDF report
    pdf_report = PDFReportGenerator(result).generate_report(
        equity_chart, 
        dist_chart, 
        option_chart
    )
    
    # Prepare context
    context = {
        'result': result,
        'metrics': results_data['metrics'],
        'page_obj': page_obj,
        'equity_chart': equity_chart.replace(settings.MEDIA_ROOT, settings.MEDIA_URL),
        'pdf_report': pdf_report.replace(settings.MEDIA_ROOT, settings.MEDIA_URL)
    }
    
    # Add optional charts
    if dist_chart:
        context['dist_chart'] = dist_chart.replace(settings.MEDIA_ROOT, settings.MEDIA_URL)
    if option_chart:
        context['option_chart'] = option_chart.replace(settings.MEDIA_ROOT, settings.MEDIA_URL)
    
    # Add WFO results if available
    if 'wfo_results' in results_data['metrics']:
        context['wfo_results'] = results_data['metrics']['wfo_results']
    
    # Add MC results if available
    if 'monte_carlo' in results_data['metrics']:
        context['mc_results'] = results_data['metrics']['monte_carlo']
    
    return render(request, 'backtest/results.html', context)'.
	
	
nifty_trader\backtest\urls.py, 'from django.urls import path
from . import views

urlpatterns = [
    path('new/', views.new_backtest, name='new_backtest'),
    path('results/', views.backtest_results, name='backtest_results'),
]'.

	
nifty_trader\backtest\models.py, 'from django.db import models
from django.contrib.auth.models import User

class BacktestResult(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    start_date = models.DateField()
    end_date = models.DateField()
    parameters = models.JSONField()
    results = models.JSONField()
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-created_at']'.

nifty_trader\backtest\forms.py, 'from django import forms
from django.core.validators import MinValueValidator

class BacktestForm(forms.Form):
    test_name = forms.CharField(max_length=100)
    start_date = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}))
    end_date = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}))
    capital = forms.FloatField(
        initial=20000,
        validators=[MinValueValidator(15000)]
    )
    
    # Options-specific parameters
    option_type = forms.ChoiceField(
        choices=[('AUTO', 'Auto (Based on Signal)'), ('CE', 'Calls Only'), ('PE', 'Puts Only')],
        initial='AUTO'
    )
    risk_per_trade = forms.FloatField(
        initial=0.01,  # 1% risk per trade
        min_value=0.005,
        max_value=0.05,
        label="Risk Per Trade (%)"
    )
    stop_loss = forms.FloatField(
        initial=0.85,  # 15% SL
        min_value=0.5,
        max_value=0.95,
        label="Stop Loss (% of Premium)"
    )
    target = forms.FloatField(
        initial=1.30,  # 30% target
        min_value=1.05,
        max_value=2.0,
        label="Target (% of Premium)"
    )
    max_hold_days = forms.IntegerField(
        initial=3,
        min_value=1,
        max_value=10,
        label="Max Holding Days"
    )
    
    # Advanced parameters
    enable_greeks = forms.BooleanField(
        required=False,
        initial=True,
        label="Enable Greeks Calculation",
        help_text="Include Delta/Theta/Vega in trade analysis"
    )
    
    enable_wfo = forms.BooleanField(
        required=False,
        label="Enable Walk-Forward Optimization",
        help_text="Optimize parameters using rolling windows"
    )
    
    wfo_in_sample = forms.IntegerField(
        required=False,
        initial=180,
        min_value=30,
        label="In-Sample Days",
        help_text="Training period for optimization"
    )
    
    wfo_out_sample = forms.IntegerField(
        required=False,
        initial=30,
        min_value=10,
        label="Out-Sample Days",
        help_text="Testing period for optimization"
    )
    
    enable_mc = forms.BooleanField(
        required=False,
        label="Enable Monte Carlo Simulation",
        help_text="Test strategy robustness with simulated paths"
    )
    
    mc_simulations = forms.IntegerField(
        required=False,
        initial=1000,
        min_value=100,
        max_value=10000,
        label="Simulation Count"
    )
    
    risk_free_rate = forms.FloatField(
        initial=0.05,
        min_value=0.0,
        max_value=0.15,
        label="Risk-Free Rate (%)",
        help_text="For Greeks calculation and MC simulation"
    )
    
    def clean(self):
        cleaned_data = super().clean()
        if cleaned_data['start_date'] >= cleaned_data['end_date']:
            raise forms.ValidationError("End date must be after start date")
            
        # Validate WFO parameters if enabled
        if cleaned_data.get('enable_wfo'):
            if not cleaned_data.get('wfo_in_sample') or not cleaned_data.get('wfo_out_sample'):
                raise forms.ValidationError("WFO requires both in-sample and out-sample periods")
            if (cleaned_data['wfo_in_sample'] + cleaned_data['wfo_out_sample']) > (
                (cleaned_data['end_date'] - cleaned_data['start_date']).days
            ):
                raise forms.ValidationError("WFO period exceeds backtest duration")
        
        return cleaned_data'.

nifty_trader\backtest\utils\data_loader.py, 'import pandas as pd
import os
from django.conf import settings

import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta

class OptionDataLoader:
    def load_nifty_data(self, start_date, end_date):
        """Load historical Nifty data with technical indicators"""
        # Fetch historical data
        ticker = yf.Ticker("^NSEI")
        data = ticker.history(start=start_date, end=end_date)
        
        # Reset index and format
        data.reset_index(inplace=True)
        data.rename(columns={
            'Date': 'date',
            'Open': 'open',
            'High': 'high',
            'Low': 'low',
            'Close': 'close',
            'Volume': 'volume'
        }, inplace=True)
        
        # Calculate technical indicators
        data['ema20'] = data['close'].ewm(span=20, adjust=False).mean()
        
        # Add ATM strike
        data['atm_strike'] = data['close'].apply(
            lambda x: 50 * round(x / 50)
        )
        
        return data'.
nifty_trader\backtest\utils\metrics.py
nifty_trader\backtest\utils\report_generator.py, 'from fpdf import FPDF
import os
from django.conf import settings

class PDFReportGenerator:
    def __init__(self, result):
        self.result = result
        self.metrics = result.results['metrics']
        self.trades = result.results['trades']
    
    def generate_report(self, equity_chart, dist_chart, option_chart=None):
        """Generate PDF report with backtest results"""
        pdf = FPDF()
        pdf.add_page()
        
        # Title
        pdf.set_font("Arial", 'B', 16)
        pdf.cell(0, 10, f"Backtest Report: {self.result.name}", 0, 1, 'C')
        pdf.ln(10)
        
        # Metrics section
        pdf.set_font("Arial", 'B', 14)
        pdf.cell(0, 10, "Performance Metrics", 0, 1)
        pdf.set_font("Arial", '', 12)
        
        metrics = [
            ("Total Trades", self.metrics['total_trades']),
            ("Win Rate", f"{self.metrics['win_rate']:.2f}%"),
            ("Avg Win", f"₹{self.metrics['avg_win']:.2f}"),
            ("Avg Loss", f"₹{self.metrics['avg_loss']:.2f}"),
            ("Profit Factor", f"{self.metrics['profit_factor']:.2f}"),
            ("Max Drawdown", f"{self.metrics['max_drawdown']:.2f}%"),
            ("Final Equity", f"₹{self.metrics['final_equity']:.2f}"),
            ("CAGR", f"{self.metrics['cagr']:.2f}%")
        ]
        
        for label, value in metrics:
            pdf.cell(90, 10, label, 1)
            pdf.cell(0, 10, value, 1, 1)
        
        # Charts section
        pdf.ln(10)
        pdf.set_font("Arial", 'B', 14)
        pdf.cell(0, 10, "Performance Charts", 0, 1)
        
        # Equity curve
        pdf.image(equity_chart, x=10, y=pdf.get_y(), w=180)
        pdf.ln(85)
        
        # Trade distribution
        pdf.image(dist_chart, x=10, y=pdf.get_y(), w=180)
        pdf.ln(85)
        
        # Option type performance if available
        if option_chart:
            pdf.image(option_chart, x=10, y=pdf.get_y(), w=180)
            pdf.ln(85)
        
        # Save PDF
        filename = f"report_{self.result.id}.pdf"
        path = os.path.join(settings.MEDIA_ROOT, 'backtest', filename)
        pdf.output(path)
        return path'.
		
nifty_trader\backtest\utils\visualization.py, 'import matplotlib.pyplot as plt
import pandas as pd
import os
from django.conf import settings

class BacktestVisualizer:
    def __init__(self, result):
        self.result = result
        self.metrics = result.results['metrics']
        self.trades = pd.DataFrame(result.results['trades'])
        self.equity_curve = pd.DataFrame(result.results['equity_curve'])
    
    def generate_equity_curve(self):
        """Generate equity curve visualization"""
        plt.figure(figsize=(12, 6))
        plt.plot(self.equity_curve['date'], self.equity_curve['equity'])
        plt.title('Equity Curve')
        plt.xlabel('Date')
        plt.ylabel('Portfolio Value')
        plt.grid(True)
        
        # Save and return path
        filename = f"equity_curve_{self.result.id}.png"
        path = os.path.join(settings.MEDIA_ROOT, 'backtest', filename)
        plt.savefig(path)
        plt.close()
        return path
    
    def generate_trade_distribution(self):
        """Generate P&L distribution visualization"""
        plt.figure(figsize=(10, 6))
        plt.hist(self.trades['pnl'], bins=30, alpha=0.7)
        plt.axvline(0, color='r', linestyle='dashed', linewidth=1)
        plt.title('Trade P&L Distribution')
        plt.xlabel('P&L per Trade')
        plt.ylabel('Frequency')
        plt.grid(True)
        
        # Save and return path
        filename = f"trade_distribution_{self.result.id}.png"
        path = os.path.join(settings.MEDIA_ROOT, 'backtest', filename)
        plt.savefig(path)
        plt.close()
        return path
    
    def generate_option_type_chart(self):
        """Generate chart of performance by option type"""
        if 'option_type' in self.trades.columns:
            grouped = self.trades.groupby('option_type')['pnl'].sum()
            plt.figure(figsize=(8, 6))
            grouped.plot(kind='bar', color=['blue', 'red'])
            plt.title('P&L by Option Type')
            plt.ylabel('Total Profit/Loss')
            plt.grid(True)
            
            # Save and return path
            filename = f"option_type_{self.result.id}.png"
            path = os.path.join(settings.MEDIA_ROOT, 'backtest', filename)
            plt.savefig(path)
            plt.close()
            return path
        return None'.

nifty_trader\backtest\templates\backtest\new_backtest.html, '{% extends 'base.html' %}

{% block content %}
<div class="container mt-4">
    <h2 class="mb-4">Run Strategy Backtest</h2>
    <form method="post" class="needs-validation" novalidate>
        {% csrf_token %}
        
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="id_test_name" class="form-label">Test Name</label>
                {{ form.test_name }}
                <div class="invalid-feedback">Please provide a name</div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-3">
                <label for="id_start_date" class="form-label">Start Date</label>
                {{ form.start_date }}
            </div>
            <div class="col-md-3">
                <label for="id_end_date" class="form-label">End Date</label>
                {{ form.end_date }}
            </div>
            <div class="col-md-3">
                <label for="id_capital" class="form-label">Capital (₹)</label>
                {{ form.capital }}
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-2">
                <label for="id_ema_fast" class="form-label">Fast EMA</label>
                {{ form.ema_fast }}
            </div>
            <div class="col-md-2">
                <label for="id_ema_slow" class="form-label">Slow EMA</label>
                {{ form.ema_slow }}
            </div>
            <div class="col-md-2">
                <label for="id_risk_reward" class="form-label">Risk:Reward</label>
                {{ form.risk_reward }}
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Run Backtest</button>
    </form>
</div>

<script>
// Client-side validation
(function () {
    'use strict'
    const forms = document.querySelectorAll('.needs-validation')
    Array.from(forms).forEach(form => {
        form.addEventListener('submit', event => {
            if (!form.checkValidity()) {
                event.preventDefault()
                event.stopPropagation()
            }
            form.classList.add('was-validated')
        }, false)
    })
})()
</script>
{% endblock %}'.

nifty_trader\backtest\templates\backtest\results.html, '{% extends 'base.html' %}

{% block content %}
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Backtest Results: {{ result.name }}</h2>
        <a href="{% url 'new_backtest' %}" class="btn btn-outline-primary">New Test</a>
    </div>

    <!-- Performance Summary -->
    <div class="card mb-4">
        <div class="card-header">Performance Summary</div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <div class="metric-card">
                        <h6>Total Trades</h6>
                        <p class="display-6">{{ metrics.total_trades }}</p>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="metric-card">
                        <h6>Win Rate</h6>
                        <p class="display-6">{{ metrics.win_rate|floatformat:1 }}%</p>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="metric-card">
                        <h6>Profit Factor</h6>
                        <p class="display-6">{{ metrics.profit_factor|floatformat:2 }}</p>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="metric-card">
                        <h6>Max Drawdown</h6>
                        <p class="display-6">{{ metrics.max_drawdown|floatformat:2 }}%</p>
                    </div>
                </div>
            </div>
            
            <!-- Greek Exposure Metrics -->
            {% if metrics.greek_exposure %}
            <hr>
            <h5>Greek Exposure</h5>
            <div class="row">
                <div class="col-md-3">
                    <div class="metric-card">
                        <h6>Total Adjustments</h6>
                        <p class="display-6">{{ metrics.greek_exposure.total_adjustments|floatformat:2 }}</p>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="metric-card">
                        <h6>Avg Daily Delta</h6>
                        <p class="display-6">{{ metrics.greek_exposure.avg_daily_adjustment|floatformat:4 }}</p>
                    </div>
                </div>
            </div>
            {% endif %}
        </div>
    </div>

    <!-- Walk-Forward Optimization Results -->
    {% if wfo_results %}
    <div class="card mb-4">
        <div class="card-header">Walk-Forward Optimization</div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Period</th>
                            <th>Parameters</th>
                            <th>In-Sample Sharpe</th>
                            <th>Out-Sample Sharpe</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for result in wfo_results %}
                        <tr>
                            <td>{{ result.period_start|date:"Y-m-d" }} to {{ result.period_end|date:"Y-m-d" }}</td>
                            <td>
                                SL: {{ result.params.stop_loss|floatformat:2 }}, 
                                TGT: {{ result.params.target|floatformat:2 }}
                            </td>
                            <td>{{ result.in_sample_perf.sharpe|floatformat:2 }}</td>
                            <td>{{ result.out_sample_perf.sharpe|floatformat:2 }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    {% endif %}

    <!-- Monte Carlo Results -->
    {% if mc_results %}
    <div class="card mb-4">
        <div class="card-header">Monte Carlo Simulation ({{ mc_simulations }} runs)</div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <div class="metric-card">
                        <h6>Success Rate</h6>
                        <p class="display-6">{{ mc_results.success_rate|floatformat:1 }}%</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="metric-card">
                        <h6>Avg Return</h6>
                        <p class="display-6">{{ mc_results.avg_return|floatformat:2 }}%</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="metric-card">
                        <h6>Worst Drawdown</h6>
                        <p class="display-6">{{ mc_results.max_drawdown_distribution.max|floatformat:2 }}%</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    {% endif %}

    <!-- Trade History (if available) -->
    {% if page_obj %}
    <div class="card mb-4">
        <div class="card-header">Trade History</div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Type</th>
                            <th>Strike</th>
                            <th>Entry</th>
                            <th>Exit</th>
                            <th>Delta</th>
                            <th>P&L</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for trade in page_obj %}
                        <tr>
                            <td>{{ trade.date }}</td>
                            <td>
                                <span class="badge {% if 'CE' in trade.type %}bg-success{% else %}bg-danger{% endif %}">
                                    {{ trade.type }}
                                </span>
                            </td>
                            <td>{{ trade.strike }}</td>
                            <td>₹{{ trade.entry|floatformat:2 }}</td>
                            <td>₹{{ trade.exit|floatformat:2 }}</td>
                            <td>{{ trade.greek_delta|floatformat:2 }}</td>
                            <td class="{% if trade.pnl >= 0 %}text-success{% else %}text-danger{% endif %}">
                                ₹{{ trade.pnl|floatformat:2 }}
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            
            <!-- Pagination -->
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center">
                    {% if page_obj.has_previous %}
                    <li class="page-item">
                        <a class="page-link" href="?page=1">&laquo; First</a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="?page={{ page_obj.previous_page_number }}">Previous</a>
                    </li>
                    {% endif %}
                    
                    <li class="page-item disabled">
                        <span class="page-link">
                            Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}
                        </span>
                    </li>
                    
                    {% if page_obj.has_next %}
                    <li class="page-item">
                        <a class="page-link" href="?page={{ page_obj.next_page_number }}">Next</a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="?page={{ page_obj.paginator.num_pages }}">Last &raquo;</a>
                    </li>
                    {% endif %}
                </ul>
            </nav>
        </div>
    </div>
    {% endif %}

    <!-- Charts Section -->
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">Equity Curve</div>
                <div class="card-body">
                    <img src="{{ equity_chart }}" alt="Equity Curve" class="img-fluid">
                </div>
            </div>
        </div>
        {% if dist_chart %}
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">Trade Distribution</div>
                <div class="card-body">
                    <img src="{{ dist_chart }}" alt="Trade Distribution" class="img-fluid">
                </div>
            </div>
        </div>
        {% endif %}
    </div>

    <!-- Report Download -->
    <div class="text-center mt-4">
        <a href="{{ pdf_report }}" class="btn btn-danger" download>
            <i class="fas fa-file-pdf"></i> Download Full Report
        </a>
    </div>
</div>
{% endblock %}'. 
nifty_trader\backtest\engines\base_engine.py, 'from abc import ABC, abstractmethod
import pandas as pd

class BacktestEngine(ABC):
    def __init__(self, capital=20000, risk_per_trade=0.01):
        self.capital = capital
        self.risk_per_trade = risk_per_trade
        self.results = []
    
    @abstractmethod
    def calculate_position_size(self, stop_loss_points):
        pass
    
    @abstractmethod
    def run(self, data):
        pass
    
    def calculate_metrics(self):
        """Common performance metrics"""
        df = pd.DataFrame(self.results)
        df['cum_pnl'] = df['pnl'].cumsum()
        return {
            'total_trades': len(df),
            'win_rate': len(df[df['pnl'] > 0]) / len(df),
            'max_drawdown': df['cum_pnl'].min(),
            'profit_factor': df[df['pnl'] > 0]['pnl'].sum() / 
                            abs(df[df['pnl'] < 0]['pnl'].sum())
        }'.

nifty_trader\backtest\engines\, 'import pandas as pd
import numpy as np
from datetime import timedelta, datetime
from scipy.stats import norm
from trading.services.market_data import YFinanceMarketData
from trading.services.greeks import OptionGreeks

class GreekCalculator:
    """Black-Scholes Greeks calculation"""
    @staticmethod
    def calculate_delta(S, K, T, r, sigma, option_type):
        d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
        return norm.cdf(d1) if option_type == 'call' else norm.cdf(d1) - 1

    @staticmethod
    def calculate_theta(S, K, T, r, sigma, option_type):
        d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
        d2 = d1 - sigma * np.sqrt(T)
        if option_type == 'call':
            return (-S * norm.pdf(d1) * sigma / (2 * np.sqrt(T)) - r * K * np.exp(-r * T) * norm.cdf(d2)) / 365
        else:
            return (-S * norm.pdf(d1) * sigma / (2 * np.sqrt(T)) + r * K * np.exp(-r * T) * norm.cdf(-d2)) / 365

    @staticmethod
    def calculate_vega(S, K, T, r, sigma):
        d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
        return S * norm.pdf(d1) * np.sqrt(T) * 0.01  # per 1% vol change

class NiftyOptionsBacktest:
    def __init__(self, strategy_params, capital=20000, enable_greeks=True, enable_wfo=False, enable_mc=False):
        self.strategy = strategy_params
        self.initial_capital = capital
        self.capital = capital
        self.trades = []
        self.equity_curve = []
        self.market_data = YFinanceMarketData()
        self.greek_calculator = OptionGreeks()
        self.greek_adjustments = []
        self.enable_greeks = enable_greeks
        self.enable_wfo = enable_wfo
        self.enable_mc = enable_mc
        self.risk_free_rate = 0.05  # Default risk-free rate
        
        # Monte Carlo parameters
        self.mc_simulations = 1000
        self.mc_results = []
        
        # Walk-forward parameters
        self.wfo_results = []
        self.param_grid = strategy_params.get('param_grid', [])

    def run(self, data):
        """Run backtest on historical data"""
        # Convert to datetime index
        data['date'] = pd.to_datetime(data['date'])
        data.set_index('date', inplace=True)
        
        # Pre-calculate technical indicators
        data['ema20'] = data['close'].ewm(span=20, adjust=False).mean()
        data['historical_vol'] = data['close'].pct_change().rolling(20).std() * np.sqrt(252)
        
        # Handle walk-forward optimization
        if self.enable_wfo and self.param_grid:
            self.wfo_optimize(data)
            return  # WFO handles its own backtests
        
        # Handle Monte Carlo simulation
        if self.enable_mc:
            self.run_monte_carlo(data)
            return
            
        # Run standard backtest
        self.run_standard_backtest(data)
    
    def run_standard_backtest(self, data):
        """Core backtesting logic with Greeks integration"""
        # Iterate through each trading day
        for i in range(21, len(data)):
            current_date = data.index[i]
            current_row = data.iloc[i]
            prev_row = data.iloc[i-1]
            
            # Generate signal
            signal = self.generate_signal(current_row, prev_row)
            
            # Check if we should enter a trade
            if signal and self.capital > 0:
                # Get option premium
                premium = self.get_option_premium(
                    current_date, 
                    signal['strike'], 
                    signal['option_type']
                )
                
                if premium:
                    # Calculate position size
                    position_size = self.calculate_position_size(premium)
                    
                    # Deduct trade cost
                    trade_cost = premium * position_size * 75
                    if trade_cost < self.capital:
                        self.capital -= trade_cost
                        
                        # Create trade
                        trade = {
                            'entry_date': current_date,
                            'option_type': signal['option_type'],
                            'strike': signal['strike'],
                            'entry_premium': premium,
                            'lots': position_size,
                            'exit_date': None,
                            'exit_premium': None,
                            'status': 'OPEN',
                            'stop_loss': premium * self.strategy['stop_loss'],
                            'target': premium * self.strategy['target'],
                            'expiry': self.get_expiry_date(current_date),
                            'entry_vol': current_row['historical_vol']
                        }
                        self.trades.append(trade)
            
            # Manage open trades with Greeks adjustment
            self.manage_open_trades(current_date, current_row)
            
            # Update equity curve
            self.update_equity(current_date)
    
    def manage_open_trades(self, current_date, current_row):
        """Manage open positions with Greeks calculation"""
        for trade in self.trades:
            if trade['status'] == 'OPEN':
                days_held = (current_date - trade['entry_date']).days
                
                # Calculate Greeks if enabled
                greek_adj = 0
                if self.enable_greeks:
                    greek_adj = self.calculate_greeks_adjustment(trade, current_row, days_held)
                
                # Get current premium (simulated)
                current_premium = self.get_option_premium(
                    current_date, 
                    trade['strike'], 
                    trade['option_type']
                )
                
                # Apply Greek adjustment to premium
                adjusted_premium = current_premium + greek_adj
                
                # Store Greek adjustment
                self.greek_adjustments.append({
                    'date': current_date,
                    'trade_id': self.trades.index(trade),
                    'delta_adj': greek_adj,
                    'original_premium': current_premium,
                    'adjusted_premium': adjusted_premium
                })
                
                # Exit conditions
                exit_trade = False
                if days_held >= self.strategy['max_hold_days']:
                    exit_trade = True
                elif adjusted_premium <= trade['stop_loss'] or adjusted_premium >= trade['target']:
                    exit_trade = True
                
                if exit_trade:
                    self.close_trade(trade, current_date, adjusted_premium)
    
    def calculate_greeks_adjustment(self, trade, market_data, days_held):
        """Calculate daily PnL adjustments from Greeks"""
        T = (trade['expiry'] - market_data.name).days / 365.0
        option_type = 'call' if trade['option_type'] == 'CE' else 'put'
        
        # Calculate Greeks
        delta = GreekCalculator.calculate_delta(
            market_data['close'],
            trade['strike'],
            T,
            self.risk_free_rate,
            market_data['historical_vol'],
            option_type
        )
        
        theta = GreekCalculator.calculate_theta(
            market_data['close'],
            trade['strike'],
            T,
            self.risk_free_rate,
            market_data['historical_vol'],
            option_type
        )
        
        vega = GreekCalculator.calculate_vega(
            market_data['close'],
            trade['strike'],
            T,
            self.risk_free_rate,
            market_data['historical_vol']
        )
        
        # Calculate adjustments
        price_delta = market_data['close'] - market_data['prev_close'] if 'prev_close' in market_data else 0
        iv_delta = market_data['historical_vol'] - trade['entry_vol']
        
        # Calculate total adjustment
        adjustment = (
            delta * price_delta +
            theta * 1 +  # Daily time decay
            vega * iv_delta
        )
        
        # Store Greeks in trade for analysis
        trade.setdefault('greek_history', []).append({
            'date': market_data.name,
            'delta': delta,
            'theta': theta,
            'vega': vega,
            'adjustment': adjustment
        })
        
        return adjustment
    
    def get_expiry_date(self, trade_date):
        """Get option expiry date (last Thursday of the month)"""
        # Implementation to find last Thursday of the month
        year = trade_date.year
        month = trade_date.month
        last_day = pd.Timestamp(year, month, 1) + pd.offsets.MonthEnd(1)
        weekday = last_day.weekday()
        
        # Thursday is 3 in Python's weekday (Monday=0, Sunday=6)
        if weekday >= 3:
            return last_day - pd.Timedelta(days=weekday-3)
        else:
            return last_day - pd.Timedelta(days=7+weekday-3)
    
    def wfo_optimize(self, data):
        """Walk-forward optimization for parameter tuning"""
        in_sample_days = self.strategy.get('wfo_in_sample', 365)
        out_sample_days = self.strategy.get('wfo_out_sample', 90)
        
        current_date = data.index[0]
        while current_date < data.index[-1]:
            # Define time windows
            in_sample_end = current_date + timedelta(days=in_sample_days)
            out_sample_end = in_sample_end + timedelta(days=out_sample_days)
            
            if out_sample_end > data.index[-1]:
                break
                
            # Split datasets
            in_sample_data = data.loc[current_date:in_sample_end]
            out_sample_data = data.loc[in_sample_end:out_sample_end]
            
            # Parameter optimization
            best_params, best_perf = self.find_best_params(in_sample_data)
            
            # Out-of-sample validation
            self.strategy.update(best_params)
            self.reset_state()
            self.run_standard_backtest(out_sample_data)
            out_sample_perf = self.calculate_metrics()
            
            self.wfo_results.append({
                'period_start': current_date,
                'period_end': out_sample_end,
                'params': best_params,
                'in_sample_perf': best_perf,
                'out_sample_perf': out_sample_perf
            })
            
            # Move window forward
            current_date = out_sample_end
    
    def find_best_params(self, data):
        """Find best parameters from grid search"""
        best_perf = -float('inf')
        best_params = {}
        
        for params in self.param_grid:
            self.strategy.update(params)
            self.reset_state()
            self.run_standard_backtest(data.copy())
            perf = self.calculate_metrics()
            
            if perf['cagr'] > best_perf:
                best_perf = perf['cagr']
                best_params = params
                
        return best_params, best_perf
    
    def run_monte_carlo(self, data):
        """Run Monte Carlo simulation for robustness testing"""
        last_price = data['close'].iloc[-1]
        daily_vol = data['close'].pct_change().std()
        
        for _ in range(self.mc_simulations):
            # Generate price path
            sim_data = self.generate_price_path(data, last_price, daily_vol)
            
            # Run backtest on simulated data
            self.reset_state()
            self.run_standard_backtest(sim_data)
            metrics = self.calculate_metrics()
            
            self.mc_results.append(metrics)
    
    def generate_price_path(self, data, last_price, daily_vol):
        """Generate simulated price path using GBM"""
        n_days = 252  # 1 year of trading days
        prices = [last_price]
        
        for _ in range(1, n_days):
            drift = self.risk_free_rate / 252
            shock = np.random.normal(0, daily_vol)
            new_price = prices[-1] * np.exp(drift + shock)
            prices.append(new_price)
        
        # Create DataFrame with same structure as historical data
        start_date = data.index[-1] + timedelta(days=1)
        dates = pd.date_range(start=start_date, periods=n_days)
        
        sim_data = pd.DataFrame({
            'date': dates,
            'open': prices,
            'high': [p * 1.01 for p in prices],
            'low': [p * 0.99 for p in prices],
            'close': prices,
            'volume': data['volume'].mean()
        })
        sim_data.set_index('date', inplace=True)
        
        # Calculate technical indicators
        sim_data['ema20'] = sim_data['close'].ewm(span=20, adjust=False).mean()
        sim_data['historical_vol'] = sim_data['close'].pct_change().rolling(20).std() * np.sqrt(252)
        
        return sim_data
    
    def reset_state(self):
        """Reset backtest state for new runs"""
        self.capital = self.initial_capital
        self.trades = []
        self.equity_curve = []
        self.greek_adjustments = []
    
    # ... (The rest of your existing methods remain the same: generate_signal, 
    # get_atm_strike, get_option_premium, calculate_position_size, 
    # close_trade, update_equity, calculate_metrics, calculate_cagr) ...
    
    def get_performance_report(self):
        """Comprehensive performance report with new metrics"""
        report = self.calculate_metrics()
        
        # Add Greek exposure metrics
        if self.enable_greeks and self.greek_adjustments:
            adj_df = pd.DataFrame(self.greek_adjustments)
            report['greek_exposure'] = {
                'total_adjustments': adj_df['delta_adj'].sum(),
                'avg_daily_adjustment': adj_df['delta_adj'].mean(),
                'max_adjustment': adj_df['delta_adj'].max(),
                'min_adjustment': adj_df['delta_adj'].min()
            }
        
        # Add WFO results
        if self.enable_wfo:
            report['wfo_results'] = self.wfo_results
        
        # Add Monte Carlo results
        if self.enable_mc and self.mc_results:
            mc_df = pd.DataFrame(self.mc_results)
            report['monte_carlo'] = {
                'success_rate': (mc_df['final_equity'] > self.initial_capital).mean(),
                'avg_return': mc_df['cagr'].mean(),
                'max_drawdown_distribution': mc_df['max_drawdown'].describe().to_dict()
            }
        
        return report'.

nifty_trader\management\commands\runserver_custom.py, 
'from django.core.management.commands.runserver import Command as RunServer

class Command(RunServer):
    help = "Starts the server on custom port 3000"

    def handle(self, *args, **options):
        options['addrport'] = '3000'  # Default port
        super().handle(*args, **options)'.
		
		
nifty_trader\nifty_trader\settings.py, '"""
Django settings for nifty_trader project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
import json
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.


BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(BASE_DIR))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-448cyt#6+(vuz1ff1!!(d6y@eyebqr1lre+p7bh_@!u#27-+$w'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'trading',
    'backtest',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'trading.middleware.token_refresh.KiteTokenMiddleware',
]

ROOT_URLCONF = 'nifty_trader.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'nifty_trader.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
# Static files configuration

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Plotly config
PLOTLY_KALEIDO_PATH = os.getenv('PLOTLY_KALEIDO_PATH', '/usr/local/bin/kaleido')

# Add these settings at the bottom
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'login''.

nifty_trader\nifty_trader\urls.py, '"""
URL configuration for nifty_trader project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path
from django.urls import include, path
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('trading.urls')),
    path('backtest/', include('backtest.urls')),
    #path('accounts/', include('django.contrib.auth.urls')),  # This adds logout
    
]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)




'.
nifty_trader\trading\views.py, '# Create your views here.
from django.shortcuts import render
from .services.strategy import NiftyStrategy
from django.shortcuts import redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth.views import LoginView, LogoutView
from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse
import json
from django.contrib import messages
from .services.market_data import YFinanceMarketData
from .models import Trade, UserCapital  # Make sure these models are 
from django.views.generic.base import RedirectView
from django.contrib.auth.views import LoginView


def dashboard(request):
    if not request.user.is_authenticated:
        return redirect('login')
    
    try:
        # Get selected expiry from request
        expiry = request.GET.get('expiry')
        strategy = NiftyStrategy(request.user)
        trade_signal = strategy.generate_trade_signal()
        
        context = {
            'trade_signal': trade_signal,
            'capital': request.user.usercapital.amount if hasattr(request.user, 'usercapital') else 0
        }
        return render(request, 'trading/dashboard.html', context)
        
    except Exception as e:
        print(f"Dashboard error: {e}")
        context = {
            'trade_signal': 'Error loading data',
            'capital': request.user.usercapital.amount if hasattr(request.user, 'usercapital') else 0
        }
        return render(request, 'trading/dashboard.html', context)
    
@login_required
def execute_trade(request):
    if request.method == 'POST':
        try:
            # Get form data
            strike = float(request.POST.get('strike'))
            premium = float(request.POST.get('premium'))
            option_type = request.POST.get('option_type')
            direction = request.POST.get('direction')
            lots = int(request.POST.get('lots'))
            
            # Calculate risk parameters
            sl = premium * 0.85  # 15% SL
            target = premium * 1.30  # 30% target
            
            # Create trade
            Trade.objects.create(
                user=request.user,
                option_type=option_type,
                strike=strike,
                quantity=lots,
                entry_price=premium,
                stop_loss=sl,
                target=target,
                emotion=request.POST.get('emotion', 'CALM'),
                direction=direction
            )
            
            messages.success(request, f"Trade executed: {direction} {option_type} at strike {strike}")
            return redirect('dashboard')
            
        except Exception as e:
            messages.error(request, f"Trade execution failed: {str(e)}")
            return redirect('dashboard')
    return redirect('dashboard')

@login_required
def close_trade(request, trade_id):
    trade = get_object_or_404(Trade, id=trade_id, user=request.user)
    
    if trade.status == 'CLOSED':
        messages.warning(request, "Trade is already closed")
        return redirect('trade_journal')
    
    try:
        # For options, we need to get current premium
        # Simplified for now - should be replaced with real market data
        exit_premium = trade.entry_price * 1.1  # 10% profit assumption
        trade.exit_price = exit_premium
        trade.status = 'CLOSED'
        trade.save()
        
        messages.success(request, f"Trade closed @ ₹{exit_premium:.2f}")
    except Exception as e:
        messages.error(request, f"Error closing trade: {str(e)}")
    
    return redirect('trade_journal')

@login_required
def update_capital(request):
    if request.method == 'POST':
        try:
            amount_str = request.POST.get('amount')
            if not amount_str:
                messages.error(request, 'Please enter an amount')
                return redirect('update_capital')
                
            new_amount = float(amount_str)
            if new_amount <= 0:
                messages.error(request, 'Amount must be positive')
                return redirect('update_capital')
                
            capital, created = UserCapital.objects.update_or_create(
                user=request.user,
                defaults={'amount': new_amount}
            )
            messages.success(request, f'Capital updated to ₹{new_amount:,.2f}')
            return redirect('dashboard')
            
        except ValueError:
            messages.error(request, 'Please enter a valid number')
            return redirect('update_capital')
    
    # GET request - show form with current capital
    current_amount = 0
    if hasattr(request.user, 'usercapital'):
        current_amount = request.user.usercapital.amount
        
    return render(request, 'trading/update_capital.html', {
        'current_amount': current_amount
    })

@login_required
def trade_journal(request):
    trades = Trade.objects.filter(user=request.user).order_by('-timestamp')
    return render(request, 'trading/journal.html', {'trades': trades})

@csrf_exempt  # Only for prototyping - use proper CSRF in production
def execute_order(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            # Here you would implement your new broker integration
            # For now, we'll just log the trade to database
            Trade.objects.create(
                user=request.user,
                trade_type=data['type'],
                quantity=int(data['quantity']),
                entry_price=data.get('price', 0),
                # ... other fields as needed
            )
            return JsonResponse({"status": "success", "message": "Trade logged"})
        except Exception as e:
            return JsonResponse({"status": "error", "message": str(e)}, status=400)


class LoginRedirectView(RedirectView):
    permanent = True
    pattern_name = 'login'  # Name of your login URL pattern
    
    def get_redirect_url(self, *args, **kwargs):
        return super().get_redirect_url(*args, **kwargs)
        


class CustomLoginView(LoginView):
    template_name = 'trading/login.html'
    redirect_authenticated_user = True
    
    def get_success_url(self):
        # Ensure authenticated users are redirected properly
        return super().get_success_url() or LOGIN_REDIRECT_URL

class CustomLogoutView(LogoutView):
    next_page = 'login'            
    
def nifty_spot(request):
    data = YFinanceMarketData().get_nifty_spot()
    return JsonResponse(data if data else {'error': 'Data unavailable'})

def nifty_history(request, days=30):
    data = YFinanceMarketData().get_historical_data(days)
    return JsonResponse({'data': data} if data else {'error': 'Data fetch failed'})

def nifty_options(request):
    data = YFinanceMarketData().get_option_chain()
    return JsonResponse(data if data else {'error': 'Options data unavailable'})    '.

nifty_trader\trading\urls.py, 'from django.urls import path
from . import views
from django.contrib.auth.views import LoginView, LogoutView
from .views import CustomLoginView, CustomLogoutView  # Import your custom views if needed
from trading.views import LoginRedirectView
urlpatterns = [
    # Main pages
    path('', views.dashboard, name='home'),
    path('dashboard/', views.dashboard, name='dashboard'),
    
    # Trading functionality
    path('execute-trade/', views.execute_trade, name='execute_trade'),
    path('update-capital/', views.update_capital, name='update_capital'),
    path('journal/', views.trade_journal, name='trade_journal'),
    
    # Authentication
    path('login/', CustomLoginView.as_view(), name='login'),  # Using your custom view
    path('logout/', CustomLogoutView.as_view(), name='logout'),
    path('accounts/login/', LoginRedirectView.as_view()),
    
    # Market data APIs
    path('api/nifty-spot/', views.nifty_spot, name='nifty_spot'),
    path('api/nifty-history/<int:days>/', views.nifty_history, name='nifty_history'),
    path('api/nifty-options/', views.nifty_options, name='nifty_options'),
]'. 

nifty_trader\trading\models.py, '
# Create your models here.
from django.db import models
from django.contrib.auth.models import User
from trading.utils.token_manager import TokenManager
from django.utils import timezone

class UserCapital(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    amount = models.FloatField(default=20000)
    last_updated = models.DateTimeField(auto_now=True)

class OptionStrategy(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    risk_per_trade = models.FloatField(default=0.01)  # 1% of capital
    default_sl_points = models.IntegerField(default=20)





class Trade(models.Model):
    OPTION_TYPES = (('CE', 'Call Option'), ('PE', 'Put Option'))
    EMOTIONS = (
        ('CALM', 'Calm'), 
        ('FEAR', 'Fearful'),
        ('GREED', 'Greedy'),
        ('ANXIOUS', 'Anxious')
    )
    STATUS_CHOICES = (('OPEN', 'Open'), ('CLOSED', 'Closed'))
    
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(default=timezone.now)
    option_type = models.CharField(max_length=2, choices=OPTION_TYPES)
    strike = models.FloatField()
    quantity = models.IntegerField()  # Number of lots
    entry_price = models.FloatField()  # Premium per share
    exit_price = models.FloatField(null=True, blank=True)
    stop_loss = models.FloatField()
    target = models.FloatField()
    emotion = models.CharField(max_length=10, choices=EMOTIONS)
    status = models.CharField(max_length=6, choices=STATUS_CHOICES, default='OPEN')
    delta = models.FloatField(null=True, blank=True)
    theta = models.FloatField(null=True, blank=True)
    expiry = models.DateField(null=True, blank=True)  # Added for options
    
    @property
    def pnl(self):
        if self.status == 'OPEN' or self.exit_price is None:
            return 0
        # P&L = (Exit Price - Entry Price) * quantity * lot_size
        return (self.exit_price - self.entry_price) * self.quantity * 75
    
    @property
    def notional_value(self):
        return self.quantity * 75 * self.entry_price
    


class BrokerProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    encrypted_token = models.TextField(blank=True)
    last_refreshed = models.DateTimeField(auto_now=True)

    def refresh_token(self):
        from ..services.broker import ZerodhaBroker
        broker = ZerodhaBroker()
        new_token = broker.kite.renew_access_token()
        self.encrypted_token = TokenManager().encrypt_token(new_token)
        self.save()    
        
        '.

nifty_trader\trading\forms.py, '# forms.py
from django import forms

from django import forms
from django.core.validators import MinValueValidator

class BacktestForm(forms.Form):
    test_name = forms.CharField(max_length=100)
    start_date = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}))
    end_date = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}))
    capital = forms.FloatField(
        initial=20000,
        validators=[MinValueValidator(15000)]
    )
    
    # Options-specific parameters
    option_type = forms.ChoiceField(
        choices=[('AUTO', 'Auto (Based on Signal)'), ('CE', 'Calls Only'), ('PE', 'Puts Only')],
        initial='AUTO'
    )
    risk_per_trade = forms.FloatField(
        initial=0.01,  # 1% risk per trade
        min_value=0.005,
        max_value=0.05,
        label="Risk Per Trade (%)"
    )
    stop_loss = forms.FloatField(
        initial=0.85,  # 15% SL
        min_value=0.5,
        max_value=0.95,
        label="Stop Loss (% of Premium)"
    )
    target = forms.FloatField(
        initial=1.30,  # 30% target
        min_value=1.05,
        max_value=2.0,
        label="Target (% of Premium)"
    )
    max_hold_days = forms.IntegerField(
        initial=3,
        min_value=1,
        max_value=10,
        label="Max Holding Days"
    )
    
    def clean(self):
        cleaned_data = super().clean()
        if cleaned_data['start_date'] >= cleaned_data['end_date']:
            raise forms.ValidationError("End date must be after start date")
        return cleaned_data'.

nifty_trader\trading\apps.py, 'from django.apps import AppConfig


class TradingConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'trading'
'.

nifty_trader\trading\admin.py, 'from django.contrib import admin

# Register your models here.
'.

nifty_trader\trading\middleware\token_refresh.py, 'from django.utils.deprecation import MiddlewareMixin
from trading.services.broker import ZerodhaBroker

class KiteTokenMiddleware(MiddlewareMixin):
    def process_request(self, request):
        if request.user.is_authenticated and hasattr(request.user, 'brokerprofile'):
            broker = ZerodhaBroker()
            if not broker.kite.access_token:
                request.user.brokerprofile.refresh_token()  # Implement in models'.

				
nifty_trader\trading\services\broker.py, 'import os
from dotenv import load_dotenv
from kiteconnect import KiteConnect
from ..utils.token_manager import TokenManager

load_dotenv()

class ZerodhaBroker:
    def __init__(self):
        self.token_manager = TokenManager()
        encrypted_token = self._load_token_from_db()  # Implement DB storage
        if encrypted_token:
            os.environ['KITE_ACCESS_TOKEN'] = self.token_manager.decrypt_token(encrypted_token)            
        self.api_key = os.getenv('KITE_API_KEY')
        self.api_secret = os.getenv('KITE_API_SECRET')
        self.kite = KiteConnect(api_key=self.api_key)
        
        # Load existing access token if available
        if os.getenv('KITE_ACCESS_TOKEN'):
            self.kite.set_access_token(os.getenv('KITE_ACCESS_TOKEN'))
    
    def get_login_url(self):
        """Generate login URL for user authentication"""
        return self.kite.login_url()
    
    def generate_session(self, request_token):
        """Create access token using request token"""
        try:
            session = self.kite.generate_session(
                request_token,
                api_secret=self.api_secret
            )
            os.environ['KITE_ACCESS_TOKEN'] = session['access_token']
            return True
        except Exception as e:
            print(f"Session generation failed: {e}")
            return False
    
    def place_order(self, tradingsymbol, quantity, transaction_type, 
                   product, order_type, price=None):
        """Place order through Kite API"""
        try:
            order = self.kite.place_order(
                variety="regular",
                exchange="NFO",
                tradingsymbol=tradingsymbol,
                transaction_type=transaction_type,
                quantity=quantity,
                product=product,
                order_type=order_type,
                price=price
            )
            return order
        except Exception as e:
            print(f"Order placement failed: {e}")
            return None
            
'.
nifty_trader\trading\services\greeks.py, 'import math
from scipy.stats import norm

class OptionGreeks:
    @staticmethod
    def calculate(spot, strike, expiry_days, risk_free_rate, volatility, option_type):
        """
        Calculate option Greeks using Black-Scholes model
        """
        if expiry_days <= 0:
            return {
                'delta': 1.0 if option_type == 'CE' else -1.0,
                'gamma': 0,
                'theta': 0,
                'vega': 0
            }
        
        T = expiry_days / 365.0
        d1 = (math.log(spot / strike) + (risk_free_rate + 0.5 * volatility**2) * T) / (volatility * math.sqrt(T))
        d2 = d1 - volatility * math.sqrt(T)
        
        if option_type == 'CE':
            delta = norm.cdf(d1)
            theta = (-(spot * norm.pdf(d1) * volatility) / (2 * math.sqrt(T)) 
                     - risk_free_rate * strike * math.exp(-risk_free_rate * T) * norm.cdf(d2)) / 365
        else:  # PE
            delta = norm.cdf(d1) - 1
            theta = (-(spot * norm.pdf(d1) * volatility) / (2 * math.sqrt(T)) 
                     + risk_free_rate * strike * math.exp(-risk_free_rate * T) * norm.cdf(-d2)) / 365
        
        gamma = norm.pdf(d1) / (spot * volatility * math.sqrt(T))
        vega = spot * norm.pdf(d1) * math.sqrt(T) * 0.01  # Per 1% volatility change
        
        return {
            'delta': delta,
            'gamma': gamma,
            'theta': theta,
            'vega': vega
        }'.
nifty_trader\trading\services\market_data.py, 'import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta

class YFinanceMarketData:
    def __init__(self):
        self.nifty_symbol = "^NSEI"  # Nifty 50 symbol on Yahoo Finance
        self.historical_days = 30    # Default historical data period

    def get_nifty_spot(self):
        try:
            nifty = yf.Ticker("^NSEI")
            data = nifty.history(period="1d")
            return {
                'price': data['Close'].iloc[-1],
                'open': data['Open'].iloc[-1],
                'high': data['High'].iloc[-1],
                'low': data['Low'].iloc[-1],
                'volume': data['Volume'].iloc[-1]
            }
        except Exception as e:
            print(f"Error fetching Nifty spot: {e}")
            return None

    def get_historical_data(self, days=30):
        try:
            nifty = yf.Ticker("^NSEI")
            data = nifty.history(period=f"{days}d")
            return data.reset_index().to_dict('records')
        except Exception as e:
            print(f"Error fetching historical data: {e}")
            return None


    def _process_options(self, options_df):
        """Convert options dataframe to API-friendly format"""
        return options_df[[
            'strike', 'lastPrice', 'openInterest', 
            'impliedVolatility', 'volume'
        ]].to_dict('records')
        
        
    def get_option_chain(self, expiry=None):
        """Get option chain with real premiums"""
        try:
            ticker = yf.Ticker("^NSEI")
            expiries = ticker.options
            
            if not expiry:
                # Get nearest expiry that's at least 1 day away
                today = datetime.today().date()
                for exp in expiries:
                    exp_date = datetime.strptime(exp, "%Y-%m-%d").date()
                    if exp_date >= today + timedelta(days=1):
                        expiry = exp
                        break
                if not expiry:
                    expiry = expiries[0]
            
            opt = ticker.option_chain(expiry)
            
            # Process calls and puts
            calls = opt.calls[['strike', 'lastPrice', 'openInterest', 'impliedVolatility']]
            puts = opt.puts[['strike', 'lastPrice', 'openInterest', 'impliedVolatility']]
            print(f"Raw option chain data: {option_chain_data}")
            print(f"Data length: {len(option_chain_data)}")
            return {
                'calls': calls.to_dict('records'),
                'puts': puts.to_dict('records'),
                'expiry': expiry,
                'expiry_dates': expiries,  # Add all available expiries
                'spot': self.get_nifty_spot()['price']
            }
        except Exception as e:
            print(f"Error fetching option chain: {e}")
            return None

    def get_option_premium(self, expiry, strike, option_type):
        """Get specific option premium"""
        chain = self.get_option_chain(expiry)
        if not chain:
            return None
        
        options = chain['calls'] if option_type == 'CE' else chain['puts']
        for option in options:
            if option['strike'] == strike:
                return option['lastPrice']
        return None    
        
'.
nifty_trader\trading\services\strategy.py, 'from .market_data import YFinanceMarketData
import math
from .greeks import OptionGreeks

class NiftyStrategy:
    def __init__(self, user):
        self.user = user
        self.market_data = YFinanceMarketData()
    
    def calculate_position_size(self, premium, risk_percent=0.01):
        """Calculate max lots based on 1% risk per trade"""
        try:
            capital = self.user.usercapital.amount
            risk_amount = capital * risk_percent
            nifty_lot_size = 75
            risk_per_lot = premium * nifty_lot_size * 0.15  # 15% risk per lot
            return max(1, int(risk_amount // risk_per_lot))
        except AttributeError:
            return 1
    
    def generate_trade_signal(self, expiry=None):
        try:
            # Get current market data
            current_data = self.market_data.get_nifty_spot()
            if not current_data:
                return {'status': 'error', 'message': 'Market data unavailable'}
            
            current_price = current_data['price']
            
            # Get ATM strike (round to nearest 50)
            atm_strike = 50 * round(current_price / 50)
            
            # Get option chain to select expiry
            chain = self.market_data.get_option_chain(expiry)
            if not chain:
                return {'status': 'error', 'message': 'Option chain unavailable'}
            
            # Use first valid expiry if not provided
            selected_expiry = expiry or chain['expiry']
            
            # Get real premium
            # Generate signal based on EMA crossover
            hist_data = self.market_data.get_historical_data(21)
            if not hist_data or len(hist_data) < 21:
                return {'status': 'error', 'message': 'Insufficient historical data'}
            
            closes = [day['Close'] for day in hist_data]
            ema20 = sum(closes[-20:]) / 20
            
            if current_price > ema20:
                option_type = 'CE'
                direction = 'BUY'
            else:
                option_type = 'PE'
                direction = 'BUY'
            
            # Get real premium
            premium = self.market_data.get_option_premium(
                selected_expiry, 
                atm_strike, 
                option_type
            )
            
            if not premium:
                return {'status': 'error', 'message': 'Premium data unavailable'}
                
            # Calculate Greeks
            volatility = 0.20  # Default IV, should come from market data
            risk_free_rate = 0.05  # Default risk-free rate

            greeks = OptionGreeks.calculate(
                spot=current_price,
                strike=atm_strike,
                expiry_days=days_to_expiry,
                risk_free_rate=risk_free_rate,
                volatility=volatility,
                option_type=option_type
            )    
            
            # Calculate position size based on premium
            position_size = self.calculate_position_size(premium)
            
            # Calculate risk parameters
            sl = premium * 0.85  # 15% SL
            target = premium * 1.30  # 30% target
            
            # Calculate days to expiry
            expiry_date = datetime.strptime(selected_expiry, '%Y-%m-%d')
            days_to_expiry = (expiry_date - datetime.now()).days
            
            return {
                'status': 'success',
                'option_type': option_type,
                'strike': atm_strike,
                'premium': premium,
                'lots': position_size,
                'direction': direction,
                'stop_loss': sl,
                'target': target,
                'current_price': current_price,
                'ema20': ema20,
                'expiry': selected_expiry,
                'days_to_expiry': days_to_expiry,
                'greeks': greeks,
                'expiry_dates': chain['expiry_dates']  # For dropdown
                
            }
                
        except Exception as e:
            return {'status': 'error', 'message': str(e)}'. 
nifty_trader\trading\services\stream.py, 'from kiteconnect import KiteTicker

class LiveDataStream:
    def __init__(self):
        self.broker = ZerodhaBroker()
        self.ticker = KiteTicker(
            api_key=self.broker.api_key,
            access_token=self.broker.kite.access_token
        )
    
    def on_ticks(self, ws, ticks):
        # Process incoming ticks
        for tick in ticks:
            print(f"Tick: {tick}")
    
    def on_connect(self, ws, response):
        # Subscribe to instruments
        tokens = ["NSE:NIFTY 50", "NFO:..."]  # Add your instruments
        ws.subscribe(tokens)
        ws.set_mode(ws.MODE_QUOTE, tokens)
    
    def start_stream(self):
        self.ticker.on_ticks = self.on_ticks
        self.ticker.on_connect = self.on_connect
        self.ticker.connect()'.
nifty_trader\trading\static\js\trading.js, 'document.addEventListener('DOMContentLoaded', function() {
    // Order placement handler
    document.getElementById('place-order').addEventListener('click', function() {
        const tradeData = {
            symbol: document.getElementById('symbol').value,
            quantity: document.getElementById('quantity').value,
            type: document.querySelector('input[name="trade-type"]:checked').value
        };

        fetch('/trading/execute_order/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            },
            body: JSON.stringify(tradeData)
        })
        .then(response => response.json())
        .then(data => updateOrderStatus(data));
    });
});

function getCookie(name) {
    // Standard Django CSRF token fetch
}'.

nifty_trader\trading\templates\registration\login.html, '{% extends "trading/base.html" %}

{% block content %}
<div class="login-container">
    <div class="login-header">
        <i class="fas fa-chart-line fa-3x"></i>
        <h2>Nifty Trader</h2>
        <p>Algorithmic Options Trading Platform</p>
    </div>
    
    {% if form.errors %}
    <div class="alert alert-danger">
        <i class="fas fa-exclamation-circle"></i> 
        Invalid username or password. Please try again.
    </div>
    {% endif %}
    
    {% if next %}
        {% if user.is_authenticated %}
        <div class="alert alert-warning">
            Your account doesn't have access to this page.
        </div>
        {% else %}
        <div class="alert alert-info">
            Please login to access this page.
        </div>
        {% endif %}
    {% endif %}
    
    <form method="post" action="{% url 'login' %}">
        {% csrf_token %}
        
        <div class="form-group">
            <label for="id_username">
                <i class="fas fa-user"></i> Username
            </label>
            <input type="text" name="username" id="id_username" 
                   class="form-control" required autofocus>
        </div>
        
        <div class="form-group">
            <label for="id_password">
                <i class="fas fa-lock"></i> Password
            </label>
            <input type="password" name="password" id="id_password" 
                   class="form-control" required>
        </div>
        
        <div class="form-footer">
            <button type="submit" class="btn btn-primary btn-block">
                <i class="fas fa-sign-in-alt"></i> Login
            </button>
            <input type="hidden" name="next" value="{{ next }}">
            
            <div class="mt-3 text-center">
                <a href="#" class="text-muted">Forgot password?</a>
            </div>
        </div>
    </form>
</div>

<style>
    body {
        background: linear-gradient(135deg, #0e1013 0%, #1c2129 100%);
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        margin: 0;
    }
    
    .login-container {
        width: 100%;
        max-width: 400px;
        padding: 30px;
        background-color: #161b22;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
    }
    
    .login-header {
        text-align: center;
        margin-bottom: 30px;
        color: #f97316;
    }
    
    .login-header i {
        margin-bottom: 15px;
    }
    
    .login-header h2 {
        font-size: 28px;
        margin-bottom: 5px;
    }
    
    .login-header p {
        color: #8b949e;
        font-size: 16px;
    }
    
    .form-group {
        margin-bottom: 20px;
    }
    
    label {
        display: block;
        margin-bottom: 8px;
        color: #c9d1d9;
        font-weight: 500;
    }
    
    .form-control {
        width: 100%;
        padding: 12px 15px;
        background-color: #0d1117;
        border: 1px solid #30363d;
        border-radius: 6px;
        color: #c9d1d9;
        font-size: 16px;
        transition: border-color 0.3s;
    }
    
    .form-control:focus {
        border-color: #f97316;
        outline: none;
        box-shadow: 0 0 0 3px rgba(249, 115, 22, 0.2);
    }
    
    .btn-primary {
        background-color: #f97316;
        border: none;
        padding: 12px;
        font-size: 16px;
        font-weight: 600;
        transition: background-color 0.3s;
    }
    
    .btn-primary:hover {
        background-color: #e36414;
    }
    
    .alert {
        padding: 15px;
        border-radius: 6px;
        margin-bottom: 20px;
        font-size: 14px;
    }
    
    .alert-danger {
        background-color: #2d1215;
        border: 1px solid #6e2a33;
        color: #f85149;
    }
    
    .alert-warning {
        background-color: #2b2111;
        border: 1px solid #5e4411;
        color: #e3b341;
    }
    
    .alert-info {
        background-color: #1c2b41;
        border: 1px solid #2f4d77;
        color: #79c0ff;
    }
    
    .text-muted {
        color: #8b949e !important;
    }
    
    .text-muted:hover {
        color: #f97316 !important;
        text-decoration: none;
    }
</style>
{% endblock %}'.

nifty_trader\trading\templates\trading\base.html, '<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}Nifty Trader{% endblock %}</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: #0e1013;
            color: #ffffff;
        }
        .sidebar {
            width: 220px;
            background-color: #161b22;
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            padding-top: 20px;
        }
        .sidebar a {
            display: block;
            color: #b3b3b3;
            padding: 15px 20px;
            text-decoration: none;
            font-size: 16px;
        }
        .sidebar a:hover, .sidebar a.active {
            background-color: #21262d;
            color: #ffffff;
        }
        .sidebar a i {
            margin-right: 10px;
        }
        .topbar {
            margin-left: 220px;
            background-color: #0d1117;
            padding: 15px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #21262d;
        }
        .topbar .nav-links a {
            color: #b3b3b3;
            margin-left: 25px;
            text-decoration: none;
            font-size: 16px;
        }
        .topbar .nav-links a.active, .topbar .nav-links a:hover {
            color: #f97316;
            border-bottom: 2px solid #f97316;
            padding-bottom: 5px;
        }
        .main-content {
            margin-left: 220px;
            padding: 30px;
        }
        .logo {
            color: #f97316;
            font-size: 24px;
            font-weight: bold;
            padding-left: 20px;
            margin-bottom: 30px;
        }
		/* Add this for the logout form */
        .logout-form {
            display: inline;
            margin-left: 25px;
        }
        .logout-button {
            background: none;
            border: none;
            color: #b3b3b3;
            font-size: 16px;
            cursor: pointer;
            padding: 0;
        }
        .logout-button:hover {
            color: #f97316;
        }
    </style>
</head>
<body>

<div class="sidebar">
    <div class="logo"><i class="fas fa-chart-line"></i> Nifty Trader</div>
    <a href="{% url 'dashboard' %}" class="{% if request.path == '/' %}active{% endif %}">
        <i class="fas fa-home"></i> Dashboard
    </a>
    <a href="#"><i class="fas fa-chart-line"></i> Live Trading</a>
    <a href="#"><i class="fas fa-globe"></i> Nifty Options</a>
    <a href="{% url 'trade_journal' %}"><i class="fas fa-chart-bar"></i> Trade Journal</a>
    <a href="#"><i class="fas fa-user-circle"></i> Account</a>
</div>

<div class="topbar">
    <div class="nav-links">
        <a href="{% url 'dashboard' %}" class="{% if request.path == '/' %}active{% endif %}">Dashboard</a>
        
        {% if user.is_authenticated %}
            <span style="color: #f97316; margin-left: 25px;">
                <i class="fas fa-user"></i> {{ user.username }}
            </span>
            <form class="logout-form" action="{% url 'logout' %}" method="post">
                {% csrf_token %}
                <button type="submit" class="logout-button">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </button>
            </form>
        {% else %}
            <a href="{% url 'login' %}">Login</a>
        {% endif %}
    </div>
</div>

{% if messages %}
<div class="container mt-2">
    {% for message in messages %}
    <div class="alert alert-{{ message.tags }}">
        {{ message }}
    </div>
    {% endfor %}
</div>
{% endif %}

<div class="main-content">
    {% block content %}
    <!-- Content will be injected here from child templates -->
    {% endblock %}
</div>

</body>
</html>'.

nifty_trader\trading\templates\trading\dashboard.html, '{% extends "trading/base.html" %}
{% load custom_filters %}

{% block content %}
<div class="container">
    <h2>Nifty Options Trader</h2>
	
	<!-- Expiry Selection -->
    <div class="card mb-3">
        <div class="card-header bg-info text-white">
            <h4>Expiry Selection</h4>
        </div>
        <div class="card-body">
            <form method="get">
                <div class="row">
                    <div class="col-md-8">
                        <select name="expiry" class="form-select" onchange="this.form.submit()">
                            {% for date in trade_signal.expiry_dates %}
                            <option value="{{ date }}" 
                                {% if date == trade_signal.expiry %}selected{% endif %}>
                                {{ date }} ({{ date|days_until }} days)
                            </option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="col-md-4">
                        <button type="submit" class="btn btn-primary">Refresh</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Capital Display -->
    <div class="card mb-3">
        <div class="card-body">
            <h5>Available Capital: ₹{{ capital|floatformat:2 }}</h5>
            <a href="{% url 'update_capital' %}" class="btn btn-sm btn-primary">Adjust Capital</a>
        </div>
    </div>
    
    <!-- Trade Signal -->
    {% if trade_signal.status == 'success' %}
    <div class="card mb-3">
        <div class="card-header bg-success text-white">
            <h4>Trade Recommendation</h4>
        </div>
        <div class="card-body">
            <table class="table">
				<tr><th>Expiry</th><td>{{ trade_signal.expiry }} ({{ trade_signal.days_to_expiry }} days)</td></tr>
                <tr><th>Option Type</th><td>{{ trade_signal.option_type }}</td></tr>
                <tr><th>Strike</th><td>{{ trade_signal.strike }}</td></tr>
                <tr><th>Premium</th><td>₹{{ trade_signal.premium|floatformat:2 }}</td></tr>
                <tr><th>Lots</th><td>{{ trade_signal.lots }} ({{ trade_signal.lots|multiply:75 }} units)</td></tr>
                <tr><th>Stop Loss</th><td>₹{{ trade_signal.stop_loss|floatformat:2 }}</td></tr>
                <tr><th>Target</th><td>₹{{ trade_signal.target|floatformat:2 }}</td></tr>
                <tr><th>Current Nifty</th><td>₹{{ trade_signal.current_price|floatformat:2 }}</td></tr>
				<!-- Greeks -->
                <tr><th>Delta</th><td>{{ trade_signal.greeks.delta|floatformat:4 }}</td></tr>
                <tr><th>Gamma</th><td>{{ trade_signal.greeks.gamma|floatformat:4 }}</td></tr>
                <tr><th>Theta</th><td>{{ trade_signal.greeks.theta|floatformat:4 }} (daily)</td></tr>
                <tr><th>Vega</th><td>{{ trade_signal.greeks.vega|floatformat:4 }} (per 1% IV)</td></tr>
            </table>
            
            <form method="post" action="{% url 'execute_trade' %}">
                {% csrf_token %}
                <input type="hidden" name="strike" value="{{ trade_signal.strike }}">
                <input type="hidden" name="premium" value="{{ trade_signal.premium }}">
                <input type="hidden" name="option_type" value="{{ trade_signal.option_type }}">
                <input type="hidden" name="direction" value="{{ trade_signal.direction }}">
                <input type="hidden" name="lots" value="{{ trade_signal.lots }}">
                <input type="hidden" name="emotion" value="CALM">
				<input type="hidden" name="expiry" value="{{ trade_signal.expiry }}">
                <button type="submit" class="btn btn-success">Execute Trade</button>
            </form>
        </div>
    </div>
    {% elif trade_signal.status == 'error' %}
    <div class="alert alert-danger">
        <strong>Signal Error:</strong> {{ trade_signal.message }}
    </div>
    {% endif %}
    
    <!-- Manual Options Trade -->
    <div class="card mb-3">
        <div class="card-header bg-primary text-white">
            <h4>Manual Options Trade</h4>
        </div>
        <div class="card-body">
            <form method="post" action="{% url 'execute_trade' %}">
                {% csrf_token %}
                <div class="row mb-3">
					<div class="col-md-3">
						<label class="form-label">Expiry</label>
						<select name="expiry" class="form-select" required>
							{% for date in trade_signal.expiry_dates %}
							<option value="{{ date }}">{{ date }}</option>
							{% endfor %}
						</select>
					</div>
                    <div class="col-md-3">
                        <label class="form-label">Option Type</label>
                        <select name="option_type" class="form-select" required>
                            <option value="CE">Call (CE)</option>
                            <option value="PE">Put (PE)</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Direction</label>
                        <select name="direction" class="form-select" required>
                            <option value="BUY">Buy</option>
                            <option value="SELL">Sell</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Strike</label>
                        <input type="number" name="strike" class="form-control" step="50" value="19400" required>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Premium</label>
                        <input type="number" name="premium" class="form-control" step="0.05" value="100.00" required>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-3">
                        <label class="form-label">Lots</label>
                        <input type="number" name="lots" class="form-control" min="1" value="1" required>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Emotion</label>
                        <select name="emotion" class="form-select">
                            <option value="CALM">Calm</option>
                            <option value="FEAR">Fearful</option>
                            <option value="GREED">Greedy</option>
                            <option value="ANXIOUS">Anxious</option>
                        </select>
                    </div>
                    <div class="col-md-6 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary">Execute Trade</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}'.
nifty_trader\trading\templates\trading\journal.html, '{% extends "trading/base.html" %}

{% block content %}
<div class="container mt-4">
    <h2>Options Trade Journal</h2>
    
    <table class="table table-dark table-striped">
        <thead>
            <tr>
                <th>Time</th>
                <th>Type</th>
                <th>Dir</th>
                <th>Strike</th>
                <th>Lots</th>
                <th>Entry (₹)</th>
                <th>Exit (₹)</th>
                <th>Status</th>
                <th>P&L (₹)</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            {% for trade in trades %}
            <tr>
                <td>{{ trade.timestamp|date:"M d, H:i" }}</td>
                <td>{{ trade.option_type }}</td>
                <td>{{ trade.direction }}</td>
                <td>{{ trade.strike }}</td>
                <td>{{ trade.quantity }}</td>
                <td>₹{{ trade.entry_price|floatformat:2 }}</td>
                <td>
                    {% if trade.exit_price %}
                        ₹{{ trade.exit_price|floatformat:2 }}
                    {% else %}
                        -
                    {% endif %}
                </td>
                <td>
                    <span class="badge {% if trade.status == 'OPEN' %}bg-warning{% else %}bg-success{% endif %}">
                        {{ trade.status }}
                    </span>
                </td>
                <td class="{% if trade.pnl > 0 %}text-success{% elif trade.pnl < 0 %}text-danger{% endif %}">
                    ₹{{ trade.pnl|floatformat:2 }}
                </td>
                <td>
                    {% if trade.status == 'OPEN' %}
                    <a href="{% url 'close_trade' trade.id %}" class="btn btn-sm btn-danger">Close</a>
                    {% endif %}
                </td>
            </tr>
            {% empty %}
            <tr>
                <td colspan="10" class="text-center">No trades recorded yet</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>
{% endblock %}'.

nifty_trader\trading\templates\trading\login.html, '{% extends "trading/base.html" %}

{% block content %}
<div class="login-container">
    <h2>Nifty Trader Login</h2>
    
    {% if form.errors %}
    <div class="alert alert-danger">
        Invalid username or password. Please try again.
    </div>
    {% endif %}
    
    <form method="post" action="{% url 'login' %}">
        {% csrf_token %}
        
        <div class="form-group">
            <label for="id_username">Username:</label>
            <input type="text" name="username" id="id_username" class="form-control" required>
        </div>
        
        <div class="form-group">
            <label for="id_password">Password:</label>
            <input type="password" name="password" id="id_password" class="form-control" required>
        </div>
        
        <button type="submit" class="btn btn-primary">Login</button>
        <input type="hidden" name="next" value="{{ next }}">
    </form>
</div>

<style>
    .login-container {
        max-width: 400px;
        margin: 50px auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }
    .form-group {
        margin-bottom: 15px;
    }
    .form-control {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
    }
    .btn {
        padding: 8px 15px;
        background: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    .alert {
        color: #721c24;
        background-color: #f8d7da;
        padding: 10px;
        margin-bottom: 15px;
        border-radius: 4px;
    }
</style>
{% endblock %}'.
nifty_trader\trading\templates\trading\order_form.html, '{% extends 'base.html' %}
{% load static %}

{% block content %}
<form id="order-form">
    {% csrf_token %}
    <select id="symbol">
        <option value="NIFTY23NOV19400CE">NIFTY 19400 CE</option>
    </select>
    <input type="number" id="quantity" value="1" min="1">
    <button type="button" id="place-order" class="btn btn-primary">
        Place Order
    </button>
</form>
<script src="{% static 'js/trading.js' %}"></script>
{% endblock %}'.

nifty_trader\trading\templates\trading\update_capital.html, '{% extends "trading/base.html" %}

{% block content %}
<div class="container mt-4">
    <h2>Update Capital</h2>
    
    {% if messages %}
    <div class="messages">
        {% for message in messages %}
        <div class="alert alert-{{ message.tags }}">
            {{ message }}
        </div>
        {% endfor %}
    </div>
    {% endif %}
    
    <form method="post">
        {% csrf_token %}
        <div class="form-group">
            <label for="amount">Current Capital: ₹{{ current_amount|floatformat:2 }}</label>
            <input type="number" class="form-control mt-2" id="amount" name="amount" 
                   step="0.01" min="0.01" value="{{ current_amount|floatformat:2 }}" required>
        </div>
        <button type="submit" class="btn btn-primary mt-3">Update Capital</button>
        <a href="{% url 'dashboard' %}" class="btn btn-secondary mt-3">Cancel</a>
    </form>
</div>
{% endblock %}'. 

nifty_trader\trading\templatetags\common_filters.py, 'from django import template

register = template.Library()

@register.filter
def get_item(dictionary, key):
    return dictionary.get(key)
'.

nifty_trader\trading\templatetags\custom_filters.py, '# trading/templatetags/custom_filters.py
from django import template
from datetime import datetime

register = template.Library()

@register.filter(name='multiply')
def multiply(value, arg):
    """Multiply the value by the argument"""
    try:
        return float(value) * float(arg)
    except (ValueError, TypeError):
        return 0
        
        


@register.filter
def days_until(value):
    try:
        expiry_date = datetime.strptime(value, "%Y-%m-%d")
        today = datetime.now()
        return (expiry_date - today).days
    except:
        return 0        '.
nifty_trader\trading\utils\token_manager.py, 'from cryptography.fernet import Fernet
from django.conf import settings
import base64
import os

class TokenManager:
    def __init__(self):
        # Generate or load key from Django settings
        self.key = getattr(settings, 'FERNET_KEY', Fernet.generate_key())
        self.cipher = Fernet(self.key)
    
    def encrypt_token(self, token):
        return self.cipher.encrypt(token.encode()).decode()
    
    def decrypt_token(self, encrypted_token):
        return self.cipher.decrypt(encrypted_token.encode()).decode()

# Add to settings.py
FERNET_KEY = os.getenv('FERNET_KEY', Fernet.generate_key().decode())'.


nifty_trader\manage.py, '#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'nifty_trader.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
'. 
		