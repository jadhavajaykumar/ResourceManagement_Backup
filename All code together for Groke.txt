we will start with the Accounts and Employee app: I will give you the codes I have for accounts and employee app. accounts is to handle the different user levels and user accounts. its not related to the organization 
account department. its to handle the different user level and user accounts. I will paste the code as per app structure,
ResourceManagement/
├── accounts/
│   ├── __init__.py
│   ├── middleware.py
		from django.utils.deprecation import MiddlewareMixin
		from django.utils.cache import add_never_cache_headers

		class DisableClientSideCachingMiddleware(MiddlewareMixin):
			def process_response(self, request, response):
				if request.user.is_authenticated:
					add_never_cache_headers(response)
				return response
│	├── models.py
		from django.contrib.auth.models import AbstractUser
		from django.db import models

		class CustomUser(AbstractUser):
			middle_name = models.CharField(max_length=50, blank=True, null=True)

			pass
	

│   ├── urls.py
		from django.urls import path
		from django.contrib.auth.views import LoginView, LogoutView
		from . import views

		app_name = 'accounts'

		urlpatterns = [
			path('login/', LoginView.as_view(template_name='registration/login.html'), name='login'),
			path('logout/', LogoutView.as_view(next_page='accounts:login'), name='logout'),
			path('profile/', views.redirect_to_dashboard, name='profile'),
		]
	├── utils.py
        def is_manager(user):
			return user.groups.filter(name='Manager').exists()


│   ├── views.py
	
			from django.shortcuts import redirect
			from django.contrib.auth.decorators import login_required

			@login_required
			def redirect_to_dashboard(request):
				user = request.user
				groups = user.groups.values_list('name', flat=True)

				if 'Manager' in groups:
					return redirect('manager:manager-dashboard')
				elif 'HR' in groups:
					return redirect('hr:dashboard')
				elif 'Accountant' in groups:
					return redirect('accountant:dashboard')
				elif 'Employee' in groups or hasattr(user, 'employeeprofile'):
					return redirect('employee:employee-dashboard')
				elif user.is_superuser:
					return redirect('/admin/')
				else:
					return redirect('accounts:login')

│   
│
├── employee/
│   ├── __init__.py
│   ├── admin.py
			from django.contrib import admin
			from .models import EmployeeProfile

			admin.site.register(EmployeeProfile)

│   ├── apps.py
			from django.apps import AppConfig


			class EmployeeConfig(AppConfig):
				default_auto_field = 'django.db.models.BigAutoField'
				name = 'employee'

│   ├── forms.py
			from django import forms
			from .models import EmployeeProfile

			class EmployeeProfileForm(forms.ModelForm):
				class Meta:
					model = EmployeeProfile
					fields = [
						'career_start_date',
						'probotix_joining_date',  
						'date_of_birth',
						'contact_number',
						'address',
						'emergency_contact_name',
						'emergency_contact_relation',
						'emergency_contact_number',
						'employee_id',
						'role',
						'department',
						'reporting_manager',
						'employment_type',
						'confirmation_date',
						'pan_aadhar_ssn',
						'bank_account_number',
						'bank_ifsc_code',
						'epf_number',
					]

					widgets = {
						'career_start_date': forms.DateInput(attrs={'type': 'date'}),
						'probotix_joining_date': forms.DateInput(attrs={'type': 'date'}),
						'date_of_birth': forms.DateInput(attrs={'type': 'date'}),
					}
│   ├── models.py
			from django.db import models
			from django.conf import settings
			from django.utils import timezone
			from datetime import timedelta

			class EmployeeProfile(models.Model):

				EMPLOYMENT_TYPES = [
					('Permanent', 'Permanent'),
					('Contract', 'Contract'),
					('Intern', 'Intern'),
				]

				user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)

				career_start_date = models.DateField(null=True, blank=True)
				probotix_joining_date = models.DateField(default=timezone.now)
				confirmation_date = models.DateField(null=True, blank=True)

				date_of_birth = models.DateField(null=True, blank=True)
				contact_number = models.CharField(max_length=15, blank=True)
				address = models.TextField(blank=True)
				emergency_contact_name = models.CharField(max_length=100, blank=True)
				emergency_contact_relation = models.CharField(max_length=50, blank=True)
				emergency_contact_number = models.CharField(max_length=15, blank=True)

				employee_id = models.CharField(max_length=20, unique=True, blank=True)
				role = models.CharField(max_length=50, blank=True)
				department = models.CharField(max_length=50, blank=True)
				reporting_manager = models.ForeignKey(
					settings.AUTH_USER_MODEL,
					on_delete=models.SET_NULL,
					null=True,
					blank=True,
					related_name='managed_employees'
				)
				employment_type = models.CharField(max_length=20, choices=EMPLOYMENT_TYPES, default='Permanent')

				pan_aadhar_ssn = models.CharField(max_length=20, blank=True)
				bank_account_number = models.CharField(max_length=30, blank=True)
				bank_ifsc_code = models.CharField(max_length=20, blank=True)
				epf_number = models.CharField(max_length=20, blank=True)

				def __str__(self):
					return f"{self.user.get_full_name()} ({self.employee_id})"

				def save(self, *args, **kwargs):
					if not self.confirmation_date and self.probotix_joining_date:
						self.confirmation_date = self.probotix_joining_date + timedelta(days=180)
					super().save(*args, **kwargs)

				@property
				def total_experience(self):
					if self.career_start_date:
						today = timezone.now().date()
						return today.year - self.career_start_date.year - (
							(today.month, today.day) < (self.career_start_date.month, self.career_start_date.day)
						)
					return None

				@property
				def confirmation_due_today(self):
					return self.confirmation_date == timezone.now().date()

│   ├── tests.py
			from django.test import TestCase

			# Create your tests here.

│   ├── urls.py
			# employee/urls.py
			from django.urls import path
			from . import views

			app_name = 'employee'  # explicitly add this namespace

			urlpatterns = [
				path('', views.profile_home, name='employee-profile-home'),
				path('edit/', views.edit_profile, name='edit-employee-profile'),
				path('dashboard/', views.employee_dashboard, name='employee-dashboard'),
				path('my-projects/', views.employee_projects, name='employee-projects'),
			]

│   ├── views.py
			# employee/views.py
			from django.shortcuts import render, redirect
			from django.contrib.auth.decorators import login_required
			from .models import EmployeeProfile
			from manager.models import EmployeeSkill
			from .forms import EmployeeProfileForm  # <-- Add this clearly
			from accounts.models import CustomUser  # ensure this import exists


			@login_required
			def profile_home(request):
				profile, created = EmployeeProfile.objects.get_or_create(user=request.user)
				employee_skills = EmployeeSkill.objects.filter(employee=profile.user)

				
				context = {
					'profile': profile,
					'employee_skills': employee_skills,
					'confirmation_due_today': profile.confirmation_due_today,
				}
				return render(request, 'employee/profile_home.html', context)




				
			@login_required
			def edit_profile(request):
				profile, created = EmployeeProfile.objects.get_or_create(user=request.user)
				if request.method == 'POST':
					form = EmployeeProfileForm(request.POST, instance=profile)
					if form.is_valid():
						form.save()
						return redirect('employee-profile-home')
				else:
					form = EmployeeProfileForm(instance=profile)

				return render(request, 'employee/edit_profile.html', {'form': form})





			@login_required
			def employee_dashboard(request):
				profile = EmployeeProfile.objects.get(user=request.user)
				return render(request, 'employee/employee_dashboard.html', {'profile': profile})

			@login_required
			def employee_projects(request):
				profile = EmployeeProfile.objects.get(user=request.user)
				projects = profile.projects_assigned.all()
				return render(request, 'employee/my_projects.html', {'projects': projects})



				


			@login_required
			def redirect_to_dashboard(request):
				if hasattr(request.user, 'employeeprofile'):
					return redirect('employee:employee-dashboard')  # explicitly corrected
				elif request.user.is_superuser:
					return redirect('/admin/')
				elif request.user.groups.filter(name='Manager').exists():
					return redirect('manager:dashboard')  # ensure explicitly manager URL exists
				else:
					return redirect('accounts:login')  # explicitly corrected fallback




	
│   └── templates/
│       └── employee/
│           ├── dashboard.html
				<!-- Employee Dashboard -->
				{% extends "base.html" %}
				{% load static %}

				{% block title %}Employee Dashboard{% endblock %}

				{% block content %}
				<style>
				  .dashboard-container {
					max-width: 1200px;
					margin: 30px auto;
					padding: 20px;
				  }

				  .dashboard-title {
					font-size: 28px;
					font-weight: 600;
					text-align: center;
					margin-bottom: 30px;
					color: var(--text-color);
				  }

				  .card-grid {
					display: grid;
					grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
					gap: 25px;
				  }

				  .dashboard-card {
					background: var(--card-bg);
					border-radius: 15px;
					padding: 25px;
					box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
					transition: all 0.3s ease-in-out;
					text-align: center;
				  }

				  .dashboard-card:hover {
					transform: translateY(-5px);
					box-shadow: 0 8px 18px rgba(0, 0, 0, 0.1);
				  }

				  .dashboard-card i {
					font-size: 36px;
					margin-bottom: 10px;
					color: var(--icon-color);
				  }

				  .dashboard-card h3 {
					font-size: 18px;
					margin: 10px 0;
					color: var(--text-color);
				  }

				  .dashboard-card a {
					display: inline-block;
					margin-top: 10px;
					background-color: #007bff;
					color: white;
					padding: 8px 14px;
					border-radius: 6px;
					text-decoration: none;
					font-weight: 500;
				  }

				  .dashboard-card a:hover {
					background-color: #0056b3;
				  }
				</style>

				<div class="dashboard-container">
				  <h2 class="dashboard-title">Welcome, {{ profile.user.get_full_name }}</h2>

				  <div class="card-grid">

					<!-- My Profile -->
					<div class="dashboard-card">
					  <i class="fa-solid fa-id-card"></i>
					  <h3>My Profile</h3>
					  <a href="{% url 'employee:employee-profile-home' %}">Go</a>
					</div>

					<!-- My Projects -->
					<div class="dashboard-card">
					  <i class="fa-solid fa-folder"></i>
					  <h3>My Projects</h3>
					  <a href="{% url 'employee:employee-projects' %}">Go</a>
					</div>

					<!-- My Timesheets -->
					<div class="dashboard-card">
					  <i class="fa-solid fa-clock"></i>
					  <h3>My Timesheets</h3>
					  <a href="{% url 'timesheet:employee-timesheets' %}">Go</a>
					</div>

					<!-- My Expenses -->
					<div class="dashboard-card">
					  <i class="fa-solid fa-receipt"></i>
					  <h3>My Expenses</h3>
					  <a href="{% url 'expenses:employee-expenses' %}">Go</a>
					</div>

				  </div>
				</div>

				<script>
				  document.body.classList.add(localStorage.getItem("theme") || "light");

				  function toggleTheme() {
					const currentTheme = document.body.classList.contains("dark") ? "dark" : "light";
					const newTheme = currentTheme === "dark" ? "light" : "dark";
					document.body.classList.remove(currentTheme);
					document.body.classList.add(newTheme);
					localStorage.setItem("theme", newTheme);
				  }
				</script>
				{% endblock %}

│           ├── edit_profile.html
					{% extends "base.html" %}
					{% load static %}

					{% block content %}
					<h2>Edit My Profile</h2>

					<form method="post">
						{% csrf_token %}
						{% for field in form %}
							<div class="form-group" style="margin-bottom: 15px;">
								<label for="{{ field.id_for_label }}">{{ field.label }}:</label><br>
								{{ field }}
								{% if field.errors %}
									<div style="color: red;">{{ field.errors }}</div>
								{% endif %}
							</div>
						{% endfor %}

						<button type="submit" class="btn">Save Changes</button>
					</form>

					<a href="{% url 'employee:employee-profile-home' %}" class="btn" style="margin-top: 15px;">← Back to Profile</a>
					{% endblock %}

│           ├── employee_dashboard.html
					<!-- Employee Dashboard -->
					{% extends "base.html" %}
					{% load static %}

					{% block title %}Employee Dashboard{% endblock %}

					{% block content %}
					<style>
					  .dashboard-container {
						max-width: 1200px;
						margin: 30px auto;
						padding: 20px;
					  }

					  .dashboard-title {
						font-size: 28px;
						font-weight: 600;
						text-align: center;
						margin-bottom: 30px;
						color: var(--text-color);
					  }

					  .card-grid {
						display: grid;
						grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
						gap: 25px;
					  }

					  .dashboard-card {
						background: var(--card-bg);
						border-radius: 15px;
						padding: 25px;
						box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
						transition: all 0.3s ease-in-out;
						text-align: center;
					  }

					  .dashboard-card:hover {
						transform: translateY(-5px);
						box-shadow: 0 8px 18px rgba(0, 0, 0, 0.1);
					  }

					  .dashboard-card i {
						font-size: 36px;
						margin-bottom: 10px;
						color: var(--icon-color);
					  }

					  .dashboard-card h3 {
						font-size: 18px;
						margin: 10px 0;
						color: var(--text-color);
					  }

					  .dashboard-card a {
						display: inline-block;
						margin-top: 10px;
						background-color: #007bff;
						color: white;
						padding: 8px 14px;
						border-radius: 6px;
						text-decoration: none;
						font-weight: 500;
					  }

					  .dashboard-card a:hover {
						background-color: #0056b3;
					  }
					</style>

					<div class="dashboard-container">
					  <h2 class="dashboard-title">Welcome, {{ profile.user.get_full_name }}</h2>

					  <div class="card-grid">

						<!-- My Profile -->
						<div class="dashboard-card">
						  <i class="fa-solid fa-id-card"></i>
						  <h3>My Profile</h3>
						  <a href="{% url 'employee:employee-profile-home' %}">Go</a>
						</div>

						<!-- My Projects -->
						<div class="dashboard-card">
						  <i class="fa-solid fa-folder"></i>
						  <h3>My Projects</h3>
						  <a href="{% url 'employee:employee-projects' %}">Go</a>
						</div>

						<!-- My Timesheets -->
						<div class="dashboard-card">
						  <i class="fa-solid fa-clock"></i>
						  <h3>My Timesheets</h3>
						  <a href="{% url 'timesheet:employee-timesheets' %}">Go</a>
						</div>

						<!-- My Expenses -->
						<div class="dashboard-card">
						  <i class="fa-solid fa-receipt"></i>
						  <h3>My Expenses</h3>
						  <a href="{% url 'expenses:employee-expenses' %}">Go</a>
						</div>

					  </div>
					</div>

					<script>
					  document.body.classList.add(localStorage.getItem("theme") || "light");

					  function toggleTheme() {
						const currentTheme = document.body.classList.contains("dark") ? "dark" : "light";
						const newTheme = currentTheme === "dark" ? "light" : "dark";
						document.body.classList.remove(currentTheme);
						document.body.classList.add(newTheme);
						localStorage.setItem("theme", newTheme);
					  }
					</script>
					{% endblock %}
											
│           ├── my_projects.html
					{% extends "base.html" %}
					{% load static %}

					{% block content %}
					<h2>My Projects</h2>

					{% if projects %}
						<ul style="list-style: none; padding: 0;">
							{% for project in projects %}
								<li style="margin-bottom: 20px; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
									<strong>{{ project.project_name }}</strong> <br>
									<span>Customer: {{ project.customer_name }}</span><br>
									<span>Status: {{ project.status }}</span> | 
									<span>Progress: {{ project.progress }}%</span>
								</li>
							{% endfor %}
						</ul>
					{% else %}
						<p>No projects assigned yet.</p>
					{% endif %}

					{% if user.groups.all.0.name == 'Manager' %}
					  <a href="{% url 'manager:manager-dashboard' %}" class="btn btn-sm btn-outline-light">Back to Dashboard</a>
					{% else %}
					  <a href="{% url 'employee:employee-dashboard' %}" class="btn btn-sm btn-outline-light">Back to Dashboard</a>
					{% endif %}

					{% endblock %}
						
│           └── profile_home.html
					{% extends "base.html" %}
					{% load static %}

					{% block content %}
					<div class="container-fluid px-4 py-5">
						<div class="d-flex justify-content-between align-items-center mb-4">
							<h2 class="fw-bold">{{ profile.user.get_full_name|default:profile.user.username }}</h2>
							{% if user.groups.all.0.name == "Manager" %}
								<a href="{% url 'manager:manager-dashboard' %}" class="btn btn-outline-light btn-sm shadow-sm">
									<i class="bi bi-arrow-left-circle me-1"></i> Back to Dashboard
								</a>
							{% else %}
								<a href="{% url 'employee:employee-dashboard' %}" class="btn btn-outline-light btn-sm shadow-sm">
									<i class="bi bi-arrow-left-circle me-1"></i> Back to Dashboard
								</a>
							{% endif %}
						</div>

						{% if confirmation_due_today %}
							<div class="alert alert-warning shadow-sm">
								<strong>Reminder:</strong> Your confirmation date is today and needs manager approval.
							</div>
						{% endif %}

						<!-- Layout Grid -->
						<div class="row g-4">
							<!-- Left Column -->
							<div class="col-lg-6">
								<!-- Employment Info -->
								<div class="card bg-dark text-light shadow-sm">
									<div class="card-header border-bottom border-light">
										<h5 class="mb-0">Employment Information</h5>
									</div>
									<div class="card-body">
										<p><strong>Employee ID:</strong> {{ profile.employee_id }}</p>
										<p><strong>Role:</strong> {{ profile.role }}</p>
										<p><strong>Department:</strong> {{ profile.department }}</p>
										<p><strong>Employment Type:</strong> {{ profile.employment_type }}</p>
										<p><strong>Career Start:</strong> {{ profile.career_start_date }}</p>
										<p><strong>Probotix Joining:</strong> {{ profile.probotix_joining_date }}</p>
										<p><strong>Confirmation Date:</strong> {{ profile.confirmation_date|default:'Not Set' }}</p>
										<p><strong>Experience:</strong> {{ profile.total_experience|default:'Not Provided' }} years</p>
										<p><strong>Reporting Manager:</strong> {{ profile.reporting_manager.get_full_name }}</p>
									</div>
								</div>

								<!-- Emergency Contact -->
								<div class="card bg-dark text-light shadow-sm mt-4">
									<div class="card-header border-bottom border-light">
										<h5 class="mb-0">Emergency Contact</h5>
									</div>
									<div class="card-body">
										<p><strong>Name:</strong> {{ profile.emergency_contact_name }}</p>
										<p><strong>Relation:</strong> {{ profile.emergency_contact_relation }}</p>
										<p><strong>Contact:</strong> {{ profile.emergency_contact_number }}</p>
									</div>
								</div>
							</div>

							<!-- Right Column -->
							<div class="col-lg-6">
								<!-- Contact Info -->
								<div class="card bg-dark text-light shadow-sm">
									<div class="card-header border-bottom border-light">
										<h5 class="mb-0">Contact Information</h5>
									</div>
									<div class="card-body">
										<p><strong>Email:</strong> {{ profile.user.email }}</p>
										<p><strong>Phone:</strong> {{ profile.contact_number }}</p>
										<p><strong>Address:</strong> {{ profile.address }}</p>
										<p><strong>Blood Group:</strong> {{ profile.blood_group|default:"Not Provided" }}</p>
										<p><strong>Location:</strong> {{ profile.location|default:"Not Provided" }}</p>
									</div>
								</div>

								<!-- HR & Bank Details -->
								<div class="card bg-dark text-light shadow-sm mt-4">
									<div class="card-header border-bottom border-light">
										<h5 class="mb-0">HR & Bank Details</h5>
									</div>
									<div class="card-body">
										<p><strong>PAN/Aadhar/SSN:</strong> {{ profile.pan_aadhar_ssn }}</p>
										<p><strong>EPF Number:</strong> {{ profile.epf_number }}</p>
										<p><strong>Bank Account:</strong> {{ profile.bank_account_number }}</p>
										<p><strong>IFSC Code:</strong> {{ profile.bank_ifsc_code }}</p>
									</div>
								</div>
							</div>
						</div>

						<!-- Skills Section -->
						<div class="card bg-dark text-light shadow-sm mt-5">
							<div class="card-header border-bottom border-light d-flex justify-content-between align-items-center">
								<h5 class="mb-0">Skills</h5>
								<a href="{% url 'employee:edit-employee-profile' %}" class="btn btn-sm btn-outline-primary">
									<i class="bi bi-pencil-square me-1"></i> Edit Profile
								</a>
							</div>
							<div class="card-body">
								{% if employee_skills.exists %}
									<table class="table table-dark table-hover mb-0">
										<thead class="table-secondary text-dark">
											<tr>
												<th>Skill</th>
												<th>Rating</th>
											</tr>
										</thead>
										<tbody>
											{% for skill in employee_skills %}
												<tr>
													<td>{{ skill.skill.name }}</td>
													<td>{{ skill.get_rating_display }}</td>
												</tr>
											{% endfor %}
										</tbody>
									</table>
								{% else %}
									<p class="text-muted">No skill information available.</p>
								{% endif %}
							</div>
						</div>
					</div>
					{% endblock %}

│
├── expenses/
│   ├── forms.py
			from django import forms
			from .models import Expense

			class ExpenseForm(forms.ModelForm):
				class Meta:
					model = Expense
					fields = ['project', 'expense_type', 'date', 'kilometers', 'amount', 'receipt']
					widgets = {
						'date': forms.DateInput(attrs={'type': 'date'}),
	
				}
				
	├── models.py
			from django.db import models
			from employee.models import EmployeeProfile
			from project.models import Project
			from django.utils import timezone

			class Expense(models.Model):
				EXPENSE_TYPES = [
					('Travel - Public Transport', 'Travel - Public Transport'),
					('Travel - Cab', 'Travel - Cab'),
					('Travel - Bike', 'Travel - Bike'),
					('Travel - Personal Car', 'Travel - Personal Car'),
					('DA - Within Pune', 'DA - Within Pune'),
					('DA - Outside Pune', 'DA - Outside Pune'),
					('Other', 'Other'),
				]

				employee = models.ForeignKey(EmployeeProfile, on_delete=models.CASCADE)
				project = models.ForeignKey(Project, on_delete=models.SET_NULL, null=True, blank=True)
				expense_type = models.CharField(max_length=50, choices=EXPENSE_TYPES)
				date = models.DateField(default=timezone.now)
				amount = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
				kilometers = models.IntegerField(null=True, blank=True)
				receipt = models.FileField(upload_to='expense_receipts/', null=True, blank=True)

				def save(self, *args, **kwargs):
					if not self.amount and self.kilometers is not None:
						if 'Bike' in self.expense_type:
							self.amount = self.kilometers * 5
						elif 'Car' in self.expense_type:
							self.amount = self.kilometers * 12
						elif 'Within Pune' in self.expense_type:
							self.amount = 300
						elif 'Outside Pune' in self.expense_type:
							self.amount = 600
					super().save(*args, **kwargs)

				def __str__(self):
					return f"{self.employee.user.get_full_name()} - {self.expense_type} on {self.date}"
	
	├── urls.py
			from django.urls import path
			from . import views

			app_name = 'expenses'

			urlpatterns = [
				path('my-expenses/', views.employee_expenses, name='employee-expenses'),
			]

	├──	views.py
			from django.shortcuts import render, redirect
			from employee.models import EmployeeProfile
			from .models import Expense
			from .forms import ExpenseForm
			from django.contrib.auth.decorators import login_required

			@login_required
			def employee_expenses(request):
				profile = EmployeeProfile.objects.get(user=request.user)
				expenses = Expense.objects.filter(employee=profile).order_by('-date')

				if request.method == 'POST':
					form = ExpenseForm(request.POST, request.FILES)
					if form.is_valid():
						expense = form.save(commit=False)
						expense.employee = profile
						expense.save()
						return redirect('employee-expenses')
				else:
					form = ExpenseForm()

				return render(request, 'expenses/my_expenses.html', {
					'form': form,
					'expenses': expenses
				})

│   └── templates/
│       └── expenses/
│           └── my_expenses.html
					{% extends "base.html" %}
					{% load static %}

					{% block content %}
					<h2>My Expenses</h2>

					<table style="width: 100%; border-collapse: collapse;">
						<thead>
							<tr style="background-color: #f0f0f0;">
								<th style="padding: 10px; border: 1px solid #ddd;">Date</th>
								<th style="padding: 10px; border: 1px solid #ddd;">Category</th>
								<th style="padding: 10px; border: 1px solid #ddd;">Amount</th>
								<th style="padding: 10px; border: 1px solid #ddd;">Notes</th>
								<th style="padding: 10px; border: 1px solid #ddd;">Receipt</th>
							</tr>
						</thead>
						<tbody>
							{% for expense in expenses %}
							<tr>
								<td style="padding: 8px; border: 1px solid #ddd;">{{ expense.date }}</td>
								<td style="padding: 8px; border: 1px solid #ddd;">{{ expense.category }}</td>
								<td style="padding: 8px; border: 1px solid #ddd;">₹{{ expense.amount }}</td>
								<td style="padding: 8px; border: 1px solid #ddd;">{{ expense.notes }}</td>
								<td style="padding: 8px; border: 1px solid #ddd;">
									{% if expense.receipt %}
										<a href="{{ expense.receipt.url }}" target="_blank">View</a>
									{% else %}
										No Receipt
									{% endif %}
								</td>
							</tr>
							{% empty %}
							<tr>
								<td colspan="5" style="padding: 8px; text-align: center;">No expenses submitted.</td>
							</tr>
							{% endfor %}
						</tbody>
					</table>

					{% if user.groups.all.0.name == 'Manager' %}
					  <a href="{% url 'manager:manager-dashboard' %}" class="btn btn-sm btn-outline-light">Back to Dashboard</a>
					{% else %}
					  <a href="{% url 'employee:employee-dashboard' %}" class="btn btn-sm btn-outline-light">Back to Dashboard</a>
					{% endif %}

					{% endblock %}

			
├── project/
│   ├── admin.py

			
			# Register your models here.
			from django.contrib import admin
			from django.contrib.auth.admin import UserAdmin
			from accounts.models import CustomUser
			from django.utils.translation import gettext_lazy as _
			from .models import Project, Task, ProjectDocument, ProjectComment, ProjectBudget



			admin.site.register(Project)
			admin.site.register(Task)
			admin.site.register(ProjectDocument)
			admin.site.register(ProjectComment)
			admin.site.register(ProjectBudget)  # Add clearly



			@admin.register(CustomUser)
			class CustomUserAdmin(UserAdmin):
				# Fields shown in the admin form when adding/editing users
				fieldsets = (
					(None, {"fields": ("username", "password")}),
					(_("Personal info"), {"fields": ("first_name", "middle_name", "last_name", "email")}),
					(_("Permissions"), {"fields": ("is_active", "is_staff", "is_superuser", "groups", "user_permissions")}),
					(_("Important dates"), {"fields": ("last_login", "date_joined")}),
				)
				# Fields shown when creating a user via "Add user" form
				add_fieldsets = (
					(None, {
						"classes": ("wide",),
						"fields": ("username", "email", "first_name", "middle_name", "last_name", "password1", "password2"),
					}),
				)
				list_display = ("username", "email", "first_name", "middle_name", "last_name", "is_staff")
				search_fields = ("username", "email", "first_name", "last_name")
				ordering = ("username",)

	
	├── apps.py
			from django.apps import AppConfig


		class ProjectConfig(AppConfig):
			default_auto_field = 'django.db.models.BigAutoField'
			name = 'project'


	├── forms.py
							# project/forms.py
			from django import forms
			from .models import Project, Task, ProjectDocument, ProjectBudget  # Add ProjectBudget here clearly




			class ProjectForm(forms.ModelForm):
				class Meta:
					model = Project
					fields = [
						'project_name', 'customer_name', 'description', 'location',
						'start_date', 'end_date', 'project_manager', 'assigned_employees',
						'status', 'progress',  # new fields
					]
					widgets = {
						'start_date': forms.DateInput(attrs={'type': 'date'}),
						'end_date': forms.DateInput(attrs={'type': 'date'}),
						'description': forms.Textarea(attrs={'rows': 4}),
						'assigned_employees': forms.CheckboxSelectMultiple(),
						'status': forms.Select(),
						'progress': forms.NumberInput(attrs={'min':0, 'max':100}),
					}



			class TaskForm(forms.ModelForm):
				class Meta:
					model = Task
					fields = ['title', 'description', 'assigned_to', 'due_date', 'completed']
					widgets = {
						'due_date': forms.DateInput(attrs={'type': 'date'}),
						'description': forms.Textarea(attrs={'rows':3}),
						'assigned_to': forms.Select(),
					}

			class ProjectDocumentForm(forms.ModelForm):
				class Meta:
					model = ProjectDocument
					fields = ['document', 'description']

			class ProjectBudgetForm(forms.ModelForm):
				class Meta:
					model = ProjectBudget
					fields = ['allocated_budget', 'expenses_incurred']
					widgets = {
						'allocated_budget': forms.NumberInput(attrs={'step':'0.01'}),
						'expenses_incurred': forms.NumberInput(attrs={'step':'0.01'}),
					}

	├── models.py
			from django.db import models
			from django.conf import settings
			from employee.models import EmployeeProfile
			from django.utils import timezone



			class Project(models.Model):
				LOCATION_CHOICES = [
					('Within Pune', 'Within Pune'),
					('Outside Pune', 'Outside Pune'),
				]

				STATUS_CHOICES = [
					('Not Started', 'Not Started'),
					('In Progress', 'In Progress'),
					('Completed', 'Completed'),
					('On Hold', 'On Hold'),
					('Cancelled', 'Cancelled'),
				]

				project_name = models.CharField(max_length=100)
				customer_name = models.CharField(max_length=100)
				description = models.TextField(blank=True)
				location = models.CharField(max_length=20, choices=LOCATION_CHOICES)
				start_date = models.DateField()
				end_date = models.DateField(null=True, blank=True)
				project_manager = models.ForeignKey(
					settings.AUTH_USER_MODEL,
					on_delete=models.SET_NULL,
					null=True,
					related_name='managed_projects'
				)
				assigned_employees = models.ManyToManyField(EmployeeProfile, related_name='projects_assigned', blank=True)
				status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Not Started')
				progress = models.PositiveIntegerField(default=0)

				def __str__(self):
					return f"{self.project_name} ({self.customer_name})"

			class ProjectComment(models.Model):
				project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='comments')
				user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)
				comment = models.TextField()
				timestamp = models.DateTimeField(auto_now_add=True)

				def __str__(self):
					return f"{self.user.get_full_name()} on {self.project.project_name}"



			#class Task(models.Model):
			   # project = models.ForeignKey('Project', on_delete=models.CASCADE, related_name='tasks')
				#title = models.CharField(max_length=255)  # ✅ Add this field
			   # description = models.TextField(blank=True)
			   # assigned_to = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)
				#due_date = models.DateField(null=True, blank=True)
			   # completed = models.BooleanField(default=False)  # ✅ Add this field
			   # status = models.CharField(max_length=50, choices=[
				 #   ('pending', 'Pending'),
			   #     ('in_progress', 'In Progress'),
				  #  ('completed', 'Completed'),
			   # ], default='pending')
			   # created_at = models.DateTimeField(auto_now_add=True)

				#def __str__(self):
					#return f"{self.name} ({self.project.name})"
					
					


			class Task(models.Model):
				project = models.ForeignKey(Project, on_delete=models.CASCADE)
				title = models.CharField(max_length=255)  # ✅ Add this field
				description = models.TextField(blank=True, null=True)
				due_date = models.DateField(null=True, blank=True)
				completed = models.BooleanField(default=False)  # ✅ Add this field
				
				# ✅ Add this missing field:
				assigned_to = models.ForeignKey(
					settings.AUTH_USER_MODEL, on_delete=models.SET_NULL,
					null=True, blank=True, related_name='assigned_tasks'
				)

				def __str__(self):
					return self.title
					

			class ProjectDocument(models.Model):
				project = models.ForeignKey('Project', on_delete=models.CASCADE, related_name='documents')
				title = models.CharField(max_length=255)
				uploaded_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)
				document = models.FileField(upload_to='project_documents/')
				uploaded_at = models.DateTimeField(auto_now_add=True)
				description = models.TextField(blank=True, null=True)  # ✅ Add this field

				def __str__(self):
					return f"{self.title} - {self.project.name}"

			class ProjectBudget(models.Model):
				project = models.OneToOneField('Project', on_delete=models.CASCADE, related_name='budget')
				estimated_cost = models.DecimalField(max_digits=12, decimal_places=2)
				actual_cost = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
				approved_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)
				remarks = models.TextField(blank=True)
				allocated_budget = models.DecimalField(max_digits=12, decimal_places=2)  # ✅ Added
				expenses_incurred = models.DecimalField(max_digits=12, decimal_places=2, default=0.00)  # ✅ Added

				def __str__(self):
					return f"Budget for {self.project.name}"




	├── tests.py
			from django.test import TestCase

		# Create your tests here.

	├── urls.py
				# project/urls.py
			from django.urls import path
			from . import views

			app_name = 'project'  # <-- clearly add this line

			urlpatterns = [
				path('', views.project_list, name='project-list'),
				path('project/<int:pk>/', views.project_detail, name='project-detail'),
				path('project/new/', views.project_create, name='project-create'),
				path('project/<int:pk>/edit/', views.project_edit, name='project-edit'),
				path('project/<int:project_pk>/task/new/', views.task_create, name='task-create'),
				path('project/<int:project_pk>/task/<int:task_pk>/edit/', views.task_edit, name='task-edit'),
				path('project/<int:project_pk>/document/upload/', views.document_upload, name='document-upload'),
				path('project/<int:project_pk>/document/<int:doc_pk>/delete/', views.document_delete, name='document-delete'),
				path('project/<int:project_pk>/budget/', views.budget_manage, name='budget-manage'),
				path('analytics/', views.analytics_dashboard, name='analytics-dashboard'),
				path('export/projects/', views.export_projects_excel, name='export-projects-excel'),

				
			]



	├── views.py
	
			# project/views.py
			from django.shortcuts import render, redirect, get_object_or_404
			from django.contrib.auth.decorators import login_required
			from .models import Project, ProjectDocument
			from .forms import ProjectForm
			from .forms import ProjectDocumentForm
			from .models import Task
			from .forms import TaskForm
			from .models import ProjectBudget
			from .forms import ProjectBudgetForm
			from django.http import HttpResponse
			from import_export import resources

			from tablib import Dataset




			@login_required
			def project_list(request):
				projects = Project.objects.all()
				return render(request, 'project/project_list.html', {'projects': projects})

			@login_required
			def project_detail(request, pk):
				project = get_object_or_404(Project, pk=pk)
				today_start = project.is_starting_today
				today_end = project.is_ending_today
				return render(request, 'project/project_detail.html', {
					'project': project,
					'today_start': today_start,
					'today_end': today_end,
				})


			@login_required
			def project_create(request):
				if request.method == 'POST':
					form = ProjectForm(request.POST)
					if form.is_valid():
						form.save()
						return redirect('project-list')
				else:
					form = ProjectForm()
				return render(request, 'project/project_form.html', {'form': form, 'title': 'Add New Project'})

			@login_required
			def project_edit(request, pk):
				project = get_object_or_404(Project, pk=pk)
				if request.method == 'POST':
					form = ProjectForm(request.POST, instance=project)
					if form.is_valid():
						form.save()
						return redirect('project-detail', pk=pk)
				else:
					form = ProjectForm(instance=project)
				return render(request, 'project/project_form.html', {'form': form, 'title': 'Edit Project'})



			@login_required
			def task_create(request, project_pk):
				project = get_object_or_404(Project, pk=project_pk)
				if request.method == 'POST':
					form = TaskForm(request.POST)
					if form.is_valid():
						task = form.save(commit=False)
						task.project = project
						task.save()
						return redirect('project-detail', pk=project.pk)
				else:
					form = TaskForm()
				return render(request, 'project/task_form.html', {'form': form, 'project': project, 'title':'Add Task'})

			@login_required
			def task_edit(request, project_pk, task_pk):
				project = get_object_or_404(Project, pk=project_pk)
				task = get_object_or_404(Task, pk=task_pk, project=project)
				if request.method == 'POST':
					form = TaskForm(request.POST, instance=task)
					if form.is_valid():
						form.save()
						return redirect('project-detail', pk=project.pk)
				else:
					form = TaskForm(instance=task)
				return render(request, 'project/task_form.html', {'form': form, 'project': project, 'title':'Edit Task'})



			@login_required
			def document_delete(request, project_pk, doc_pk):
				document = get_object_or_404(ProjectDocument, pk=doc_pk, project_id=project_pk)
				if request.method == 'POST':
					document.document.delete()
					document.delete()
					return redirect('project-detail', pk=project_pk)
				return render(request, 'project/document_confirm_delete.html', {'document': document})


			@login_required
			def document_upload(request, project_pk):
				project = get_object_or_404(Project, pk=project_pk)
				if request.method == 'POST':
					form = ProjectDocumentForm(request.POST, request.FILES)
					if form.is_valid():
						doc = form.save(commit=False)
						doc.project = project
						doc.save()
						return redirect('project-detail', pk=project.pk)
				else:
					form = ProjectDocumentForm()
				return render(request, 'project/document_form.html', {'form': form, 'project': project})


			@login_required
			def budget_manage(request, project_pk):
				project = get_object_or_404(Project, pk=project_pk)
				budget, created = ProjectBudget.objects.get_or_create(project=project)
				if request.method == 'POST':
					form = ProjectBudgetForm(request.POST, instance=budget)
					if form.is_valid():
						form.save()
						return redirect('project-detail', pk=project.pk)
				else:
					form = ProjectBudgetForm(instance=budget)
				return render(request, 'project/budget_form.html', {'form': form, 'project': project, 'budget': budget})


			@login_required
			def analytics_dashboard(request):
				total_projects = Project.objects.count()
				projects_completed = Project.objects.filter(status='Completed').count()
				projects_in_progress = Project.objects.filter(status='In Progress').count()
				projects_on_hold = Project.objects.filter(status='On Hold').count()
				projects_not_started = Project.objects.filter(status='Not Started').count()

				context = {
					'total_projects': total_projects,
					'projects_completed': projects_completed,
					'projects_in_progress': projects_in_progress,
					'projects_on_hold': projects_on_hold,
					'projects_not_started': projects_not_started,
				}
				return render(request, 'project/analytics_dashboard.html', context)


			@login_required
			def export_projects_excel(request):
				project_resource = ProjectResource()
				dataset = project_resource.export()
				response = HttpResponse(dataset.xlsx, content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
				response['Content-Disposition'] = 'attachment; filename="projects_report.xlsx"'
				return response

			class ProjectResource(resources.ModelResource):
				class Meta:
					model = Project
					fields = ('id', 'project_name', 'customer_name', 'location', 'status', 'progress', 'start_date', 'end_date')

	├── templates
		└── project/
			└── analytics_dashboard.html
								{% extends "base.html" %}
					{% load static %}


					{% block content %}
					<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
					<div class="container">
						<h2><i class="fa-solid fa-chart-pie"></i> Project Analytics Dashboard</h2>
						<canvas id="projectStatusChart" width="400" height="200"></canvas>
					</div>
						<a class="btn" href="{% url 'export-projects-excel' %}">
							<i class="fa-solid fa-file-excel"></i> Export Projects to Excel
						</a>

					<script>
						const ctx = document.getElementById('projectStatusChart').getContext('2d');
						const projectStatusChart = new Chart(ctx, {
							type: 'pie',
							data: {
								labels: ['Completed', 'In Progress', 'On Hold', 'Not Started'],
								datasets: [{
									label: 'Project Status',
									data: [
										{{ projects_completed }},
										{{ projects_in_progress }},
										{{ projects_on_hold }},
										{{ projects_not_started }}
									],
									backgroundColor: [
										'#28a745',
										'#007bff',
										'#ffc107',
										'#6c757d'
									],
									borderWidth: 1
								}]
							},
							options: {
								responsive: true
							}
						});
					</script>
					{% endblock %}

			└── budget_form.html
								{% extends "base.html" %}
					{% load static %}

					{% block content %}
					<div class="container">
						<h2>Manage Budget for {{ project.project_name }}</h2>
						<form method="post">
							{% csrf_token %}
							{{ form.as_p }}
							<button type="submit">Save Budget</button>
						</form>
						<a class="btn btn-secondary" href="{% url 'project-detail' project.pk %}"><i class="fa-solid fa-arrow-left"></i> Back to Project</a>
					</div>
					{% endblock %}

			└── document_confirm_delete.html
								{% extends "base.html" %}
					{% load static %}

					{% block content %}
					<div class="container">
						<h2>Confirm Delete</h2>
						<p>Are you sure you want to delete document "{{ document.document.name }}"?</p>
						<form method="post">
							{% csrf_token %}
							<button type="submit">Confirm Delete</button>
						</form>
						<a href="{% url 'project-detail' document.project.pk %}">Cancel</a>
					</div>
					{% endblock %}

			└── document_form.html
									{% extends "base.html" %}
						{% load static %}

						{% block content %}
						<div class="container">
							<h2>Upload Document for {{ project.project_name }}</h2>
							<form method="post" enctype="multipart/form-data">
								{% csrf_token %}
								{{ form.as_p }}
								<button type="submit">Upload</button>
							</form>
							<a class="btn btn-secondary" href="{% url 'project-detail' project.pk %}"><i class="fa-solid fa-arrow-left"></i> Back to Project</a>
						</div>
						{% endblock %}

			
			└── project_detail.html
									{% extends "base.html" %}
						{% load static %}

						{% block content %}
						<h2>Project Detail: {{ project.project_name }}</h2>

						<ul>
							<li><strong>Customer:</strong> {{ project.customer_name }}</li>
							<li><strong>Status:</strong> {{ project.status }}</li>
							<li><strong>Start Date:</strong> {{ project.start_date }}</li>
							<li><strong>End Date:</strong> {{ project.end_date }}</li>
							<li><strong>Progress:</strong> {{ project.progress }}%</li>
						</ul>

						<h3>Tasks</h3>
						{% if project.tasks.exists %}
							<ul>
								{% for task in project.tasks.all %}
									<li>{{ task.task_name }} - {{ task.status }}</li>
								{% endfor %}
							</ul>
						{% else %}
							<p>No tasks assigned.</p>
						{% endif %}

						<a href="{% url 'project:project-list' %}" class="btn">← Back to Projects</a>
						{% endblock %}

			└── project_form.html
									<!DOCTYPE html>
						<html lang="en">
						<head>
							<title>{{ title }}</title>
							<!-- Google Fonts & FontAwesome (same as before) -->
							<link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet">
							<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">

							<style>
								/* Same CSS from edit_profile.html for consistency */
								body { font-family: 'Roboto', sans-serif; background-color: #f0f2f5; margin:0; padding:0; }
								.container { max-width:800px; background:#fff; margin:40px auto; padding:30px; border-radius:8px; box-shadow:0 4px 10px rgba(0,0,0,0.05); }
								h2 { color:#343a40; text-align:center; margin-bottom:20px; }
								.form-group { margin-bottom:15px; }
								.form-group label { display:block; font-weight:500; margin-bottom:5px; }
								.form-group input, .form-group select, .form-group textarea { width:100%; padding:10px; border:1px solid #ced4da; border-radius:4px; box-sizing:border-box; }
								button { padding:10px 20px; background-color:#007bff; color:#ffffff; border:none; border-radius:5px; cursor:pointer; width:100%; }
								.back-btn { margin-top:15px; display:inline-block; color:#007bff; text-decoration:none; }
							</style>
						</head>
						<body>
						<div class="container">
							<h2>{{ title }}</h2>
							<form method="post">
								{% csrf_token %}
								{% for field in form %}
									<div class="form-group">
										<label>{{ field.label }}</label>
										{{ field }}
										{% if field.errors %}
											<div style="color:#dc3545;">{{ field.errors }}</div>
										{% endif %}
									</div>
								{% endfor %}
								<button type="submit">Save</button>
							</form>
							<a class="btn btn-secondary" href="{% url 'project-list' %}"><i class="fa-solid fa-arrow-left"></i> Back to Project List</a>
						</div>
						</body>
						</html>




			└── project_list.html
									{% extends "base.html" %}
						{% load static %}

						{% block content %}
						<h2>Project List</h2>
						<a class="btn" href="{% url 'project-create' %}"><i class="fa-solid fa-plus"></i> Add New Project</a>
						<ul>
							{% for project in projects %}
								<li><a href="{% url 'project-detail' project.pk %}">{{ project.project_name }}</a></li>
							{% endfor %}
						</ul>
						{% endblock %}




			└── task_form.html
								{% extends "base.html" %}
					{% load static %}


					{% block content %}
					<div class="container">
						<h2>{{ title }} for {{ project.project_name }}</h2>
						<form method="post">
							{% csrf_token %}
							{% for field in form %}
							<div class="form-group">
								<label>{{ field.label }}</label>
								{{ field }}
							</div>
							{% endfor %}
							<button type="submit">Save Task</button>
						</form>
						<a class="btn btn-secondary" href="{% url 'project-detail' project.pk %}"><i class="fa-solid fa-arrow-left"></i> Back to Project</a>
					</div>
					{% endblock %}

			

├──	manager/
│   ├── admin.py
			from django.contrib import admin
			from .models import MainSkill, SubSkill

			class SubSkillInline(admin.TabularInline):
				model = SubSkill
				extra = 1

			@admin.register(MainSkill)
			class MainSkillAdmin(admin.ModelAdmin):
				list_display = ('name',)
				inlines = [SubSkillInline]

			@admin.register(SubSkill)
			class SubSkillAdmin(admin.ModelAdmin):
				list_display = ('name', 'main_skill')
				list_filter = ('main_skill',)
				
	├──forms.py
			# manager/forms.py
			from django import forms
			from django.contrib.auth import get_user_model
			from django.forms import inlineformset_factory
			from .models import MainSkill, SubSkill, EmployeeSkill, SkillCategory, Skill
			from django.contrib.auth.models import User
			from manager.models import EmployeeSkill, MainSkill, SubSkill
			from employee.models import EmployeeProfile



			User = get_user_model()
			# manager/forms.py



			class AssignSkillForm(forms.ModelForm):
				class Meta:
					model = EmployeeSkill
					fields = ['employee', 'main_skill', 'subskill', 'rating']

				def __init__(self, *args, **kwargs):
					super().__init__(*args, **kwargs)
					self.fields['subskill'].queryset = SubSkill.objects.none()

					if 'main_skill' in self.data:
						try:
							main_skill_id = int(self.data.get('main_skill'))
							self.fields['subskill'].queryset = SubSkill.objects.filter(main_skill_id=main_skill_id).order_by('name')
						except (ValueError, TypeError):
							pass
					elif self.instance.pk and self.instance.main_skill:
						self.fields['subskill'].queryset = SubSkill.objects.filter(main_skill=self.instance.main_skill)




			class MainSkillForm(forms.ModelForm):
				class Meta:
					model = MainSkill
					fields = ['name']

			class SubSkillForm(forms.ModelForm):
				class Meta:
					model = SubSkill
					fields = ['main_skill', 'name']


			# Form to create a new main skill category
			class SkillCategoryForm(forms.ModelForm):
				class Meta:
					model = SkillCategory
					fields = ['name']
					widgets = {
						'name': forms.TextInput(attrs={
							'placeholder': 'Enter main skill (e.g., PLC)',
							'class': 'form-control',
						})
					}

			# Inline formset for adding subskills under a category
			SkillFormSet = inlineformset_factory(
				SkillCategory,
				Skill,
				fields=('name',),
				extra=1,
				widgets={
					'name': forms.TextInput(attrs={
						'placeholder': 'Enter subskill (e.g., Siemens)',
						'class': 'form-control',
					})
				}
			)
	├──models.py
			from django.db import models
			from django.contrib.auth import get_user_model
			from django.conf import settings
			from accounts.models import CustomUser


			CustomUser = get_user_model()

			class MainSkill(models.Model):
				name = models.CharField(max_length=100, unique=True)

				class Meta:
					verbose_name = "Main Skill"
					verbose_name_plural = "Main Skills"

				def __str__(self):
					return self.name

			class SubSkill(models.Model):
				main_skill = models.ForeignKey(MainSkill, on_delete=models.CASCADE, related_name='subskills')
				name = models.CharField(max_length=100)

				class Meta:
					unique_together = ('main_skill', 'name')
					verbose_name = "Sub Skill"
					verbose_name_plural = "Sub Skills"

				def __str__(self):
					return f"{self.main_skill.name} → {self.name}"

			class SkillCategory(models.Model):
				name = models.CharField(max_length=100)

				def __str__(self):
					return self.name

			class Skill(models.Model):
				category = models.ForeignKey(SkillCategory, on_delete=models.CASCADE, related_name='skills')
				name = models.CharField(max_length=100)

				def __str__(self):
					return f"{self.category.name} → {self.name}"



			class EmployeeSkill(models.Model):
				employee = models.ForeignKey(CustomUser, on_delete=models.CASCADE)  # ✅ correct link
				main_skill = models.ForeignKey(MainSkill, on_delete=models.CASCADE)
				subskill = models.ForeignKey(SubSkill, on_delete=models.CASCADE)
				rating = models.IntegerField(choices=[(i, i) for i in range(5)], default=0)

				def __str__(self):
					return f"{self.employee.get_full_name()} - {self.main_skill.name} - {self.subskill.name} ({self.rating})"
	


	├──urls.py
	# manager/urls.py

			from django.urls import path
			from . import views

			app_name = 'manager'

			urlpatterns = [
				path('', views.manager_dashboard, name='manager-dashboard'),
				path('add-skill/', views.add_skills, name='add-skill'),  # ✅ fix name
				path('assign-skills/', views.assign_skills, name='assign-skills'),  # ✅ Add this line
				path('add-project/', views.add_project, name='add-project'),
				#path('ajax/load-subskills/', views.load_subskills, name='ajax_load_subskills'),
				# manager/urls.py
				#path('ajax/get-subskills/', views.load_subskills, name='get_subskills'),
				path('ajax/load-subskills/', views.load_subskills, name='load_subskills'),


				# manager/urls.py
				


				
			]

	├──views.py
	
			# manager/views.py
			from django.shortcuts import render, redirect
			from .forms import MainSkillForm, SubSkillForm, AssignSkillForm
			from .models import MainSkill, SubSkill, SkillCategory, Skill, EmployeeSkill
			from employee.models import EmployeeProfile
			from django.contrib.auth.decorators import login_required, user_passes_test
			from django.contrib.auth.models import User
			from accounts.utils import is_manager  # assuming you have this utility
			from .forms import SkillCategoryForm, SkillFormSet
			from django.contrib import messages  # Make sure this import exists
			from django.urls import reverse
			from accounts.models import CustomUser
			from django.db import IntegrityError
			from django.http import JsonResponse

			def is_manager(user):
				return user.groups.filter(name='Manager').exists()

			@login_required
			@user_passes_test(is_manager)
			def add_skills(request):
				main_form = MainSkillForm()
				sub_form = SubSkillForm()

				if request.method == 'POST':
					if 'add_main' in request.POST:
						main_form = MainSkillForm(request.POST)
						if main_form.is_valid():
							main_form.save()
							return redirect('manager:add-skill')
					elif 'add_sub' in request.POST:
						sub_form = SubSkillForm(request.POST)
						if sub_form.is_valid():
							sub_form.save()
							return redirect('manager:add-skill')

				main_skills = MainSkill.objects.all().prefetch_related('subskills')

				return render(request, 'manager/add_skills.html', {
					'main_form': main_form,
					'sub_form': sub_form,
					'main_skills': main_skills,
				})


			@login_required
			def manager_dashboard(request):
				user = request.user
				return render(request, 'manager/dashboard.html', {'user': user})





			@login_required
			@user_passes_test(is_manager)
			def assign_skills(request):
				form = AssignSkillForm()

				if request.method == 'POST':
					#form = AssignSkillForm(request.POST)
					form = AssignSkillForm(request.POST or None)

					if form.is_valid():
						try:
							employee = form.cleaned_data['employee']
							skill = form.cleaned_data['skill']
							subskill = form.cleaned_data['subskill']
							rating = form.cleaned_data['rating']

							# Ensure employee is the user, not profile
							EmployeeSkill.objects.update_or_create(
								employee=employee.user,
								main_skill=skill,
								subskill=subskill,
								defaults={'rating': rating}
							)
							return redirect('manager:assign_skills')
						except IntegrityError as e:
							print("IntegrityError:", e)

				# Fetch all employee profiles
				employees = EmployeeProfile.objects.select_related('user').all()
				#assigned_skills = EmployeeSkill.objects.select_related('employee', 'subskill__skill')
				assigned_skills = EmployeeSkill.objects.select_related('employee', 'main_skill', 'subskill')


				# Prepare skill matrix structure
				skill_matrix = []
				for emp in employees:
					skills = assigned_skills.filter(employee=emp.user)
					skill_matrix.append({
						'employee': emp,
						'skills': skills
					})

				return render(request, 'manager/assign_skills.html', {
					'form': form,
					'skill_matrix': skill_matrix
					
					
				})




			@login_required
			@user_passes_test(is_manager)
			def add_project(request):
				# Dummy placeholder for now
				return render(request, 'manager/add_project.html', {})




			def skill_matrix_view(request):
				# Step 1: Get all main skills and their subskills
				#main_skills = MainSkill.objects.prefetch_related('subskills').all()
				main_skills = MainSkill.objects.prefetch_related('subskill_set').all()


				# Step 2: Get all employees with their assigned skills
				employee_skills = EmployeeSkill.objects.select_related('employee', 'subskill__main_skill')

				# Step 3: Group skills per employee
				skill_data = {}
				for es in employee_skills:
					emp = es.employee
					if emp.id not in skill_data:
						skill_data[emp.id] = {
							'employee_id': emp.id,
							'employee_name': emp.get_full_name() or emp.username,
							'experience': emp.employeeprofile.total_experience if hasattr(emp, 'employeeprofile') else '-',
							'skills': {}
						}

					main = es.subskill.main_skill.name
					sub = es.subskill.name
					skill_data[emp.id]['skills'].setdefault(main, {})
					skill_data[emp.id]['skills'][main][sub] = es.rating

				context = {
				'form': form,
				'main_skills': main_skills,
				'subskills': subskills,
				'skill_matrix': skill_matrix.values(),  # This gives list of {'employee', 'skills'}
				}

				#return render(request, 'manager/skill_matrix.html', context)
				return render(request, 'manager/assign_skills.html', {
				'form': form,
				'skill_matrix': skill_matrix,
				'main_skills': main_skills,
				})



			def load_subskills(request):
				main_skill_id = request.GET.get('main_skill_id')
				subskills = SubSkill.objects.filter(main_skill_id=main_skill_id).values('id', 'name')
				return JsonResponse(list(subskills), safe=False)



│   └── templates/
│       └── manager/
│           └──add_skills.html
					{% extends "base.html" %}
					{% load static %}

					{% block title %}Add Skills | Manager{% endblock %}

					{% block content %}
					<div class="container mt-5">
						<h2 class="text-center mb-4">Add Skills</h2>

						<div class="row mb-4">
							<!-- Add Main Skill -->
							<div class="col-md-6">
								<div class="card shadow-sm p-4">
									<h4>Add Main Skill</h4>
									<form method="post">
										{% csrf_token %}
										{{ main_form.as_p }}
										<button type="submit" name="add_main" class="btn btn-primary mt-2">Add Main Skill</button>
									</form>
								</div>
							</div>

							<!-- Add Subskill -->
							<div class="col-md-6">
								<div class="card shadow-sm p-4">
									<h4>Add Subskill</h4>
									<form method="post">
										{% csrf_token %}
										{{ sub_form.as_p }}
										<button type="submit" name="add_sub" class="btn btn-success mt-2">Add Subskill</button>
									</form>
								</div>
							</div>
						</div>

						<!-- Show Existing Skills -->
						<div class="card shadow p-4">
							<h4>Existing Skills</h4>
							{% if main_skills %}
								<ul class="list-group">
									{% for skill in main_skills %}
										<li class="list-group-item">
											<strong>{{ skill.name }}</strong>
											{% if skill.subskills.all %}
												<ul>
													{% for sub in skill.subskills.all %}
														<li>{{ sub.name }}</li>
													{% endfor %}
												</ul>
											{% else %}
												<small class="text-muted">No subskills added yet.</small>
											{% endif %}
										</li>
									{% endfor %}
								</ul>
							{% else %}
								<p>No skills added yet.</p>
							{% endif %}
						</div>
					</div>
					{% if user.groups.all.0.name == 'Manager' %}
					  <a href="{% url 'manager:manager-dashboard' %}" class="btn btn-sm btn-outline-light">Back to Dashboard</a>
					{% else %}
					  <a href="{% url 'employee:employee-dashboard' %}" class="btn btn-sm btn-outline-light">Back to Dashboard</a>
					{% endif %}
					{% endblock %}

			└──assign_skill.html
					{% extends "base.html" %}
					{% load static %}

					{% block content %}
					<div class="container mt-5">
					  <div class="d-flex justify-content-between align-items-center mb-4">
						<h2>Assign Skills to Employees</h2>
						{% if user.groups.all.0.name == 'Manager' %}
						  <a href="{% url 'manager:manager-dashboard' %}" class="btn btn-secondary">← Back to Dashboard</a>
						{% else %}
						  <a href="{% url 'employee:employee-dashboard' %}" class="btn btn-secondary">← Back to Dashboard</a>
						{% endif %}
					  </div>

					  <div class="card shadow-sm mb-4">
						<div class="card-header bg-primary text-white">
						  <strong>Assign Skill</strong>
						</div>
						<div class="card-body">
						  <form method="post" novalidate>
							{% csrf_token %}
							<div class="row">
							  <div class="col-md-4">
								<label for="id_employee" class="form-label">Select Employee</label>
								{{ form.employee }}
							  </div>
							  <div class="col-md-4">
								<label for="id_skill" class="form-label">Select Skill</label>
								{{ form.skill }}
							  </div>
							  <div class="col-md-4">
								<label for="id_rating" class="form-label">Skill Rating (0 - 4)</label>
								{{ form.rating }}
							  </div>
							</div>
							<button type="submit" class="btn btn-success mt-3">Assign Skill</button>
						  </form>
						</div>
					  </div>

					  {% if assigned_skills %}
					  <div class="card shadow-sm">
						<div class="card-header bg-dark text-white">
						  <strong>Assigned Skills List</strong>
						</div>
						<div class="card-body p-0">
						  <div class="table-responsive">
							<table class="table table-bordered table-hover table-striped m-0">
							  <thead class="table-dark">
								<tr>
								  <th>Employee</th>
								  <th>Skill</th>
								  <th>Rating</th>
								  <th>Assigned On</th>
								</tr>
							  </thead>
							  <tbody>
								{% for item in assigned_skills %}
								<tr>
								  <td>{{ item.employee.get_full_name|default:item.employee.username }}</td>
								  <td>{{ item.skill.name }}</td>
								  <td>{{ item.get_rating_display }}</td>
								  <td>{{ item.assigned_at|date:"d M Y H:i" }}</td>
								</tr>
								{% endfor %}
							  </tbody>
							</table>
						  </div>
						</div>
					  </div>
					  {% else %}
						<p class="text-muted mt-3">No skills have been assigned to any employee yet.</p>
					  {% endif %}

					</div>
					{% endblock %}
			└──assign_skills.html
						{% extends 'base.html' %}
						{% load crispy_forms_tags %}
						{% load skill_filters %}

						{% block content %}
						<div class="container mt-4">
						  <h2>Assign Skills to Employee</h2>
						  <hr>

						  <!-- Skill Assignment Form -->
						  <form method="POST" id="assign-skill-form">
							{% csrf_token %}
							<div class="card p-4 mb-4">
							  <div class="row">
								<div class="col-md-4">{{ form.employee|as_crispy_field }}</div>
								<div class="col-md-4">{{ form.main_skill|as_crispy_field }}</div>
								<div class="col-md-4">{{ form.subskill|as_crispy_field }}</div>
							  </div>
							  <div class="row mt-3">
								<div class="col-md-4">{{ form.rating|as_crispy_field }}</div>
								<div class="col-md-8 text-end">
								  <button type="submit" class="btn btn-success">Assign</button>
								  <a href="{% url 'manager:manager-dashboard' %}" class="btn btn-secondary ms-2">Back to Dashboard</a>
								</div>
							  </div>
							</div>
						  </form>

						  <!-- Skill Matrix Table -->
						  <div class="card p-4">
							<h4>Skill Matrix</h4>
							{% if skill_matrix %}
							  <div class="table-responsive">
								<table class="table table-bordered table-striped align-middle">
								  <thead class="table-dark text-center">
									<tr>
									  <th rowspan="2">Sr. No.</th>
									  <th rowspan="2">Employee ID</th>
									  <th rowspan="2">Employee Name</th>
									  {% for main_skill, subskills in skill_headers.items %}
										<th colspan="{{ subskills|length }}">{{ main_skill }}</th>
									  {% endfor %}
									  <th rowspan="2">Actions</th>
									</tr>
									<tr>
									  {% for main_skill, subskills in skill_headers.items %}
										{% for subskill in subskills %}
										  <th>{{ subskill }}</th>
										{% endfor %}
									  {% endfor %}
									</tr>
								  </thead>
								  <tbody>
									{% for employee_data in skill_matrix %}
									  <tr>
										<td>{{ forloop.counter }}</td>
										<td>{{ employee_data.employee_id }}</td>
										<td>{{ employee_data.employee_name }}</td>
										{% for main_skill, subskills in skill_headers.items %}
										  {% for subskill in subskills %}
											<td class="text-center">
											  {{ employee_data.ratings|get_skill_rating:main_skill|get_item:subskill|default:"–" }}
											</td>
										  {% endfor %}
										{% endfor %}
										<td class="text-center">
										  <button class="btn btn-sm btn-outline-primary">Edit</button>
										</td>
									  </tr>
									{% endfor %}
								  </tbody>
								</table>
							  </div>
							{% else %}
							  <p class="text-muted">No skills assigned yet.</p>
							{% endif %}
						  </div>
						</div>

						<!-- AJAX for SubSkill -->
						<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
						<script>
						  $('#id_main_skill').change(function() {
							var mainSkillId = $(this).val();
							var subskillDropdown = $('#id_subskill');

							subskillDropdown.html('<option value="">Loading...</option>');

							$.ajax({
							  url: "{% url 'load_subskills' %}",
							  data: {
								'main_skill': mainSkillId
							  },
							  success: function(data) {
								subskillDropdown.empty();
								if (data.length === 0) {
								  subskillDropdown.append('<option value="">No subskills available</option>');
								} else {
								  subskillDropdown.append('<option value="">Select subskill</option>');
								  data.forEach(function(item) {
									subskillDropdown.append(new Option(item.name, item.id));
								  });
								}
							  },
							  error: function() {
								subskillDropdown.html('<option value="">Error loading subskills</option>');
							  }
							});
						  });
						</script>
						{% endblock %}
						
			└──dashboard.html			
						<!-- Manager Dashboard -->
						{% extends "base.html" %}
						{% load static %}

						{% block title %}Manager Dashboard{% endblock %}

						{% block content %}
						<style>
						  .dashboard-container {
							max-width: 1200px;
							margin: 30px auto;
							padding: 20px;
						  }

						  .dashboard-title {
							font-size: 28px;
							font-weight: 600;
							text-align: center;
							margin-bottom: 30px;
							color: var(--text-color);
						  }

						  .card-grid {
							display: grid;
							grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
							gap: 25px;
						  }

						  .dashboard-card {
							background: var(--card-bg);
							border-radius: 15px;
							padding: 25px;
							box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
							transition: all 0.3s ease-in-out;
							text-align: center;
						  }

						  .dashboard-card:hover {
							transform: translateY(-5px);
							box-shadow: 0 8px 18px rgba(0, 0, 0, 0.1);
						  }

						  .dashboard-card i {
							font-size: 36px;
							margin-bottom: 10px;
							color: var(--icon-color);
						  }

						  .dashboard-card h3 {
							font-size: 18px;
							margin: 10px 0;
							color: var(--text-color);
						  }

						  .dashboard-card a {
							display: inline-block;
							margin-top: 10px;
							background-color: #007bff;
							color: white;
							padding: 8px 14px;
							border-radius: 6px;
							text-decoration: none;
							font-weight: 500;
						  }

						  .dashboard-card a:hover {
							background-color: #0056b3;
						  }
						</style>

						<div class="dashboard-container">
						  <h2 class="dashboard-title">Welcome to Manager Dashboard</h2>

						  <div class="card-grid">

							<!-- My Profile -->
							<div class="dashboard-card">
							  <i class="fa-solid fa-user"></i>
							  <h3>My Profile</h3>
							  <a href="{% url 'employee:employee-profile-home' %}">Go</a>
							</div>

							<!-- My Projects -->
							<div class="dashboard-card">
							  <i class="fa-solid fa-folder"></i>
							  <h3>My Projects</h3>
							  <a href="{% url 'employee:employee-projects' %}">Go</a>
							</div>

							<!-- My Timesheets -->
							<div class="dashboard-card">
							  <i class="fa-solid fa-clock"></i>
							  <h3>My Timesheets</h3>
							  <a href="{% url 'timesheet:employee-timesheets' %}">Go</a>
							</div>

							<!-- My Expenses -->
							<div class="dashboard-card">
							  <i class="fa-solid fa-receipt"></i>
							  <h3>My Expenses</h3>
							  <a href="{% url 'expenses:employee-expenses' %}">Go</a>
							</div>

							<!-- Add Skill Set -->
							<div class="dashboard-card">
							  <i class="fa-solid fa-layer-group"></i>
							  <h3>Add Skill Set</h3>
							  <a href="{% url 'manager:add-skill' %}">Go</a>
							</div>

							<!-- Assign Skills -->
							<div class="dashboard-card">
							  <i class="fa-solid fa-people-arrows"></i>
							  <h3>Assign Skills to Employees</h3>
							  <a href="{% url 'manager:assign-skills' %}">Go</a>
							</div>

							<!-- Add Project/Task -->
							<div class="dashboard-card">
							  <i class="fa-solid fa-plus-square"></i>
							  <h3>Add New Project/Task</h3>
							  <a href="#">Coming Soon</a>
							</div>

							<!-- Assign Projects -->
							<div class="dashboard-card">
							  <i class="fa-solid fa-share-nodes"></i>
							  <h3>Project Assignment</h3>
							  <a href="#">Coming Soon</a>
							</div>

							<!-- Timesheet Approval -->
							<div class="dashboard-card">
							  <i class="fa-solid fa-clipboard-check"></i>
							  <h3>Timesheet Approval</h3>
							  <a href="#">Coming Soon</a>
							</div>

							<!-- Expense Approval -->
							<div class="dashboard-card">
							  <i class="fa-solid fa-file-invoice-dollar"></i>
							  <h3>Expense Approval</h3>
							  <a href="#">Coming Soon</a>
							</div>

						  </div>
						</div>

						<script>
						  document.body.classList.add(localStorage.getItem("theme") || "light");

						  function toggleTheme() {
							const currentTheme = document.body.classList.contains("dark") ? "dark" : "light";
							const newTheme = currentTheme === "dark" ? "light" : "dark";
							document.body.classList.remove(currentTheme);
							document.body.classList.add(newTheme);
							localStorage.setItem("theme", newTheme);
						  }
						</script>
						{% endblock %}
			
			└──skill_matrix.html
			
				{% extends "base.html" %}
				{% load static %}

				{% block content %}
				<div class="container mt-5">

				  <!-- Back to Dashboard Button -->
				  <div class="d-flex justify-content-end mb-4">
					{% if user.groups.all.0.name == 'Manager' %}
					  <a href="{% url 'manager:manager-dashboard' %}" class="btn btn-outline-secondary">← Back to Dashboard</a>
					{% else %}
					  <a href="{% url 'employee:employee-dashboard' %}" class="btn btn-outline-secondary">← Back to Dashboard</a>
					{% endif %}
				  </div>

				  <!-- Page Title -->
				  <h2 class="mb-4 text-primary">Skill Matrix</h2>

				  <!-- Skill Matrix Table -->
				  <div class="card shadow">
					<div class="card-header bg-dark text-white">
					  <strong>Employee Skill Assignments</strong>
					</div>
					<div class="card-body p-0">
					  {% if assigned_skills %}
					  <div class="table-responsive">
						<table class="table table-striped table-hover table-bordered align-middle mb-0">
						  <thead class="table-dark text-center">
							<tr>
							  <th scope="col">#</th>
							  <th scope="col">Employee</th>
							  <th scope="col">Main Skill</th>
							  <th scope="col">Subskill</th>
							  <th scope="col">Rating</th>
							  <th scope="col">Assigned On</th>
							</tr>
						  </thead>
						  <tbody>
							{% for skill in assigned_skills %}
							<tr>
							  <td class="text-center">{{ forloop.counter }}</td>
							  <td>{{ skill.employee.get_full_name|default:skill.employee.username }}</td>
							  <td>{{ skill.skill.name }}</td>
							  <td>{{ skill.subskill.name }}</td>
							  <td class="text-center">{{ skill.get_rating_display }}</td>
							  <td>{{ skill.assigned_at|date:"d M Y, H:i" }}</td>
							</tr>
							{% endfor %}
						  </tbody>
						</table>
					  </div>
					  {% else %}
					  <div class="p-4">
						<p class="text-muted mb-0">No skill assignments found.</p>
					  </div>
					  {% endif %}
					</div>
				  </div>
				</div>
				{% endblock %}
	
	└── templatetags/	
		└── custom_filters.py
				# inside manager/templatetags/custom_filters.py
				from django import template
				register = template.Library()

				@register.filter
				def get_item(dictionary, key):
					if dictionary and key in dictionary:
						return dictionary[key]
					return None

		└── skill_filters.py
					from django import template

					register = template.Library()



					@register.filter
					def get_item(dictionary, key):
						return dictionary.get(key, "-")




					# Example of your custom filter
					@register.filter
					def get_skill_rating(skills_dict, subskill_name):
						return skills_dict.get(subskill_name, None)

	

├── timesheet/
│   ├── forms.py
			from django import forms
			from .models import Timesheet

			class TimesheetForm(forms.ModelForm):
				class Meta:
					model = Timesheet
					fields = ['project', 'date', 'time_from', 'time_to', 'task_description']
					widgets = {
						'date': forms.DateInput(attrs={'type': 'date'}),
						'time_from': forms.TimeInput(attrs={'type': 'time'}),
						'time_to': forms.TimeInput(attrs={'type': 'time'}),
						'task_description': forms.Textarea(attrs={'rows': 3}),
					}
	├── models.py
			from django.db import models
			from django.utils import timezone
			from employee.models import EmployeeProfile
			from project.models import Project

			class Timesheet(models.Model):
				employee = models.ForeignKey(EmployeeProfile, on_delete=models.CASCADE, related_name='timesheets')
				project = models.ForeignKey(Project, on_delete=models.CASCADE)
				date = models.DateField(default=timezone.now)
				time_from = models.TimeField()
				time_to = models.TimeField()
				task_description = models.TextField()

				def __str__(self):
					return f"{self.employee.user.get_full_name()} - {self.project.project_name} ({self.date})"
	├── urls.py
			from django.urls import path
			from . import views

			app_name = 'timesheet'

			urlpatterns = [
				path('my-timesheets/', views.employee_timesheets, name='employee-timesheets'),
			]
	├── views.py
			from django.shortcuts import render, redirect
			from django.contrib.auth.decorators import login_required
			from .forms import TimesheetForm
			from .models import Timesheet
			from employee.models import EmployeeProfile

			@login_required
			def employee_timesheets(request):
				profile = EmployeeProfile.objects.get(user=request.user)
				timesheets = Timesheet.objects.filter(employee=profile).order_by('-date')

				if request.method == 'POST':
					form = TimesheetForm(request.POST)
					if form.is_valid():
						entry = form.save(commit=False)
						entry.employee = profile
						entry.save()
						return redirect('employee-timesheets')
				else:
					form = TimesheetForm()

				return render(request, 'timesheet/my_timesheets.html', {
					'form': form,
					'timesheets': timesheets
				})

	
│   └── templates/
│       └── timesheet/
│           └── my_timesheets.html
						{% extends "base.html" %}
						{% load static %}

						{% block content %}
						<h2>My Timesheets</h2>

						<table style="width: 100%; border-collapse: collapse;">
							<thead>
								<tr style="background-color: #f0f0f0;">
									<th style="padding: 10px; border: 1px solid #ddd;">Date</th>
									<th style="padding: 10px; border: 1px solid #ddd;">Project</th>
									<th style="padding: 10px; border: 1px solid #ddd;">Task</th>
									<th style="padding: 10px; border: 1px solid #ddd;">Time</th>
								</tr>
							</thead>
							<tbody>
								{% for timesheet in timesheets %}
								<tr>
									<td style="padding: 8px; border: 1px solid #ddd;">{{ timesheet.date }}</td>
									<td style="padding: 8px; border: 1px solid #ddd;">{{ timesheet.project.project_name }}</td>
									<td style="padding: 8px; border: 1px solid #ddd;">{{ timesheet.work_description }}</td>
									<td style="padding: 8px; border: 1px solid #ddd;">{{ timesheet.from_time }} - {{ timesheet.to_time }}</td>
								</tr>
								{% empty %}
								<tr>
									<td colspan="4" style="padding: 8px; text-align: center;">No timesheets submitted.</td>
								</tr>
								{% endfor %}
							</tbody>
						</table>

						{% if user.groups.all.0.name == 'Manager' %}
						  <a href="{% url 'manager:manager-dashboard' %}" class="btn btn-sm btn-outline-light">Back to Dashboard</a>
						{% else %}
						  <a href="{% url 'employee:employee-dashboard' %}" class="btn btn-sm btn-outline-light">Back to Dashboard</a>
						{% endif %}

						{% endblock %}

│
├── templates/
│   ├── base.html
				<!-- base.html -->
		{% load static %}
		<!DOCTYPE html>
		<html lang="en">
		<head>
			<meta charset="UTF-8">
			<title>{% block title %}Resource Management Pro{% endblock %}</title>
			<link href="https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap" rel="stylesheet">
			<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
			<link rel="stylesheet" href="{% static 'css/style.css' %}">
			<style>
				body {
					font-family: 'Roboto', sans-serif;
					background-color: #f4f6f9;
					margin: 0;
					padding: 0;
				}
				header {
					background-color: #007bff;
					color: #fff;
					padding: 15px;
					text-align: center;
				}
				nav {
					background-color: #343a40;
					padding: 10px;
					display: flex;
					justify-content: space-between;
					align-items: center;
				}
				nav a {
					color: #ffffff;
					text-decoration: none;
					margin: 0 10px;
				}
				.container {
					max-width: 1000px;
					margin: 30px auto;
					padding: 20px;
					background: #fff;
					border-radius: 8px;
					box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
				}
				footer {
					text-align: center;
					padding: 12px;
					background-color: #f1f1f1;
					color: #666;
					margin-top: 30px;
				}
				.btn {
					background-color: #007bff;
					color: white;
					padding: 8px 14px;
					border: none;
					border-radius: 5px;
					cursor: pointer;
					text-decoration: none;
				}
				.btn:hover {
					background-color: #0056b3;
				}
			</style>
		</head>
		<body>
				<div style="text-align: center; margin-bottom: 20px;">
					<img src="{% static 'images/logo.png' %}" alt="Logo" style="height: 60px;">
					
				</div>
			<header>
				<h2>Resource Management Pro</h2>
			</header>

			<nav>
			{% if user.is_authenticated %}
				<span style="float:right; margin-right: 20px;">
					Logged in as <strong>{{ user.username }}</strong> |
					<form method="post" action="{% url 'accounts:logout' %}" style="display:inline;">
						{% csrf_token %}
						<button type="submit" class="btn">Logout</button>
					</form>
				</span>
			{% else %}
				<span style="float:right; margin-right: 20px;">
					<a href="{% url 'accounts:login' %}" class="btn">Login</a>
				</span>
			{% endif %}
		</nav>


			<div class="container">
				{% block content %}
				{% endblock %}
			</div>

			<footer>
				&copy; {{ year|default:"2025" }} Resource Management Tool. All rights reserved.
			</footer>
		</body>
		</html>

│   └── registration/
│       └── login.html      ← Move here if not already
						{% extends 'base.html' %}
			{% load static %}

			{% block content %}
			<style>
				body {
					font-family: 'Segoe UI', sans-serif;
					background-color: #1e1e2f;
					color: #ffffff;
					transition: background-color 0.3s ease, color 0.3s ease;
				}

				.login-container {
					max-width: 420px;
					margin: 80px auto;
					padding: 30px;
					background-color: #2c2c3e;
					border-radius: 12px;
					box-shadow: 0 0 30px rgba(0, 0, 0, 0.4);
					animation: fadeIn 1s ease;
					position: relative;
				}

				.login-container h2 {
					text-align: center;
					color: #61dafb;
					margin-bottom: 10px;
					font-weight: 600;
				}

				.role-text {
					text-align: center;
					margin-bottom: 15px;
					color: #aaa;
					font-size: 15px;
				}

				.logo {
					display: block;
					margin: 0 auto 15px;
					width: 70px;
					height: 70px;
					animation: pop 1s ease;
				}

				.form-group {
					margin-bottom: 15px;
				}

				label {
					display: block;
					margin-bottom: 5px;
					color: #c2c2c2;
				}

				input[type="text"],
				input[type="password"] {
					width: 100%;
					padding: 10px;
					border: 1px solid #444;
					background-color: #1e1e2f;
					color: #ffffff;
					border-radius: 5px;
				}

				.btn-login {
					width: 100%;
					padding: 12px;
					border: none;
					background-color: #61dafb;
					color: #1e1e2f;
					font-weight: bold;
					border-radius: 5px;
					cursor: pointer;
				}

				.btn-login:hover {
					background-color: #3ca9dd;
				}

				.role-buttons {
					display: flex;
					justify-content: space-between;
					margin: 15px 0 25px;
				}

				.role-buttons a {
					flex: 1;
					margin: 3px;
					text-align: center;
					background-color: #343a40;
					color: #fff;
					padding: 8px;
					border-radius: 5px;
					text-decoration: none;
					font-size: 13px;
				}

				.role-buttons a.active-role {
					background-color: #61dafb;
					color: #1e1e2f;
					font-weight: bold;
				}

				.error-message {
					color: #ff6b6b;
					text-align: center;
					margin-top: 10px;
				}

				.theme-toggle {
					position: absolute;
					top: 15px;
					right: 15px;
					background-color: #444;
					color: #fff;
					border: none;
					padding: 5px 10px;
					font-size: 13px;
					border-radius: 5px;
					cursor: pointer;
				}

				@keyframes fadeIn {
					from { opacity: 0; transform: translateY(-10px); }
					to { opacity: 1; transform: translateY(0); }
				}

				@keyframes pop {
					0% { transform: scale(0.5); opacity: 0; }
					100% { transform: scale(1); opacity: 1; }
				}

				/* Light mode */
				body.light-mode {
					background-color: #f5f5f5;
					color: #111;
				}

				body.light-mode .login-container {
					background-color: #fff;
					color: #111;
				}

				body.light-mode input {
					background-color: #f0f0f0;
					color: #000;
				}

				body.light-mode label {
					color: #333;
				}

				body.light-mode .theme-toggle {
					background-color: #ddd;
					color: #000;
				}
			</style>

			<div class="login-container">
				<button class="theme-toggle" onclick="toggleTheme()">🌙</button>
				<img src="{% static 'images/logo.png' %}" alt="Logo" class="logo">
				<h2>Login Portal</h2>

				{% if request.GET.role %}
					<div class="role-text">Welcome {{ request.GET.role|title }} Login</div>
				{% endif %}

				<div class="role-buttons">
					{% with request.GET.role as role %}
						<a href="{% url 'accounts:login' %}?role=Employee" class="{% if role == 'Employee' %}active-role{% endif %}">Employee</a>
						<a href="{% url 'accounts:login' %}?role=Manager" class="{% if role == 'Manager' %}active-role{% endif %}">Manager</a>
						<a href="{% url 'accounts:login' %}?role=HR" class="{% if role == 'HR' %}active-role{% endif %}">HR</a>
						<a href="{% url 'accounts:login' %}?role=Accountant" class="{% if role == 'Accountant' %}active-role{% endif %}">Accountant</a>
					{% endwith %}
				</div>

				<form method="post" action="{% url 'accounts:login' %}">
					{% csrf_token %}
					<div class="form-group">
						<label for="id_username">Username</label>
						<input type="text" name="username" id="id_username" required placeholder="Enter username">
					</div>
					<div class="form-group">
						<label for="id_password">Password</label>
						<input type="password" name="password" id="id_password" required placeholder="Enter password">
					</div>
					<button type="submit" class="btn-login">Login</button>
				</form>

				{% if form.errors %}
					<div class="error-message">Invalid username or password. Please try again.</div>
				{% endif %}
			</div>

			<script>
				function toggleTheme() {
					const body = document.body;
					const isLight = body.classList.toggle("light-mode");
					localStorage.setItem("theme", isLight ? "light" : "dark");
				}

				// Apply saved theme from localStorage
				window.onload = function () {
					const savedTheme = localStorage.getItem("theme");
					if (savedTheme === "light") {
						document.body.classList.add("light-mode");
					}
				};
			</script>
			{% endblock %}
	
│
├── ResourceManagement/
│   ├── settings.py
		'import os
		from pathlib import Path

		BASE_DIR = Path(__file__).resolve().parent.parent

		SECRET_KEY = 'your-secret-key'
		DEBUG = True
		ALLOWED_HOSTS = []

		INSTALLED_APPS = [
			'django.contrib.admin',
			'django.contrib.auth',
			'django.contrib.contenttypes',
			'django.contrib.sessions',
			'django.contrib.messages',
			'django.contrib.staticfiles',
			'accounts',            # Add explicitly
			'employee',
			'project',
			'expenses',
			'timesheet',
			'import_export',
			'manager',
			'widget_tweaks',
			'crispy_forms',
			'crispy_bootstrap5',  # If you're using Bootstrap 5
		]

		CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
		CRISPY_TEMPLATE_PACK = "bootstrap5"

		AUTH_USER_MODEL = 'accounts.CustomUser'

		#AUTH_USER_MODEL = 'auth.User'  # Temporarily revert to built-in User until custom user defined properly

		MIDDLEWARE = [
			'django.middleware.security.SecurityMiddleware',
			'django.contrib.sessions.middleware.SessionMiddleware',
			'django.middleware.common.CommonMiddleware',
			'django.middleware.csrf.CsrfViewMiddleware',
			'django.contrib.auth.middleware.AuthenticationMiddleware',
			'accounts.middleware.DisableClientSideCachingMiddleware',
			'django.contrib.messages.middleware.MessageMiddleware',
			'django.middleware.clickjacking.XFrameOptionsMiddleware',
		]

		ROOT_URLCONF = 'ResourceManagement.urls'

		TEMPLATES = [{
			'BACKEND': 'django.template.backends.django.DjangoTemplates',
			'DIRS': [os.path.join(BASE_DIR, 'templates')],
			'APP_DIRS': True,
			'OPTIONS': {
				'context_processors': [
					'django.template.context_processors.debug',
					'django.template.context_processors.request',
					'django.contrib.auth.context_processors.auth',
					'django.contrib.messages.context_processors.messages',
				],
			},
		}]

		WSGI_APPLICATION = 'ResourceManagement.wsgi.application'

		DATABASES = {
			'default': {
				'ENGINE': 'django.db.backends.sqlite3',
				'NAME': BASE_DIR / 'db.sqlite3',
			}
		}

		AUTH_PASSWORD_VALIDATORS = [
			{'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
			{'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
			{'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
			{'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
		]

		LANGUAGE_CODE = 'en-us'
		TIME_ZONE = 'Asia/Kolkata'
		USE_I18N = True
		USE_TZ = True


		# Static files (CSS, JavaScript, Images)
		STATIC_URL = '/static/'

		# Directory where 'collectstatic' gathers static files for production explicitly
		STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

		# Additional directories for static files during development explicitly
		STATICFILES_DIRS = [
			os.path.join(BASE_DIR, 'static'),
		]

		MEDIA_URL = '/media/'
		MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

		DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


		LOGIN_URL = '/accounts/login/'
		LOGIN_REDIRECT_URL = '/accounts/profile/'
		LOGOUT_REDIRECT_URL = '/accounts/login/'

│   ├──urls.py
		from django.contrib import admin
		from django.urls import path, include
		from django.contrib.auth import views as auth_views
		from django.conf import settings
		from django.conf.urls.static import static

		urlpatterns = [
			path('admin/', admin.site.urls),
			path('accounts/', include('accounts.urls')),
			path('', auth_views.LoginView.as_view(template_name='registration/login.html'), name='root-login'),
			path('employee/', include('employee.urls')),
			path('project/', include('project.urls')),
			path('timesheet/', include('timesheet.urls')),
			path('expenses/', include('expenses.urls')),
			path('manager/', include('manager.urls')),
		]

		# Media file handling explicitly (correct usage):
		urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

│   └──asgi.py
		"""
		ASGI config for ResourceManagement project.

		It exposes the ASGI callable as a module-level variable named ``application``.

		For more information on this file, see
		https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
		"""

		import os

		from django.core.asgi import get_asgi_application

		os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ResourceManagement.settings')

		application = get_asgi_application()
		
	└──wsgi.py	
		
		"""
		WSGI config for ResourceManagement project.

		It exposes the WSGI callable as a module-level variable named ``application``.

		For more information on this file, see
		https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
		"""

		import os

		from django.core.wsgi import get_wsgi_application

		os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ResourceManagement.settings')

		application = get_wsgi_application()


└── manage.py
 
		'#!/usr/bin/env python
		"""Django's command-line utility for administrative tasks."""
		import os
		import sys


		def main():
			"""Run administrative tasks."""
			os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ResourceManagement.settings')
			try:
				from django.core.management import execute_from_command_line
			except ImportError as exc:
				raise ImportError(
					"Couldn't import Django. Are you sure it's installed and "
					"available on your PYTHONPATH environment variable? Did you "
					"forget to activate a virtual environment?"
				) from exc
			execute_from_command_line(sys.argv)


		if __name__ == '__main__':
			main()
		'.

