i have app structure, develoment summary and partially working code. i will paste everything here in chat. i am fecing issue with manager login. i can login to manager dashboard but when I open the menu like my profile, 
my project, my timesheet, my expenses and then press back to dashboard button, then it redirecting to the employee dashboard. it must redirect to manager dashboard a I have logged in with manager credentials. 
here are the summary and codes.


Resource Management Pro - Development Summary (as of April 10, 2025)
Overview
Purpose: A Django-based web application for managing employee profiles, skills, projects, and roles, with role-based dashboards (e.g., Manager, Employee).
Tech Stack: Django, Python, HTML/CSS (Bootstrap, Bootstrap Icons), SQLite (assumed default).
Key Features:
User authentication with role-based dashboard redirection.
Employee profile management (view, edit).
Skill assignment for managers.
Project and dashboard views per role.
Current Team: Developed with assistance from Grok 3 (xAI), focusing on bug fixes and feature implementation.
Directory Structure (Assumed Based on Code)
text


ResourceManagement/
├── accounts/
│   ├── models.py (CustomUser with ROLES)
│   ├── views.py
│   └── urls.py
├── employee/
│   ├── models.py (EmployeeProfile)
│   ├── views.py
│   ├── forms.py (EmployeeProfileForm)
│   └── templates/employee/
│       ├── profile_home.html
│       ├── edit_profile.html
│       ├── employee_dashboard.html
│       └── my_projects.html
├── manager/
│   ├── models.py (MainSkill, SubSkill, EmployeeSkill)
│   ├── views.py
│   ├── forms.py (AssignSkillForm)
│   └── templates/manager/
│       ├── manager_dashboard.html
│       └── assign_skills.html
├── templates/
│   └── base.html
└── urls.py (root)
Key Components and Progress
Authentication & Role Management (accounts/views.py, accounts/models.py):
CustomUser Model: Extended with role field (choices: Employee, Manager, HR, Accountant, Director, Admin).
Login: custom_login authenticates users and redirects to role-specific dashboards using get_dashboard_url.
Manager (role='Manager') → /manager/dashboard/.
Logs confirm ajaykumarj@pcscontrols.in as 'Manager'.
Role Change: change_user_role allows Admin/Manager/Director to update roles, syncing EmployeeProfile.role.
Utility: get_dashboard_url(user) centralizes redirect logic:
python

role_redirects = {
    'Employee': 'employee:employee-dashboard',
    'Manager': 'manager:manager-dashboard',
    'HR': 'hr:dashboard',
    'Accountant': 'accountant:dashboard',
    'Director': 'director:dashboard',
    'Admin': '/admin/'
}
Employee Module (employee/views.py, employee/templates/):
Profile View: profile_home renders profile_home.html with employee details and skills.
Path: /employee/profile/.
Context: profile (EmployeeProfile), employee_skills, debug_role.
Edit Profile: edit_profile updates profile via EmployeeProfileForm, redirects using get_dashboard_url.
Dashboard: employee_dashboard shows recent projects.
Projects: my_projects lists assigned projects.
Issue: "Back to Dashboard" button on /employee/profile/ redirects to /employee/dashboard/ instead of /manager/dashboard/ for managers.
Manager Module (manager/views.py, manager/templates/):
Dashboard: manager_dashboard renders manager_dashboard.html with navigation cards (e.g., "My Profile", "Assign Skills").
Path: /manager/dashboard/.
Skill Assignment: assign_skills merges skill management into one view, using AssignSkillForm.
Features: Assign skills to employees, view skill matrix.
Subskills: load_subskills supports dynamic subskill loading via AJAX.
Templates:
Base: base.html provides a common layout with navigation bar (login/logout).
Profile: profile_home.html displays employee details, skills, and navigation buttons.
Latest: "Dashboard" button uses a form POST to accounts:dashboard-redirect.
Manager Dashboard: manager_dashboard.html links to profile and other features.
URL Configuration:
Root: urls.py includes accounts/, employee/, manager/.
Accounts: accounts/urls.py defines login, dashboard-redirect, change-user-role.
Resolved Features
Login Redirect: Managers correctly land on /manager/dashboard/ post-login.
Skill Assignment: Merged into assign_skills with form and matrix display.
Profile Editing: Updates sync with role-based redirects.
Current Issue
Problem: From /manager/dashboard/, clicking "My Profile" → /employee/profile/, then "Back to Dashboard" → /employee/dashboard/ (should be /manager/dashboard/).
Attempts:
Template Conditional: Added {% if request.user.role == 'Manager' %} in profile_home.html → Failed.
View Redirect: Added GET parameter check in profile_home → Failed.
Form Submission: Changed "Dashboard" to a POST form to dashboard-redirect → Still redirects to /employee/dashboard/.
Logs:
text


[10/Apr/2025 11:27:43] "GET /manager/dashboard/ HTTP/1.1" 200 6376
[10/Apr/2025 11:27:46] "GET /employee/profile/ HTTP/1.1" 200 15070
[10/Apr/2025 11:27:48] "GET /employee/dashboard/ HTTP/1.1" 200 5065
Debug: request.user.role and debug_role show 'Manager', yet redirect fails.
Suspected Causes
Role Mismatch: EmployeeProfile.role might override CustomUser.role inconsistently.
Template Caching: Server may use an outdated profile_home.html.
URL Resolution: accounts:dashboard-redirect might not resolve correctly.
Middleware: Session/auth middleware could alter request.user.
Next Steps for Continuation
Verify Role Consistency:
Check CustomUser.role vs. EmployeeProfile.role for ajaykumarj@pcscontrols.in:
bash


python manage.py shell
from accounts.models import CustomUser
from employee.models import EmployeeProfile
user = CustomUser.objects.get(email='ajaykumarj@pcscontrols.in')
profile = EmployeeProfile.objects.get(user=user)
print(f"CustomUser: {user.role}, EmployeeProfile: {profile.role}")
Sync if mismatched: profile.role = user.role; profile.save().
Test Redirect:
Log in → /manager/dashboard/ → "My Profile" → Check debug roles → "Dashboard".
Expected logs:
text


[POST /accounts/dashboard-redirect/ HTTP/1.1] 302 0
[GET /manager/dashboard/ HTTP/1.1] 200 6376
Debugging:
Share settings.py (TEMPLATES, MIDDLEWARE).
Check for duplicate profile_home.html: find . -name profile_home.html.
Fallback Fix:
If unresolved, hardcode a test redirect in dashboard_redirect:
python


if request.user.email == 'ajaykumarj@pcscontrols.in':
    return redirect('manager:manager-dashboard')
Files to Share
settings.py
Latest logs post-test
Debug role outputs


here I am giving the all codes of the app as per app structure

ResourceManagement/
├── accounts/
│   ├── models.py (CustomUser with ROLES)
		from django.contrib.auth.models import AbstractUser
		from django.db import models

		class CustomUser(AbstractUser):
			ROLES = (
				('Employee', 'Employee'),
				('Manager', 'Manager'),
				('HR', 'HR'),
				('Accountant', 'Accountant'),
				('Director', 'Director'),
				('Admin', 'Admin'),
			)
			middle_name = models.CharField(max_length=50, blank=True, null=True)
			role = models.CharField(max_length=20, choices=ROLES, default='Employee')

			def __str__(self):
				return f"{self.get_full_name()} ({self.role})"
│   ├── views.py
			from django.shortcuts import render, redirect, get_object_or_404
			from django.contrib.auth import authenticate, login
			from django.contrib.auth.decorators import login_required
			from django.contrib import messages
			from .models import CustomUser
			from employee.models import EmployeeProfile
			import logging

			logger = logging.getLogger(__name__)

			def custom_login(request):
				if request.method == 'POST':
					username = request.POST.get('username')
					password = request.POST.get('password')
					user = authenticate(request, username=username, password=password)
					if user is not None:
						login(request, user)
						try:
							profile = EmployeeProfile.objects.get(user=user)
							role = profile.role or user.role
						except EmployeeProfile.DoesNotExist:
							role = user.role
							logger.warning(f"No EmployeeProfile for {user.username}, using CustomUser role: '{role}'")
						logger.info(f"User {user.username} logged in with role: '{role}'")
						role_redirects = {
							'Employee': 'employee:employee-dashboard',
							'Manager': 'manager:manager-dashboard',
							'HR': 'hr:dashboard',
							'Accountant': 'accountant:dashboard',
							'Director': 'director:dashboard',
							'Admin': '/admin/',
						}
						redirect_url = role_redirects.get(role, 'employee:employee-dashboard')
						logger.info(f"Redirecting {user.username} to: {redirect_url}")
						return redirect(redirect_url)
					else:
						messages.error(request, "Invalid username or password.")
				return render(request, 'accounts/login.html')

			@login_required
			def redirect_to_dashboard(request):
				user = request.user
				try:
					profile = EmployeeProfile.objects.get(user=user)
					role = profile.role or user.role
				except EmployeeProfile.DoesNotExist:
					role = user.role
					logger.warning(f"No EmployeeProfile for {user.username}, using CustomUser role: '{role}'")
				logger.info(f"User {user.username} accessed redirect with role: '{role}'")
				role_redirects = {
					'Employee': 'employee:employee-dashboard',
					'Manager': 'manager:manager-dashboard',
					'HR': 'hr:dashboard',
					'Accountant': 'accountant:dashboard',
					'Director': 'director:dashboard',
					'Admin': '/admin/',
				}
				redirect_url = role_redirects.get(role, 'employee:employee-dashboard')
				logger.info(f"Redirecting {user.username} to: {redirect_url}")
				return redirect(redirect_url)

			@login_required
			def change_user_role(request):
				if request.user.role not in ['Admin', 'Manager', 'Director']:
					messages.error(request, "You do not have permission to change user roles.")
					return redirect('employee:employee-dashboard')
				if request.method == 'POST':
					user_id = request.POST.get('user_id')
					new_role = request.POST.get('role')
					try:
						user = get_object_or_404(CustomUser, id=user_id)
						profile, created = EmployeeProfile.objects.get_or_create(user=user)
						old_role = profile.role
						if new_role in dict(CustomUser.ROLES):
							profile.role = new_role
							profile.save()
							messages.success(request, f"Role for {user.get_full_name()} updated from {old_role} to {new_role}.")
							logger.info(f"User {request.user.username} changed {user.username}'s role from {old_role} to {new_role}")
						else:
							messages.error(request, "Invalid role selected.")
					except Exception as e:
						messages.error(request, f"Error updating role: {str(e)}")
						logger.error(f"Error changing role for user {user_id}: {str(e)}")
					return redirect('accounts:change-user-role')
				users = CustomUser.objects.all().order_by('username')
				context = {'users': users, 'roles': CustomUser.ROLES}
				return render(request, 'accounts/change_user_role.html', context)
│   └── urls.py
			# accounts/urls.py
			from django.urls import path
			from django.contrib.auth.views import LoginView, LogoutView
			from . import views

			app_name = 'accounts'

			urlpatterns = [
				path('login/', LoginView.as_view(
					template_name='accounts/login.html',
					redirect_authenticated_user=True,
					redirect_field_name='next'
				), name='login'),
				path('logout/', LogoutView.as_view(next_page='accounts:login'), name='logout'),
				path('profile/', views.redirect_to_dashboard, name='profile'),
				path('change-user-role/', views.change_user_role, name='change-user-role'),
			]
	└──middleware.py
			
		#accounts\middleware.py
		from django.utils.deprecation import MiddlewareMixin
		from django.utils.cache import add_never_cache_headers
		from django.http import HttpResponseRedirect



		class DisableClientSideCachingMiddleware:
			def __init__(self, get_response):
				self.get_response = get_response

			def __call__(self, request):
				response = self.get_response(request)
				if not isinstance(response, HttpResponseRedirect):
					response['Cache-Control'] = 'no-store, no-cache, must-revalidate, max-age=0'
					response['Pragma'] = 'no-cache'
					response['Expires'] = '0'
				return response
	└── templates/accounts/			
		├── change_user_role.html
				{% extends "base.html" %}
				{% load static %}

				{% block title %}Change User Role{% endblock %}

				{% block content %}
				<div class="container mt-5">
					<!-- Messages -->
					{% if messages %}
						<div class="row">
							<div class="col-12">
								{% for message in messages %}
									<div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
										{{ message }}
										<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
									</div>
								{% endfor %}
							</div>
						</div>
					{% endif %}

					<h2 class="mb-4">Change User Role</h2>
					<div class="card shadow-sm">
						<div class="card-body">
							<table class="table table-hover">
								<thead class="table-light">
									<tr>
										<th>Username</th>
										<th>Full Name</th>
										<th>Current Role</th>
										<th>Change Role</th>
									</tr>
								</thead>
								<tbody>
									{% for user in users %}
										<tr>
											<td>{{ user.username }}</td>
											<td>{{ user.get_full_name }}</td>
											<td>{{ user.role }}</td>
											<td>
												<form method="post" class="d-inline">
													{% csrf_token %}
													<input type="hidden" name="user_id" value="{{ user.id }}">
													<select name="role" class="form-select d-inline w-auto" onchange="this.form.submit()">
														{% for role_value, role_name in roles %}
															<option value="{{ role_value }}" {% if user.role == role_value %}selected{% endif %}>
																{{ role_name }}
															</option>
														{% endfor %}
													</select>
												</form>
											</td>
										</tr>
									{% endfor %}
								</tbody>
							</table>
						</div>
					</div>

					<!-- Back Button -->
					<div class="mt-4">
						<a href="{% url 'employee:employee-dashboard' %}" class="btn btn-secondary">Back to Dashboard</a>
					</div>
				</div>
				{% endblock %}
		├── login.html
				{% extends 'base.html' %}
				{% load static %}

				{% block content %}
				<style>
					body {
						font-family: 'Segoe UI', sans-serif;
						background-color: #1e1e2f;
						color: #ffffff;
						transition: background-color 0.3s ease, color 0.3s ease;
					}

					.login-container {
						max-width: 420px;
						margin: 80px auto;
						padding: 30px;
						background-color: #2c2c3e;
						border-radius: 12px;
						box-shadow: 0 0 30px rgba(0, 0, 0, 0.4);
						animation: fadeIn 1s ease;
						position: relative;
					}

					.login-container h2 {
						text-align: center;
						color: #61dafb;
						margin-bottom: 10px;
						font-weight: 600;
					}

					.role-text {
						text-align: center;
						margin-bottom: 15px;
						color: #aaa;
						font-size: 15px;
					}

					.logo {
						display: block;
						margin: 0 auto 15px;
						width: 70px;
						height: 70px;
						animation: pop 1s ease;
					}

					.form-group {
						margin-bottom: 15px;
					}

					label {
						display: block;
						margin-bottom: 5px;
						color: #c2c2c2;
					}

					input[type="text"],
					input[type="password"] {
						width: 100%;
						padding: 10px;
						border: 1px solid #444;
						background-color: #1e1e2f;
						color: #ffffff;
						border-radius: 5px;
					}

					.btn-login {
						width: 100%;
						padding: 12px;
						border: none;
						background-color: #61dafb;
						color: #1e1e2f;
						font-weight: bold;
						border-radius: 5px;
						cursor: pointer;
					}

					.btn-login:hover {
						background-color: #3ca9dd;
					}

					.role-buttons {
						display: flex;
						justify-content: space-between;
						margin: 15px 0 25px;
					}

					.role-buttons a {
						flex: 1;
						margin: 3px;
						text-align: center;
						background-color: #343a40;
						color: #fff;
						padding: 8px;
						border-radius: 5px;
						text-decoration: none;
						font-size: 13px;
					}

					.role-buttons a.active-role {
						background-color: #61dafb;
						color: #1e1e2f;
						font-weight: bold;
					}

					.error-message {
						color: #ff6b6b;
						text-align: center;
						margin-top: 10px;
					}

					.theme-toggle {
						position: absolute;
						top: 15px;
						right: 15px;
						background-color: #444;
						color: #fff;
						border: none;
						padding: 5px 10px;
						font-size: 13px;
						border-radius: 5px;
						cursor: pointer;
					}

					@keyframes fadeIn {
						from { opacity: 0; transform: translateY(-10px); }
						to { opacity: 1; transform: translateY(0); }
					}

					@keyframes pop {
						0% { transform: scale(0.5); opacity: 0; }
						100% { transform: scale(1); opacity: 1; }
					}

					/* Light mode */
					body.light-mode {
						background-color: #f5f5f5;
						color: #111;
					}

					body.light-mode .login-container {
						background-color: #fff;
						color: #111;
					}

					body.light-mode input {
						background-color: #f0f0f0;
						color: #000;
					}

					body.light-mode label {
						color: #333;
					}

					body.light-mode .theme-toggle {
						background-color: #ddd;
						color: #000;
					}
				</style>

				<div class="login-container">
					<button class="theme-toggle" onclick="toggleTheme()">🌙</button>
					<img src="{% static 'images/logo.png' %}" alt="Logo" class="logo">
					<h2>Login Portal</h2>

					{% if request.GET.role %}
						<div class="role-text">Welcome {{ request.GET.role|title }} Login</div>
					{% endif %}

					<div class="role-buttons">
						{% with request.GET.role as role %}
							<a href="{% url 'accounts:login' %}?role=Employee" class="{% if role == 'Employee' %}active-role{% endif %}">Employee</a>
							<a href="{% url 'accounts:login' %}?role=Manager" class="{% if role == 'Manager' %}active-role{% endif %}">Manager</a>
							<a href="{% url 'accounts:login' %}?role=HR" class="{% if role == 'HR' %}active-role{% endif %}">HR</a>
							<a href="{% url 'accounts:login' %}?role=Accountant" class="{% if role == 'Accountant' %}active-role{% endif %}">Accountant</a>
						{% endwith %}
					</div>

					<form method="post" action="{% url 'accounts:login' %}">
						{% csrf_token %}
						<div class="form-group">
							<label for="id_username">Username</label>
							<input type="text" name="username" id="id_username" required placeholder="Enter username">
						</div>
						<div class="form-group">
							<label for="id_password">Password</label>
							<input type="password" name="password" id="id_password" required placeholder="Enter password">
						</div>
						<button type="submit" class="btn-login">Login</button>
					</form>

					{% if form.errors %}
						<div class="error-message">Invalid username or password. Please try again.</div>
					{% endif %}
				</div>

				<script>
					function toggleTheme() {
						const body = document.body;
						const isLight = body.classList.toggle("light-mode");
						localStorage.setItem("theme", isLight ? "light" : "dark");
					}

					// Apply saved theme from localStorage
					window.onload = function () {
						const savedTheme = localStorage.getItem("theme");
						if (savedTheme === "light") {
							document.body.classList.add("light-mode");
						}
					};
				</script>
				{% endblock %}

		
├── employee/
│   ├── models.py (EmployeeProfile)
			from django.db import models
			from django.conf import settings
			from django.utils import timezone
			from datetime import timedelta
			import uuid

			def generate_employee_id():
				"""Generate a unique employee ID in the format EMP-XXXXXX."""
				return f"EMP-{uuid.uuid4().hex[:6].upper()}"

			class EmployeeProfile(models.Model):
				EMPLOYMENT_TYPES = [
					('Permanent', 'Permanent'),
					('Contract', 'Contract'),
					('Intern', 'Intern'),
				]
				user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
				career_start_date = models.DateField(null=True, blank=True)
				probotix_joining_date = models.DateField(default=timezone.now)
				confirmation_date = models.DateField(null=True, blank=True)
				date_of_birth = models.DateField(null=True, blank=True)
				contact_number = models.CharField(max_length=15, blank=True)
				address = models.TextField(blank=True)
				emergency_contact_name = models.CharField(max_length=100, blank=True)
				emergency_contact_relation = models.CharField(max_length=50, blank=True)
				emergency_contact_number = models.CharField(max_length=15, blank=True)
				employee_id = models.CharField(max_length=20, unique=True, default=generate_employee_id)
				role = models.CharField(max_length=50, blank=True)
				department = models.CharField(max_length=50, blank=True)
				reporting_manager = models.ForeignKey(
					settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='managed_employees'
				)
				employment_type = models.CharField(max_length=20, choices=EMPLOYMENT_TYPES, default='Permanent')
				pan_aadhar_ssn = models.CharField(max_length=20, blank=True)
				bank_account_number = models.CharField(max_length=30, blank=True)
				bank_ifsc_code = models.CharField(max_length=20, blank=True)
				epf_number = models.CharField(max_length=20, blank=True)

				def __str__(self):
					return f"{self.user.get_full_name()} ({self.employee_id})"

				def save(self, *args, **kwargs):
					if not self.confirmation_date and self.probotix_joining_date:
						self.confirmation_date = self.probotix_joining_date + timedelta(days=180)
					super().save(*args, **kwargs)
					# Log changes
					AuditLog.objects.create(
						user=self.user,
						action='Updated Employee Profile',
						details=f"Profile for {self.employee_id} updated"
					)

				@property
				def total_experience(self):
					if self.career_start_date:
						today = timezone.now().date()
						return today.year - self.career_start_date.year - (
							(today.month, today.day) < (self.career_start_date.month, self.career_start_date.day)
						)
					return None

				@property
				def confirmation_due_today(self):
					return self.confirmation_date == timezone.now().date()

			class AuditLog(models.Model):
				user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)
				action = models.CharField(max_length=100)
				details = models.TextField()
				timestamp = models.DateTimeField(auto_now_add=True)

				def __str__(self):
					return f"{self.action} by {self.user} at {self.timestamp}"
	├── admin.py
			from django.contrib import admin
			from .models import EmployeeProfile

			admin.site.register(EmployeeProfile)

│   ├── views.py
			from django.shortcuts import render, redirect
			from django.contrib.auth.decorators import login_required
			from django.contrib import messages
			from .models import EmployeeProfile
			from manager.models import EmployeeSkill
			from .forms import EmployeeProfileForm
			from project.models import Project

			@login_required
			def profile_home(request):
				profile, created = EmployeeProfile.objects.get_or_create(user=request.user)
				employee_skills = EmployeeSkill.objects.filter(employee=profile)
				if profile.confirmation_due_today:
					messages.warning(request, "Your confirmation date is today and needs manager approval.")
				context = {
					'profile': profile,
					'employee_skills': employee_skills,
					'debug_role': request.user.role  # Pass role explicitly for debug
				}
				# Fallback redirect if "dashboard" is requested
				if 'dashboard' in request.GET:
					if request.user.role == 'Manager':
						return redirect('manager:manager-dashboard')
					return redirect('employee:employee-dashboard')
				return render(request, 'employee/profile_home.html', context)

			@login_required
			def edit_profile(request):
				profile, created = EmployeeProfile.objects.get_or_create(user=request.user)
				if request.method == 'POST':
					form = EmployeeProfileForm(request.POST, instance=profile)
					if form.is_valid():
						form.save()
						messages.success(request, "Profile updated successfully.")
						if request.user.role == 'Manager':
							return redirect('manager:manager-dashboard')
						return redirect('employee:employee-dashboard')
				else:
					form = EmployeeProfileForm(instance=profile)
				return render(request, 'employee/edit_profile.html', {'form': form})

			@login_required
			def employee_dashboard(request):
				profile = EmployeeProfile.objects.get(user=request.user)
				recent_projects = Project.objects.filter(assigned_employees=profile)[:3]
				context = {'profile': profile, 'recent_projects': recent_projects}
				return render(request, 'employee/employee_dashboard.html', context)

			@login_required
			def my_projects(request):
				profile = EmployeeProfile.objects.get(user=request.user)
				projects = Project.objects.filter(assigned_employees=profile)
				context = {'projects': projects}
				return render(request, 'employee/my_projects.html', context)
	├── urls.py
			from django.urls import path
			from . import views

			app_name = 'employee'

			urlpatterns = [
				path('profile/', views.profile_home, name='employee-profile-home'),
				path('edit-profile/', views.edit_profile, name='edit-profile'),
				path('dashboard/', views.employee_dashboard, name='employee-dashboard'),
				path('my-projects/', views.my_projects, name='my-projects'),
			]
	├── apps.py
			from django.apps import AppConfig


			class EmployeeConfig(AppConfig):
				default_auto_field = 'django.db.models.BigAutoField'
				name = 'employee'

│   ├── forms.py (EmployeeProfileForm)
				from django import forms
				from .models import EmployeeProfile

				class EmployeeProfileForm(forms.ModelForm):
					class Meta:
						model = EmployeeProfile
						fields = [
							'career_start_date', 'probotix_joining_date', 'date_of_birth', 'contact_number',
							'address', 'emergency_contact_name', 'emergency_contact_relation',
							'emergency_contact_number', 'employee_id', 'role', 'department',
							'reporting_manager', 'employment_type', 'confirmation_date',
							'pan_aadhar_ssn', 'bank_account_number', 'bank_ifsc_code', 'epf_number',
						]
						widgets = {
							'career_start_date': forms.DateInput(attrs={'type': 'date'}),
							'probotix_joining_date': forms.DateInput(attrs={'type': 'date'}),
							'date_of_birth': forms.DateInput(attrs={'type': 'date'}),
							'confirmation_date': forms.DateInput(attrs={'type': 'date'}),
						}

					def __init__(self, *args, **kwargs):
						super().__init__(*args, **kwargs)
						self.fields['contact_number'].required = True
						self.fields['employee_id'].required = True
│   └── templates/employee/
│       ├── profile_home.html
					{% extends "base.html" %}
					{% load static %}

					{% block title %}Employee Profile - {{ profile.user.get_full_name }}{% endblock %}

					{% block content %}
					<div class="container-fluid py-4" style="background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%); min-height: 100vh;">
						{% if messages %}
							<div class="row justify-content-center">
								<div class="col-md-8">
									{% for message in messages %}
										<div class="alert alert-{{ message.tags }} alert-dismissible fade show shadow-sm" role="alert">
											{{ message }}
											<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
										</div>
									{% endfor %}
								</div>
							</div>
						{% endif %}

						<div class="row justify-content-center mb-5">
							<div class="col-lg-10">
								<div class="card shadow-lg border-0" style="border-radius: 15px; overflow: hidden;">
									<div class="card-body p-0">
										<div class="row align-items-center">
											<div class="col-md-4 text-center p-4" style="background: linear-gradient(to bottom, #007bff, #0056b3); color: white;">
												<img src="{% static 'images/default-avatar.png' %}" class="rounded-circle img-fluid shadow" alt="Profile Avatar" style="max-width: 150px; border: 4px solid white;">
												<h2 class="mt-3 fw-bold">{{ profile.user.get_full_name }}</h2>
												<p class="mb-0">Employee ID: <span class="badge bg-light text-dark">{{ profile.employee_id }}</span></p>
												<p class="mt-2">Role: <span class="badge bg-success">{{ profile.role|default:"Not specified" }}</span></p>
												<p>Dept: <span class="badge bg-info">{{ profile.department|default:"Not specified" }}</span></p>
											</div>
											<div class="col-md-8 p-4">
												<h4 class="fw-semibold text-primary">Quick Overview</h4>
												<div class="row g-3">
													<div class="col-6">
														<div class="bg-light p-3 rounded shadow-sm">
															<i class="bi bi-calendar-event text-primary me-2"></i>
															<small>Joining Date</small>
															<p class="mb-0 fw-bold">{{ profile.probotix_joining_date }}</p>
														</div>
													</div>
													<div class="col-6">
														<div class="bg-light p-3 rounded shadow-sm">
															<i class="bi bi-briefcase text-primary me-2"></i>
															<small>Experience</small>
															<p class="mb-0 fw-bold">{{ profile.total_experience|default:"N/A" }} years</p>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>

						<div class="row justify-content-center">
							<div class="col-lg-10">
								<div class="row g-4">
									<div class="col-md-6">
										<div class="card shadow-sm border-0" style="border-radius: 10px;">
											<div class="card-header bg-primary text-white d-flex justify-content-between align-items-center" style="border-radius: 10px 10px 0 0;">
												<h5 class="mb-0"><i class="bi bi-person me-2"></i>Personal Information</h5>
												<i class="bi bi-chevron-down"></i>
											</div>
											<div class="card-body">
												<ul class="list-group list-group-flush">
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>Full Name:</strong></span>
														<span>{{ profile.user.get_full_name }}</span>
													</li>
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>Date of Birth:</strong></span>
														<span>{{ profile.date_of_birth|default:"Not provided" }}</span>
													</li>
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>Contact:</strong></span>
														<span>{{ profile.contact_number|default:"Not provided" }}</span>
													</li>
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>Address:</strong></span>
														<span>{{ profile.address|default:"Not provided" }}</span>
													</li>
												</ul>
											</div>
										</div>

										<div class="card shadow-sm border-0 mt-4" style="border-radius: 10px;">
											<div class="card-header bg-danger text-white d-flex justify-content-between align-items-center" style="border-radius: 10px 10px 0 0;">
												<h5 class="mb-0"><i class="bi bi-telephone me-2"></i>Emergency Contact</h5>
												<i class="bi bi-chevron-down"></i>
											</div>
											<div class="card-body">
												<ul class="list-group list-group-flush">
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>Name:</strong></span>
														<span>{{ profile.emergency_contact_name|default:"Not provided" }}</span>
													</li>
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>Relation:</strong></span>
														<span>{{ profile.emergency_contact_relation|default:"Not provided" }}</span>
													</li>
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>Contact:</strong></span>
														<span>{{ profile.emergency_contact_number|default:"Not provided" }}</span>
													</li>
												</ul>
											</div>
										</div>
									</div>

									<div class="col-md-6">
										<div class="card shadow-sm border-0" style="border-radius: 10px;">
											<div class="card-header bg-success text-white d-flex justify-content-between align-items-center" style="border-radius: 10px 10px 0 0;">
												<h5 class="mb-0"><i class="bi bi-briefcase me-2"></i>Employment Details</h5>
												<i class="bi bi-chevron-down"></i>
											</div>
											<div class="card-body">
												<ul class="list-group list-group-flush">
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>Role:</strong></span>
														<span>{{ profile.role|default:"Not specified" }}</span>
													</li>
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>Department:</strong></span>
														<span>{{ profile.department|default:"Not specified" }}</span>
													</li>
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>Type:</strong></span>
														<span>{{ profile.employment_type }}</span>
													</li>
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>Career Start:</strong></span>
														<span>{{ profile.career_start_date|default:"Not provided" }}</span>
													</li>
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>Joining Date:</strong></span>
														<span>{{ profile.probotix_joining_date }}</span>
													</li>
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>Confirmation:</strong></span>
														<span>{{ profile.confirmation_date|default:"Pending" }}</span>
													</li>
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>Experience:</strong></span>
														<span>{{ profile.total_experience|default:"N/A" }} years</span>
													</li>
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>Manager:</strong></span>
														<span>{{ profile.reporting_manager.get_full_name|default:"Not assigned" }}</span>
													</li>
												</ul>
											</div>
										</div>

										<div class="card shadow-sm border-0 mt-4" style="border-radius: 10px;">
											<div class="card-header bg-warning text-dark d-flex justify-content-between align-items-center" style="border-radius: 10px 10px 0 0;">
												<h5 class="mb-0"><i class="bi bi-wallet me-2"></i>Financial Information</h5>
												<i class="bi bi-chevron-down"></i>
											</div>
											<div class="card-body">
												<ul class="list-group list-group-flush">
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>PAN/Aadhar/SSN:</strong></span>
														<span>{{ profile.pan_aadhar_ssn|default:"Not provided" }}</span>
													</li>
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>Bank Account:</strong></span>
														<span>{{ profile.bank_account_number|default:"Not provided" }}</span>
													</li>
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>IFSC Code:</strong></span>
														<span>{{ profile.bank_ifsc_code|default:"Not provided" }}</span>
													</li>
													<li class="list-group-item d-flex justify-content-between">
														<span><strong>EPF Number:</strong></span>
														<span>{{ profile.epf_number|default:"Not provided" }}</span>
													</li>
												</ul>
											</div>
										</div>

										<div class="card shadow-sm border-0 mt-4" style="border-radius: 10px;">
											<div class="card-header bg-info text-white d-flex justify-content-between align-items-center" style="border-radius: 10px 10px 0 0;">
												<h5 class="mb-0"><i class="bi bi-star me-2"></i>Skills</h5>
												<i class="bi bi-chevron-down"></i>
											</div>
											<div class="card-body">
												{% if employee_skills %}
													{% for skill in employee_skills %}
														<div class="mb-3">
															<div class="d-flex justify-content-between">
																<span><strong>{{ skill.main_skill.name }}</strong> - {{ skill.subskill.name }}</span>
																<span>{{ skill.rating }}/100</span>
															</div>
															<div class="progress mt-1" style="height: 10px;">
																<div class="progress-bar bg-success" role="progressbar" style="width: {{ skill.rating|floatformat:0 }}%;" aria-valuenow="{{ skill.rating }}" aria-valuemin="0" aria-valuemax="100"></div>
															</div>
														</div>
													{% endfor %}
												{% else %}
													<p class="text-muted">No skills assigned yet.</p>
												{% endif %}
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>

						<div class="row justify-content-center mt-5">
							<div class="col-lg-10 text-center">
								<p>Debug Role from Template: {{ request.user.role }}</p>
								<p>Debug Role from View: {{ debug_role }}</p>
								<div class="d-flex flex-wrap justify-content-center gap-3">
									<a href="{% url 'employee:edit-profile' %}" class="btn btn-primary btn-lg shadow-sm"><i class="bi bi-pencil me-2"></i>Edit Profile</a>
									{% if request.user.role in 'Admin,Manager,Director' %}
										<a href="{% url 'accounts:change-user-role' %}" class="btn btn-danger btn-lg shadow-sm"><i class="bi bi-person-gear me-2"></i>Manage Roles</a>
									{% endif %}
									<a href="{% url 'employee:employee-profile-home' %}?dashboard=true" class="btn btn-secondary btn-lg shadow-sm"><i class="bi bi-house me-2"></i>Dashboard</a>
								</div>
							</div>
						</div>
					</div>

					<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
					<style>
						.card:hover { transform: translateY(-5px); transition: transform 0.3s ease; }
						.list-group-item:hover { background-color: #f8f9fa; }
					</style>
					{% endblock %}
│       ├── edit_profile.html
					{% extends "base.html" %}
					{% load static %}

					{% block content %}
					<h2>Edit My Profile</h2>

					<form method="post">
						{% csrf_token %}
						{% for field in form %}
							<div class="form-group" style="margin-bottom: 15px;">
								<label for="{{ field.id_for_label }}">{{ field.label }}:</label><br>
								{{ field }}
								{% if field.errors %}
									<div style="color: red;">{{ field.errors }}</div>
								{% endif %}
							</div>
						{% endfor %}

						<button type="submit" class="btn">Save Changes</button>
					</form>

					<a href="{% url 'employee:employee-profile-home' %}" class="btn" style="margin-top: 15px;">← Back to Profile</a>
					{% endblock %}

│       ├── employee_dashboard.html
					<!-- Employee Dashboard -->

					{% extends "base.html" %}
					{% load static %}

					{% block title %}Employee Dashboard{% endblock %}

					{% block content %}
					<style>
					  .dashboard-container {
						max-width: 1200px;
						margin: 30px auto;
						padding: 20px;
					  }

					  .dashboard-title {
						font-size: 28px;
						font-weight: 600;
						text-align: center;
						margin-bottom: 30px;
						color: var(--text-color);
					  }

					  .card-grid {
						display: grid;
						grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
						gap: 25px;
					  }

					  .dashboard-card {
						background: var(--card-bg);
						border-radius: 15px;
						padding: 25px;
						box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
						transition: all 0.3s ease-in-out;
						text-align: center;
					  }

					  .dashboard-card:hover {
						transform: translateY(-5px);
						box-shadow: 0 8px 18px rgba(0, 0, 0, 0.1);
					  }

					  .dashboard-card i {
						font-size: 36px;
						margin-bottom: 10px;
						color: var(--icon-color);
					  }

					  .dashboard-card h3 {
						font-size: 18px;
						margin: 10px 0;
						color: var(--text-color);
					  }

					  .dashboard-card a {
						display: inline-block;
						margin-top: 10px;
						background-color: #007bff;
						color: white;
						padding: 8px 14px;
						border-radius: 6px;
						text-decoration: none;
						font-weight: 500;
					  }

					  .dashboard-card a:hover {
						background-color: #0056b3;
					  }
					</style>


					<div class="dashboard-container">
					  <h2 class="dashboard-title">Welcome, {{ profile.user.get_full_name }}</h2>
					  <div class="card-grid">
						<div class="dashboard-card">
						  <i class="fa-solid fa-id-card"></i>
						  <h3>My Profile</h3>
						  <a href="{% url 'employee:employee-profile-home' %}">Go</a>
						</div>
						<div class="dashboard-card">
						  <i class="fa-solid fa-folder"></i>
						  <h3>My Projects</h3>
						  <a href="{% url 'employee:my-projects' %}">Go</a>
						</div>
						<div class="dashboard-card">
						  <i class="fa-solid fa-clock"></i>
						  <h3>My Timesheets</h3>
						  <a href="{% url 'timesheet:my-timesheets' %}">Go</a>
						</div>
						<div class="dashboard-card">
						  <i class="fa-solid fa-receipt"></i>
						  <h3>My Expenses</h3>
						  <a href="{% url 'expenses:employee-expenses' %}">Go</a>
						</div>
					  </div>
					  {% if recent_projects %}
						<h3>Recent Projects</h3>
						<ul>
						  {% for project in recent_projects %}
							<li>{{ project.project_name }} ({{ project.progress }}%)</li>
						  {% endfor %}
						</ul>
					  {% endif %}
					</div>

					<script>
					  document.body.classList.add(localStorage.getItem("theme") || "light");
					  function toggleTheme() {
						const currentTheme = document.body.classList.contains("dark") ? "dark" : "light";
						const newTheme = currentTheme === "dark" ? "light" : "dark";
						document.body.classList.remove(currentTheme);
						document.body.classList.add(newTheme);
						localStorage.setItem("theme", newTheme);
					  }
					</script>
					{% endblock %}
│       └── my_projects.html
					{% extends "base.html" %}
					{% load static %}

					{% block content %}
					<h2>My Projects</h2>

						{% if projects %}
						  <ul style="list-style: none; padding: 0;">
							{% for project in projects %}
							  <li style="margin-bottom: 20px; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
								<strong>{{ project.project_name }}</strong> <br>
								<span>Customer: {{ project.customer_name }}</span><br>
								<span>Status: {{ project.status }}</span> | 
								<span>Progress: {{ project.progress }}%</span>
							  </li>
							{% endfor %}
						  </ul>
						{% else %}
							<p>No projects assigned yet.</p>
						{% endif %}

									{% if request.user.role == 'Manager' %}
										<a href="{% url 'manager:manager-dashboard' %}" class="btn btn-secondary btn-lg shadow-sm"><i class="bi bi-house me-2"></i>Dashboard</a>
									{% else %}
										<a href="{% url 'employee:employee-dashboard' %}" class="btn btn-secondary btn-lg shadow-sm"><i class="bi bi-house me-2"></i>Dashboard</a>
									{% endif %}
					{% endblock %}
├── manager/
│   ├── models.py (MainSkill, SubSkill, EmployeeSkill)
	
			from django.db import models
			from accounts.models import CustomUser
			from employee.models import EmployeeProfile


			class SkillCategory(models.Model):
				name = models.CharField(max_length=100)

				def __str__(self):
					return self.name

			class Skill(models.Model):
				category = models.ForeignKey(SkillCategory, on_delete=models.CASCADE, related_name='skills')
				name = models.CharField(max_length=100)

				def __str__(self):
					return f"{self.category.name} → {self.name}"





			class MainSkill(models.Model):
				name = models.CharField(max_length=100, unique=True)
				def __str__(self):
					return self.name

			class SubSkill(models.Model):
				main_skill = models.ForeignKey(MainSkill, on_delete=models.CASCADE, related_name='subskills')
				name = models.CharField(max_length=100)
				class Meta:
					unique_together = ('main_skill', 'name')
				def __str__(self):
					return f"{self.main_skill.name} → {self.name}"

			class EmployeeSkill(models.Model):
				employee = models.ForeignKey(EmployeeProfile, on_delete=models.CASCADE)
				main_skill = models.ForeignKey(MainSkill, on_delete=models.CASCADE)
				subskill = models.ForeignKey(SubSkill, on_delete=models.CASCADE)
				rating = models.IntegerField(choices=[(i, i) for i in range(5)], default=0)

				def __str__(self):
					return f"{self.employee.user.get_full_name()} - {self.main_skill.name} - {self.subskill.name} ({self.rating})"
│   ├── views.py
			from django.shortcuts import render, redirect
			from django.contrib.auth.decorators import login_required, user_passes_test
			from django.http import JsonResponse
			from .forms import AssignSkillForm
			from .models import MainSkill, SubSkill, EmployeeSkill
			from employee.models import EmployeeProfile
			import logging

			logger = logging.getLogger(__name__)


				
			def is_manager(user):
				is_manager_role = user.is_authenticated and user.role == 'Manager'
				logger.info(f"Checking if {user.username} is manager: authenticated={user.is_authenticated}, role='{user.role}', result={is_manager_role}")
				return is_manager_role   

			# manager/views.py
			@login_required
			def manager_dashboard(request):
				logger.info(f"Manager dashboard accessed by {request.user.username}, authenticated: {request.user.is_authenticated}")
				return render(request, 'manager/manager_dashboard.html', {})

			@login_required
			@user_passes_test(is_manager)
			def assign_skills(request):
				if request.method == 'POST':
					form = AssignSkillForm(request.POST)
					if form.is_valid():
						form.save()
						return redirect('manager:assign-skills')
				else:
					form = AssignSkillForm()
				
				employees = EmployeeProfile.objects.all()
				assigned_skills = EmployeeSkill.objects.select_related('employee', 'main_skill', 'subskill')
				skill_matrix = []
				for emp in employees:
					skills = assigned_skills.filter(employee=emp)
					skill_matrix.append({'employee': emp, 'skills': skills})
				
				return render(request, 'manager/assign_skills.html', {
					'form': form,
					'skill_matrix': skill_matrix,
				})

			@login_required
			@user_passes_test(is_manager)
			def load_subskills(request):
				main_skill_id = request.GET.get('main_skill')
				subskills = SubSkill.objects.filter(main_skill_id=main_skill_id).values('id', 'name')
				return JsonResponse(list(subskills), safe=False)
				

	├── admin.py
			from django.contrib import admin
			from .models import MainSkill, SubSkill

			class SubSkillInline(admin.TabularInline):
				model = SubSkill
				extra = 1

			@admin.register(MainSkill)
			class MainSkillAdmin(admin.ModelAdmin):
				list_display = ('name',)
				inlines = [SubSkillInline]

			@admin.register(SubSkill)
			class SubSkillAdmin(admin.ModelAdmin):
				list_display = ('name', 'main_skill')
				list_filter = ('main_skill',)

│   ├── forms.py (AssignSkillForm)
			from django import forms
			from .models import MainSkill, SubSkill, EmployeeSkill

			class AssignSkillForm(forms.ModelForm):
				class Meta:
					model = EmployeeSkill
					fields = ['employee', 'main_skill', 'subskill', 'rating']

				def __init__(self, *args, **kwargs):
					super().__init__(*args, **kwargs)
					self.fields['subskill'].queryset = SubSkill.objects.none()
					if 'main_skill' in self.data:
						try:
							main_skill_id = int(self.data.get('main_skill'))
							self.fields['subskill'].queryset = SubSkill.objects.filter(main_skill_id=main_skill_id)
						except (ValueError, TypeError):
							pass
					elif self.instance.pk and self.instance.main_skill:
						self.fields['subskill'].queryset = SubSkill.objects.filter(main_skill=self.instance.main_skill)
	└── templatetags/custom_filters.py
				# inside manager/templatetags/custom_filters.py
					from django import template
					register = template.Library()

					@register.filter
					def get_item(dictionary, key):
						if dictionary and key in dictionary:
							return dictionary[key]
						return None

	└── templatetags/skill_filters.py
				from django import template

				register = template.Library()



				@register.filter
				def get_item(dictionary, key):
					return dictionary.get(key, "-")




				# Example of your custom filter
				@register.filter
				def get_skill_rating(skills_dict, subskill_name):
					return skills_dict.get(subskill_name, None)
	
│   └── templates/manager/
│       ├── manager_dashboard.html
					<!-- ResourceManagement/manager/templates/manager/manager_dashboard.html -->
				{% extends "base.html" %}
				{% load static %}

				{% block title %}Manager Dashboard{% endblock %}

				{% block content %}
				<style>
				  .dashboard-container {
					max-width: 1200px;
					margin: 30px auto;
					padding: 20px;
				  }
				  .dashboard-title {
					font-size: 28px;
					font-weight: 600;
					text-align: center;
					margin-bottom: 30px;
					color: var(--text-color);
				  }
				  .card-grid {
					display: grid;
					grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
					gap: 25px;
				  }
				  .dashboard-card {
					background: var(--card-bg);
					border-radius: 15px;
					padding: 25px;
					box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
					transition: all 0.3s ease-in-out;
					text-align: center;
				  }
				  .dashboard-card:hover {
					transform: translateY(-5px);
					box-shadow: 0 8px 18px rgba(0, 0, 0, 0.1);
				  }
				  .dashboard-card i {
					font-size: 36px;
					margin-bottom: 10px;
					color: var(--icon-color);
				  }
				  .dashboard-card h3 {
					font-size: 18px;
					margin: 10px 0;
					color: var(--text-color);
				  }
				  .dashboard-card a {
					display: inline-block;
					margin-top: 10px;
					background-color: #007bff;
					color: white;
					padding: 8px 14px;
					border-radius: 6px;
					text-decoration: none;
					font-weight: 500;
				  }
				  .dashboard-card a:hover {
					background-color: #0056b3;
				  }
				</style>

				<div class="dashboard-container">
				  <h2 class="dashboard-title">Welcome to Manager Dashboard</h2>
				  <div class="card-grid">
					<!-- My Profile -->
					<div class="dashboard-card">
					  <i class="fa-solid fa-user"></i>
					  <h3>My Profile</h3>
					  <a href="{% url 'employee:employee-profile-home' %}">Go</a>
					</div>

					<!-- My Projects -->
					<div class="dashboard-card">
					  <i class="fa-solid fa-folder"></i>
					  <h3>My Projects</h3>
					  <a href="{% url 'employee:my-projects' %}">Go</a>
					</div>

					<!-- My Timesheets -->
					<div class="dashboard-card">
					  <i class="fa-solid fa-clock"></i>
					  <h3>My Timesheets</h3>
					  <a href="{% url 'timesheet:my-timesheets' %}">Go</a>
					</div>

					<!-- My Expenses -->
					<div class="dashboard-card">
					  <i class="fa-solid fa-receipt"></i>
					  <h3>My Expenses</h3>
					  <a href="{% url 'expenses:employee-expenses' %}">Go</a>
					</div>

					<!-- Add Skill Set -->
					<div class="dashboard-card">
					  <i class="fa-solid fa-layer-group"></i>
					  <h3>Add Skill Set</h3>
					  <a href="{% url 'manager:assign-skills' %}">Go</a>
					</div>

					<!-- Assign Skills -->
					<div class="dashboard-card">
					  <i class="fa-solid fa-people-arrows"></i>
					  <h3>Assign Skills to Employees</h3>
					  <a href="{% url 'manager:assign-skills' %}">Go</a>
					</div>

					<!-- Add Project/Task -->
					<div class="dashboard-card">
					  <i class="fa-solid fa-plus-square"></i>
					  <h3>Add New Project/Task</h3>
					  <a href="#">Coming Soon</a>
					</div>

					<!-- Assign Projects -->
					<div class="dashboard-card">
					  <i class="fa-solid fa-share-nodes"></i>
					  <h3>Project Assignment</h3>
					  <a href="#">Coming Soon</a>
					</div>

					<!-- Timesheet Approval -->
					<div class="dashboard-card">
					  <i class="fa-solid fa-clipboard-check"></i>
					  <h3>Timesheet Approval</h3>
					  <a href="#">Coming Soon</a>
					</div>

					<!-- Expense Approval -->
					<div class="dashboard-card">
					  <i class="fa-solid fa-file-invoice-dollar"></i>
					  <h3>Expense Approval</h3>
					  <a href="#">Coming Soon</a>
					</div>
				  </div>
				</div>

				<script>
				  document.body.classList.add(localStorage.getItem("theme") || "light");
				  function toggleTheme() {
					const currentTheme = document.body.classList.contains("dark") ? "dark" : "light";
					const newTheme = currentTheme === "dark" ? "light" : "dark";
					document.body.classList.remove(currentTheme);
					document.body.classList.add(newTheme);
					localStorage.setItem("theme", newTheme);
				  }
				</script>
				{% endblock %}
│       └── add_skills.html
				{% extends "base.html" %}
				{% load static %}

				{% block title %}Add Skills | Manager{% endblock %}

				{% block content %}
				<div class="container mt-5">
					<h2 class="text-center mb-4">Add Skills</h2>

					<div class="row mb-4">
						<!-- Add Main Skill -->
						<div class="col-md-6">
							<div class="card shadow-sm p-4">
								<h4>Add Main Skill</h4>
								<form method="post">
									{% csrf_token %}
									{{ main_form.as_p }}
									<button type="submit" name="add_main" class="btn btn-primary mt-2">Add Main Skill</button>
								</form>
							</div>
						</div>

						<!-- Add Subskill -->
						<div class="col-md-6">
							<div class="card shadow-sm p-4">
								<h4>Add Subskill</h4>
								<form method="post">
									{% csrf_token %}
									{{ sub_form.as_p }}
									<button type="submit" name="add_sub" class="btn btn-success mt-2">Add Subskill</button>
								</form>
							</div>
						</div>
					</div>

					<!-- Show Existing Skills -->
					<div class="card shadow p-4">
						<h4>Existing Skills</h4>
						{% if main_skills %}
							<ul class="list-group">
								{% for skill in main_skills %}
									<li class="list-group-item">
										<strong>{{ skill.name }}</strong>
										{% if skill.subskills.all %}
											<ul>
												{% for sub in skill.subskills.all %}
													<li>{{ sub.name }}</li>
												{% endfor %}
											</ul>
										{% else %}
											<small class="text-muted">No subskills added yet.</small>
										{% endif %}
									</li>
								{% endfor %}
							</ul>
						{% else %}
							<p>No skills added yet.</p>
						{% endif %}
					</div>
				</div>
				{% if user.groups.all.0.name == 'Manager' %}
				  <a href="{% url 'manager:manager-dashboard' %}" class="btn btn-sm btn-outline-light">Back to Dashboard</a>
				{% else %}
				  <a href="{% url 'employee:employee-dashboard' %}" class="btn btn-sm btn-outline-light">Back to Dashboard</a>
				{% endif %}
				{% endblock %}

		└── assign_skills.html
				{% extends 'base.html' %}
				{% load static %}

				{% block content %}
				<div class="container mt-4">
				  <h2>Assign Skills to Employee</h2>
				  <form method="POST" id="assign-skill-form">
					{% csrf_token %}
					{{ form.as_p }}
					<button type="submit" class="btn btn-success">Assign</button>
				  </form>
				  <div class="card p-4">
					<h4>Skill Matrix</h4>
					{% if skill_matrix %}
					  <table class="table table-bordered table-striped">
						<thead>
						  <tr>
							<th>Employee</th>
							<th>Skills</th>
						  </tr>
						</thead>
						<tbody>
						  {% for data in skill_matrix %}
							<tr>
							  <td>{{ data.employee.user.get_full_name }}</td>
							  <td>
								{% for skill in data.skills %}
								  {{ skill.main_skill.name }} - {{ skill.subskill.name }} ({{ skill.rating }})<br>
								{% endfor %}
							  </td>
							</tr>
						  {% endfor %}
						</tbody>
					  </table>
					{% else %}
					  <p>No skills assigned yet.</p>
					{% endif %}
				  </div>
				  <a href="{% url 'manager:manager-dashboard' %}" class="btn btn-secondary mt-3">Back to Dashboard</a>
				</div>
				<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
				<script>
				  $('#id_main_skill').change(function() {
					var mainSkillId = $(this).val();
					$.ajax({
					  url: "{% url 'manager:load_subskills' %}",
					  data: {'main_skill': mainSkillId},
					  success: function(data) {
						$('#id_subskill').html('<option value="">Select subskill</option>');
						data.forEach(function(item) {
						  $('#id_subskill').append(new Option(item.name, item.id));
						});
					  }
					});
				  });
				</script>
				{% endblock %}
		└── skill_matrix.html
				{% extends "base.html" %}
				{% load static %}

				{% block content %}
				<div class="container mt-5">

				  <!-- Back to Dashboard Button -->
				  <div class="d-flex justify-content-end mb-4">
					{% if user.groups.all.0.name == 'Manager' %}
					  <a href="{% url 'manager:manager-dashboard' %}" class="btn btn-outline-secondary">← Back to Dashboard</a>
					{% else %}
					  <a href="{% url 'employee:employee-dashboard' %}" class="btn btn-outline-secondary">← Back to Dashboard</a>
					{% endif %}
				  </div>

				  <!-- Page Title -->
				  <h2 class="mb-4 text-primary">Skill Matrix</h2>

				  <!-- Skill Matrix Table -->
				  <div class="card shadow">
					<div class="card-header bg-dark text-white">
					  <strong>Employee Skill Assignments</strong>
					</div>
					<div class="card-body p-0">
					  {% if assigned_skills %}
					  <div class="table-responsive">
						<table class="table table-striped table-hover table-bordered align-middle mb-0">
						  <thead class="table-dark text-center">
							<tr>
							  <th scope="col">#</th>
							  <th scope="col">Employee</th>
							  <th scope="col">Main Skill</th>
							  <th scope="col">Subskill</th>
							  <th scope="col">Rating</th>
							  <th scope="col">Assigned On</th>
							</tr>
						  </thead>
						  <tbody>
							{% for skill in assigned_skills %}
							<tr>
							  <td class="text-center">{{ forloop.counter }}</td>
							  <td>{{ skill.employee.get_full_name|default:skill.employee.username }}</td>
							  <td>{{ skill.skill.name }}</td>
							  <td>{{ skill.subskill.name }}</td>
							  <td class="text-center">{{ skill.get_rating_display }}</td>
							  <td>{{ skill.assigned_at|date:"d M Y, H:i" }}</td>
							</tr>
							{% endfor %}
						  </tbody>
						</table>
					  </div>
					  {% else %}
					  <div class="p-4">
						<p class="text-muted mb-0">No skill assignments found.</p>
					  </div>
					  {% endif %}
					</div>
				  </div>
				</div>
				{% endblock %}
├── expenses/
│   └── forms.py
			from django import forms
			from .models import Expense

			class ExpenseForm(forms.ModelForm):
				class Meta:
					model = Expense
					fields = ['project', 'expense_type', 'date', 'kilometers', 'amount', 'receipt']
					widgets = {
						'date': forms.DateInput(attrs={'type': 'date'}),
					}

	└── models.py
			from django.db import models
			from employee.models import EmployeeProfile
			from project.models import Project
			from django.utils import timezone

			class Expense(models.Model):
				EXPENSE_TYPES = [
					('Travel - Public Transport', 'Travel - Public Transport'),
					('Travel - Cab', 'Travel - Cab'),
					('Travel - Bike', 'Travel - Bike'),
					('Travel - Personal Car', 'Travel - Personal Car'),
					('DA - Within Pune', 'DA - Within Pune'),
					('DA - Outside Pune', 'DA - Outside Pune'),
					('Other', 'Other'),
				]
				STATUS_CHOICES = [
					('Pending', 'Pending'),
					('Approved', 'Approved'),
					('Rejected', 'Rejected'),
				]
				employee = models.ForeignKey(EmployeeProfile, on_delete=models.CASCADE)
				project = models.ForeignKey(Project, on_delete=models.SET_NULL, null=True, blank=True)
				expense_type = models.CharField(max_length=50, choices=EXPENSE_TYPES)
				date = models.DateField(default=timezone.now)
				amount = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
				kilometers = models.IntegerField(null=True, blank=True)
				receipt = models.FileField(upload_to='expense_receipts/', null=True, blank=True)
				status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Pending')
				comments = models.TextField(blank=True)

				def save(self, *args, **kwargs):
					if not self.amount and self.kilometers is not None:
						if 'Bike' in self.expense_type:
							self.amount = self.kilometers * 5
						elif 'Car' in self.expense_type:
							self.amount = self.kilometers * 12
					if 'Within Pune' in self.expense_type:
						self.amount = 300
					elif 'Outside Pune' in self.expense_type:
						self.amount = 600
					super().save(*args, **kwargs)
					from employee.models import AuditLog  # Import here to avoid circular import
					AuditLog.objects.create(
						user=self.employee.user,
						action='Expense Submitted',
						details=f"Expense {self.expense_type} for {self.amount}"
					)

				def __str__(self):
					return f"{self.employee.user.get_full_name()} - {self.expense_type} on {self.date}"
	└── urls.py
			from django.urls import path
			from . import views

			app_name = 'expenses'

			urlpatterns = [
				path('my-expenses/', views.employee_expenses, name='employee-expenses'),
				path('approve/<int:expense_id>/', views.approve_expense, name='approve-expense'),
	└── views.py
			from django.shortcuts import render, redirect
			from django.contrib.auth.decorators import login_required
			from django.contrib import messages
			from .forms import ExpenseForm
			from .models import Expense
			from employee.models import EmployeeProfile

			@login_required
			def employee_expenses(request):
				profile = EmployeeProfile.objects.get(user=request.user)
				expenses = Expense.objects.filter(employee=profile).order_by('-date')
				if request.method == 'POST':
					form = ExpenseForm(request.POST, request.FILES)
					if form.is_valid():
						expense = form.save(commit=False)
						expense.employee = profile
						expense.save()
						messages.success(request, "Expense submitted successfully.")
						return redirect('expenses:employee-expenses')
				else:
					form = ExpenseForm()
				return render(request, 'expenses/my_expenses.html', {'form': form, 'expenses': expenses})

			@login_required
			def approve_expense(request, expense_id):
				expense = Expense.objects.get(id=expense_id)
				if request.user.role in ['Manager', 'Accountant']:
					if 'reject' in request.GET:
						expense.status = 'Rejected'
						messages.success(request, f"Expense {expense.id} rejected.")
					else:
						expense.status = 'Approved'
						messages.success(request, f"Expense {expense.id} approved.")
					expense.save()
				return redirect('expenses:employee-expenses')
	└── templates/expenses/
│       ├── my_expenses.html
					{% extends "base.html" %}
					{% load static crispy_forms_tags %}

					{% block title %}My Expenses{% endblock %}

					{% block content %}
					<div class="container mt-4">
						<!-- Messages -->
						{% if messages %}
							<div class="row">
								<div class="col-12">
									{% for message in messages %}
										<div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
											{{ message }}
											<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
										</div>
									{% endfor %}
								</div>
							</div>
						{% endif %}

						<!-- Expense Submission Form -->
						<div class="row mb-4">
							<div class="col-12">
								<div class="card">
									<div class="card-header">
										<h5>Submit New Expense</h5>
									</div>
									<div class="card-body">
										<form method="post" enctype="multipart/form-data">
											{% csrf_token %}
											{{ form|crispy }}
											<button type="submit" class="btn btn-primary">Submit Expense</button>
										</form>
									</div>
								</div>
							</div>
						</div>

						<!-- Expenses List -->
						<div class="row">
							<div class="col-12">
								<div class="card">
									<div class="card-header">
										<h5>My Expenses</h5>
									</div>
									<div class="card-body">
										{% if expenses %}
											<table class="table table-striped">
												<thead>
													<tr>
														<th>Date</th>
														<th>Type</th>
														<th>Amount</th>
														<th>Kilometers</th>
														<th>Project</th>
														<th>Status</th>
														<th>Receipt</th>
														{% if request.user.role == 'Manager' or request.user.role == 'Accountant' %}
															<th>Actions</th>
														{% endif %}
													</tr>
												</thead>
												<tbody>
													{% for expense in expenses %}
														<tr>
															<td>{{ expense.date }}</td>
															<td>{{ expense.expense_type }}</td>
															<td>{{ expense.amount|default:"N/A" }}</td>
															<td>{{ expense.kilometers|default:"N/A" }}</td>
															<td>{{ expense.project.project_name|default:"N/A" }}</td>
															<td>{{ expense.status }}</td>
															<td>
																{% if expense.receipt %}
																	<a href="{{ expense.receipt.url }}" target="_blank">View</a>
																{% else %}
																	None
																{% endif %}
															</td>
															{% if request.user.role == 'Manager' or request.user.role == 'Accountant' %}
																<td>
																	{% if expense.status == 'Pending' %}
																		<a href="{% url 'expenses:approve-expense' expense.id %}" class="btn btn-sm btn-success">Approve</a>
																		<a href="{% url 'expenses:approve-expense' expense.id %}?reject=1" class="btn btn-sm btn-danger">Reject</a>
																	{% endif %}
																</td>
															{% endif %}
														</tr>
													{% endfor %}
												</tbody>
											</table>
										{% else %}
											<p>No expenses submitted yet.</p>
										{% endif %}
									</div>
								</div>
							</div>
						</div>

						<!-- Back Button -->
						<div class="row mt-3">
							<div class="col-12">
									{% if request.user.role == 'Manager' %}
										<a href="{% url 'manager:manager-dashboard' %}" class="btn btn-secondary btn-lg shadow-sm"><i class="bi bi-house me-2"></i>Dashboard</a>
									{% else %}
										<a href="{% url 'employee:employee-dashboard' %}" class="btn btn-secondary btn-lg shadow-sm"><i class="bi bi-house me-2"></i>Dashboard</a>
									{% endif %}
							</div>
						</div>
					</div>
					{% endblock %}
			]
├── timesheet/
│   └── forms.py
			from django import forms
			from .models import Timesheet

			class TimesheetForm(forms.ModelForm):
				class Meta:
					model = Timesheet
					fields = ['project', 'date', 'time_from', 'time_to', 'task_description']
					widgets = {
						'date': forms.DateInput(attrs={'type': 'date'}),
						'time_from': forms.TimeInput(attrs={'type': 'time'}),
						'time_to': forms.TimeInput(attrs={'type': 'time'}),
						'task_description': forms.Textarea(attrs={'rows': 3}),
					}

	└── models.py
			from django.db import models
			from django.utils import timezone
			from employee.models import EmployeeProfile
			from project.models import Project

			class Timesheet(models.Model):
				STATUS_CHOICES = [
					('Pending', 'Pending'),
					('Approved', 'Approved'),
					('Rejected', 'Rejected'),
				]
				employee = models.ForeignKey(EmployeeProfile, on_delete=models.CASCADE, related_name='timesheets')
				project = models.ForeignKey(Project, on_delete=models.CASCADE)
				date = models.DateField(default=timezone.now)
				time_from = models.TimeField()
				time_to = models.TimeField()
				task_description = models.TextField()
				status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Pending')
				da_rate = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)

				def save(self, *args, **kwargs):
					self.da_rate = 300 if self.project.location == 'Within Pune' else 600
					super().save(*args, **kwargs)
					from employee.models import AuditLog  # Import here to avoid circular import
					AuditLog.objects.create(
						user=self.employee.user,
						action='Timesheet Submitted',
						details=f"Timesheet for {self.project.project_name} on {self.date}"
					)

				def __str__(self):
					return f"{self.employee.user.get_full_name()} - {self.project.project_name} ({self.date})"
	└── urls.py
			from django.urls import path
			from . import views

			app_name = 'timesheet'

			urlpatterns = [
				path('my-timesheets/', views.my_timesheets, name='my-timesheets'),
				path('approve/<int:timesheet_id>/', views.approve_timesheet, name='approve-timesheet'),
			]
	└── view.py
				from django.shortcuts import render, redirect, get_object_or_404
				from django.contrib.auth.decorators import login_required
				from .forms import TimesheetForm
				from .models import Timesheet
				from employee.models import EmployeeProfile

				@login_required
				def my_timesheets(request):
					profile = EmployeeProfile.objects.get(user=request.user)
					timesheets = Timesheet.objects.filter(employee=profile).order_by('-date')
					if request.method == 'POST':
						form = TimesheetForm(request.POST)
						if form.is_valid():
							entry = form.save(commit=False)
							entry.employee = profile
							entry.save()
							return redirect('timesheet:employee-timesheets')
					else:
						form = TimesheetForm()
					return render(request, 'timesheet/my_timesheets.html', {'form': form, 'timesheets': timesheets})

				@login_required
				def approve_timesheet(request, timesheet_id):
					timesheet = get_object_or_404(Timesheet, id=timesheet_id)
					if request.user.role in ['Manager'] and request.method == 'POST':
						status = request.POST.get('status')
						if status in ['Approved', 'Rejected']:
							timesheet.status = status
							timesheet.save()
							AuditLog.objects.create(
								user=request.user,
								action=f'Timesheet {status}',
								details=f"Timesheet {timesheet.id} {status} by {request.user}"
							)
					return redirect('timesheet:employee-timesheets')
	└── templates/timesheet/
│       ├── my_timesheets.html
					{% extends "base.html" %}
					{% load static %}

					{% block content %}
					<h2>My Timesheets</h2>
					<form method="post">
					  {% csrf_token %}
					  {{ form.as_p }}
					  <button type="submit">Submit Timesheet</button>
					</form>
					<table style="width: 100%; border-collapse: collapse;">
					  <thead>
						<tr style="background-color: #f0f0f0;">
						  <th style="padding: 10px; border: 1px solid #ddd;">Date</th>
						  <th style="padding: 10px; border: 1px solid #ddd;">Project</th>
						  <th style="padding: 10px; border: 1px solid #ddd;">Task</th>
						  <th style="padding: 10px; border: 1px solid #ddd;">Time</th>
						  <th style="padding: 10px; border: 1px solid #ddd;">DA Rate</th>
						  <th style="padding: 10px; border: 1px solid #ddd;">Status</th>
						  {% if user.role == 'Manager' %}
							<th style="padding: 10px; border: 1px solid #ddd;">Action</th>
						  {% endif %}
						</tr>
					  </thead>
					  <tbody>
						{% for timesheet in timesheets %}
						<tr>
						  <td style="padding: 8px; border: 1px solid #ddd;">{{ timesheet.date }}</td>
						  <td style="padding: 8px; border: 1px solid #ddd;">{{ timesheet.project.project_name }}</td>
						  <td style="padding: 8px; border: 1px solid #ddd;">{{ timesheet.task_description }}</td>
						  <td style="padding: 8px; border: 1px solid #ddd;">{{ timesheet.time_from }} - {{ timesheet.time_to }}</td>
						  <td style="padding: 8px; border: 1px solid #ddd;">₹{{ timesheet.da_rate }}</td>
						  <td style="padding: 8px; border: 1px solid #ddd;">{{ timesheet.status }}</td>
						  {% if user.role == 'Manager' and timesheet.status == 'Pending' %}
							<td style="padding: 8px; border: 1px solid #ddd;">
							  <form method="post" action="{% url 'timesheet:approve-timesheet' timesheet.id %}">
								{% csrf_token %}
								<select name="status">
								  <option value="Approved">Approve</option>
								  <option value="Rejected">Reject</option>
								</select>
								<button type="submit">Submit</button>
							  </form>
							</td>
						  {% endif %}
						</tr>
						{% empty %}
						<tr>
						  <td colspan="7" style="padding: 8px; text-align: center;">No timesheets submitted.</td>
						</tr>
						{% endfor %}
					  </tbody>
					</table>
									{% if request.user.role == 'Manager' %}
										<a href="{% url 'manager:manager-dashboard' %}" class="btn btn-secondary btn-lg shadow-sm"><i class="bi bi-house me-2"></i>Dashboard</a>
									{% else %}
										<a href="{% url 'employee:employee-dashboard' %}" class="btn btn-secondary btn-lg shadow-sm"><i class="bi bi-house me-2"></i>Dashboard</a>
									{% endif %}
					{% endblock %}
				
├── Project/
│   └── admin.py
			
			# Register your models here.
			from django.contrib import admin
			from django.contrib.auth.admin import UserAdmin
			from accounts.models import CustomUser
			from django.utils.translation import gettext_lazy as _
			from .models import Project, Task, ProjectDocument, ProjectComment, ProjectBudget



			admin.site.register(Project)
			admin.site.register(Task)
			admin.site.register(ProjectDocument)
			admin.site.register(ProjectComment)
			admin.site.register(ProjectBudget)  # Add clearly



			@admin.register(CustomUser)
			class CustomUserAdmin(UserAdmin):
				# Fields shown in the admin form when adding/editing users
				fieldsets = (
					(None, {"fields": ("username", "password")}),
					(_("Personal info"), {"fields": ("first_name", "middle_name", "last_name", "email")}),
					(_("Permissions"), {"fields": ("is_active", "is_staff", "is_superuser", "groups", "user_permissions")}),
					(_("Important dates"), {"fields": ("last_login", "date_joined")}),
				)
				# Fields shown when creating a user via "Add user" form
				add_fieldsets = (
					(None, {
						"classes": ("wide",),
						"fields": ("username", "email", "first_name", "middle_name", "last_name", "password1", "password2"),
					}),
				)
				list_display = ("username", "email", "first_name", "middle_name", "last_name", "is_staff")
				search_fields = ("username", "email", "first_name", "last_name")
				ordering = ("username",)

	└── apps.py
			from django.apps import AppConfig


			class ProjectConfig(AppConfig):
				default_auto_field = 'django.db.models.BigAutoField'
				name = 'project'

	└── forms.py
			# project/forms.py
			from django import forms
			from .models import Project, Task, ProjectDocument, ProjectBudget  # Add ProjectBudget here clearly




			class ProjectForm(forms.ModelForm):
				class Meta:
					model = Project
					fields = [
						'project_name', 'customer_name', 'description', 'location',
						'start_date', 'end_date', 'project_manager', 'assigned_employees',
						'status', 'progress',  # new fields
					]
					widgets = {
						'start_date': forms.DateInput(attrs={'type': 'date'}),
						'end_date': forms.DateInput(attrs={'type': 'date'}),
						'description': forms.Textarea(attrs={'rows': 4}),
						'assigned_employees': forms.CheckboxSelectMultiple(),
						'status': forms.Select(),
						'progress': forms.NumberInput(attrs={'min':0, 'max':100}),
					}



			class TaskForm(forms.ModelForm):
				class Meta:
					model = Task
					fields = ['title', 'description', 'assigned_to', 'due_date', 'completed']
					widgets = {
						'due_date': forms.DateInput(attrs={'type': 'date'}),
						'description': forms.Textarea(attrs={'rows':3}),
						'assigned_to': forms.Select(),
					}

			class ProjectDocumentForm(forms.ModelForm):
				class Meta:
					model = ProjectDocument
					fields = ['document', 'description']

			class ProjectBudgetForm(forms.ModelForm):
				class Meta:
					model = ProjectBudget
					fields = ['allocated_budget', 'expenses_incurred']
					widgets = {
						'allocated_budget': forms.NumberInput(attrs={'step':'0.01'}),
						'expenses_incurred': forms.NumberInput(attrs={'step':'0.01'}),
					}

	└── models.py
			from django.db import models
			from django.conf import settings
			from employee.models import EmployeeProfile
			from django.utils import timezone

			class Project(models.Model):
				LOCATION_CHOICES = [
					('Within Pune', 'Within Pune'),
					('Outside Pune', 'Outside Pune'),
				]
				STATUS_CHOICES = [
					('Not Started', 'Not Started'),
					('In Progress', 'In Progress'),
					('Completed', 'Completed'),
					('On Hold', 'On Hold'),
					('Cancelled', 'Cancelled'),
				]
				project_name = models.CharField(max_length=100)
				customer_name = models.CharField(max_length=100)
				description = models.TextField(blank=True)
				location = models.CharField(max_length=20, choices=LOCATION_CHOICES)
				start_date = models.DateField()
				end_date = models.DateField(null=True, blank=True)
				project_manager = models.ForeignKey(
					settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='managed_projects'
				)
				assigned_employees = models.ManyToManyField(EmployeeProfile, related_name='projects_assigned', blank=True)
				status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Not Started')
				progress = models.PositiveIntegerField(default=0)

				def __str__(self):
					return f"{self.project_name} ({self.customer_name})"

				@property
				def is_starting_today(self):
					return self.start_date == timezone.now().date()

				@property
				def is_ending_today(self):
					return self.end_date == timezone.now().date()

			class ProjectComment(models.Model):
				project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='comments')
				user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)
				comment = models.TextField()
				timestamp = models.DateTimeField(auto_now_add=True)

			class Task(models.Model):
				project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='tasks')
				title = models.CharField(max_length=255)
				description = models.TextField(blank=True, null=True)
				due_date = models.DateField(null=True, blank=True)
				completed = models.BooleanField(default=False)
				assigned_to = models.ForeignKey(
					settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='assigned_tasks'
				)

				def __str__(self):
					return self.title

			class ProjectDocument(models.Model):
				project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='documents')
				title = models.CharField(max_length=255)
				uploaded_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)
				document = models.FileField(upload_to='project_documents/')
				uploaded_at = models.DateTimeField(auto_now_add=True)
				description = models.TextField(blank=True, null=True)

				def __str__(self):
					return f"{self.title} - {self.project.project_name}"

			class ProjectBudget(models.Model):
				project = models.OneToOneField(Project, on_delete=models.CASCADE, related_name='budget')
				allocated_budget = models.DecimalField(max_digits=12, decimal_places=2)
				expenses_incurred = models.DecimalField(max_digits=12, decimal_places=2, default=0.00)

				def __str__(self):
					return f"Budget for {self.project.project_name}"
	└── urls.py
			from django.urls import path
			from . import views

			app_name = 'project'

			urlpatterns = [
				path('', views.project_list, name='project-list'),
				path('<int:pk>/', views.project_detail, name='project-detail'),
				path('create/', views.project_create, name='project-create'),
				path('<int:pk>/edit/', views.project_edit, name='project-edit'),
				path('<int:project_pk>/task/add/', views.task_create, name='task-create'),
				path('<int:project_pk>/task/<int:task_pk>/edit/', views.task_edit, name='task-edit'),
				path('<int:project_pk>/document/<int:doc_pk>/delete/', views.document_delete, name='document-delete'),
				path('<int:project_pk>/document/upload/', views.document_upload, name='document-upload'),
				path('<int:project_pk>/budget/', views.budget_manage, name='budget-manage'),
				path('analytics/', views.analytics_dashboard, name='analytics-dashboard'),
				path('export/', views.export_projects_excel, name='export-projects'),
			]
	└── views.py
			from django.shortcuts import render, redirect, get_object_or_404
			from django.contrib.auth.decorators import login_required, permission_required
			from .models import Project, ProjectDocument, ProjectBudget
			from .forms import ProjectForm, ProjectDocumentForm, TaskForm, ProjectBudgetForm
			from django.http import HttpResponse
			from import_export import resources
			from tablib import Dataset

			class ProjectResource(resources.ModelResource):
				class Meta:
					model = Project
					fields = ('id', 'project_name', 'customer_name', 'location', 'status', 'progress', 'start_date', 'end_date')

			@login_required
			@permission_required('project.view_project', raise_exception=True)
			def project_list(request):
				projects = Project.objects.all()
				return render(request, 'project/project_list.html', {'projects': projects})

			@login_required
			@permission_required('project.view_project', raise_exception=True)
			def project_detail(request, pk):
				project = get_object_or_404(Project, pk=pk)
				return render(request, 'project/project_detail.html', {
					'project': project,
					'today_start': project.is_starting_today,
					'today_end': project.is_ending_today,
				})

			@login_required
			@permission_required('project.add_project', raise_exception=True)
			def project_create(request):
				if request.method == 'POST':
					form = ProjectForm(request.POST)
					if form.is_valid():
						project = form.save()
						ProjectBudget.objects.create(project=project, allocated_budget=0)
						return redirect('project:project-list')
				else:
					form = ProjectForm()
				return render(request, 'project/project_form.html', {'form': form, 'title': 'Add New Project'})

			@login_required
			@permission_required('project.change_project', raise_exception=True)
			def project_edit(request, pk):
				project = get_object_or_404(Project, pk=pk)
				if request.method == 'POST':
					form = ProjectForm(request.POST, instance=project)
					if form.is_valid():
						form.save()
						return redirect('project:project-detail', pk=pk)
				else:
					form = ProjectForm(instance=project)
				return render(request, 'project/project_form.html', {'form': form, 'title': 'Edit Project'})

			@login_required
			@permission_required('project.add_task', raise_exception=True)
			def task_create(request, project_pk):
				project = get_object_or_404(Project, pk=project_pk)
				if request.method == 'POST':
					form = TaskForm(request.POST)
					if form.is_valid():
						task = form.save(commit=False)
						task.project = project
						task.save()
						return redirect('project:project-detail', pk=project.pk)
				else:
					form = TaskForm()
				return render(request, 'project/task_form.html', {'form': form, 'project': project, 'title': 'Add Task'})

			@login_required
			@permission_required('project.change_task', raise_exception=True)
			def task_edit(request, project_pk, task_pk):
				project = get_object_or_404(Project, pk=project_pk)
				task = get_object_or_404(Task, pk=task_pk, project=project)
				if request.method == 'POST':
					form = TaskForm(request.POST, instance=task)
					if form.is_valid():
						form.save()
						return redirect('project:project-detail', pk=project.pk)
				else:
					form = TaskForm(instance=task)
				return render(request, 'project/task_form.html', {'form': form, 'project': project, 'title': 'Edit Task'})

			@login_required
			@permission_required('project.delete_projectdocument', raise_exception=True)
			def document_delete(request, project_pk, doc_pk):
				document = get_object_or_404(ProjectDocument, pk=doc_pk, project_id=project_pk)
				if request.method == 'POST':
					document.document.delete()
					document.delete()
					return redirect('project:project-detail', pk=project_pk)
				return render(request, 'project/document_confirm_delete.html', {'document': document})

			@login_required
			@permission_required('project.add_projectdocument', raise_exception=True)
			def document_upload(request, project_pk):
				project = get_object_or_404(Project, pk=project_pk)
				if request.method == 'POST':
					form = ProjectDocumentForm(request.POST, request.FILES)
					if form.is_valid():
						doc = form.save(commit=False)
						doc.project = project
						doc.uploaded_by = request.user
						doc.save()
						return redirect('project:project-detail', pk=project.pk)
				else:
					form = ProjectDocumentForm()
				return render(request, 'project/document_form.html', {'form': form, 'project': project})

			@login_required
			@permission_required('project.change_projectbudget', raise_exception=True)
			def budget_manage(request, project_pk):
				project = get_object_or_404(Project, pk=project_pk)
				budget, created = ProjectBudget.objects.get_or_create(project=project)
				if request.method == 'POST':
					form = ProjectBudgetForm(request.POST, instance=budget)
					if form.is_valid():
						form.save()
						return redirect('project:project-detail', pk=project.pk)
				else:
					form = ProjectBudgetForm(instance=budget)
				return render(request, 'project/budget_form.html', {'form': form, 'project': project, 'budget': budget})

			@login_required
			@permission_required('project.view_project', raise_exception=True)
			def analytics_dashboard(request):
				total_projects = Project.objects.count()
				projects_completed = Project.objects.filter(status='Completed').count()
				projects_in_progress = Project.objects.filter(status='In Progress').count()
				projects_on_hold = Project.objects.filter(status='On Hold').count()
				projects_not_started = Project.objects.filter(status='Not Started').count()
				context = {
					'total_projects': total_projects,
					'projects_completed': projects_completed,
					'projects_in_progress': projects_in_progress,
					'projects_on_hold': projects_on_hold,
					'projects_not_started': projects_not_started,
				}
				return render(request, 'project/analytics_dashboard.html', context)

			@login_required
			@permission_required('project.view_project', raise_exception=True)
			def export_projects_excel(request):
				project_resource = ProjectResource()
				dataset = project_resource.export()
				response = HttpResponse(dataset.xlsx, content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
				response['Content-Disposition'] = 'attachment; filename="projects_report.xlsx"'
				return response
				
	└── templates/Project/
│       ├── analytics_dashboard.html
						{% extends "base.html" %}
						{% load static %}


						{% block content %}
						<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
						<div class="container">
							<h2><i class="fa-solid fa-chart-pie"></i> Project Analytics Dashboard</h2>
							<canvas id="projectStatusChart" width="400" height="200"></canvas>
						</div>
							<a class="btn" href="{% url 'export-projects-excel' %}">
								<i class="fa-solid fa-file-excel"></i> Export Projects to Excel
							</a>

						<script>
							const ctx = document.getElementById('projectStatusChart').getContext('2d');
							const projectStatusChart = new Chart(ctx, {
								type: 'pie',
								data: {
									labels: ['Completed', 'In Progress', 'On Hold', 'Not Started'],
									datasets: [{
										label: 'Project Status',
										data: [
											{{ projects_completed }},
											{{ projects_in_progress }},
											{{ projects_on_hold }},
											{{ projects_not_started }}
										],
										backgroundColor: [
											'#28a745',
											'#007bff',
											'#ffc107',
											'#6c757d'
										],
										borderWidth: 1
									}]
								},
								options: {
									responsive: true
								}
							});
						</script>
						{% endblock %}
        ├── budget_form.html
					{% extends "base.html" %}
					{% load static %}

					{% block content %}
					<div class="container">
						<h2>Manage Budget for {{ project.project_name }}</h2>
						<form method="post">
							{% csrf_token %}
							{{ form.as_p }}
							<button type="submit">Save Budget</button>
						</form>
						<a class="btn btn-secondary" href="{% url 'project-detail' project.pk %}"><i class="fa-solid fa-arrow-left"></i> Back to Project</a>
					</div>
					{% endblock %}

		├── document_confirm_delete.html
						{% extends "base.html" %}
						{% load static %}

						{% block content %}
						<div class="container">
							<h2>Confirm Delete</h2>
							<p>Are you sure you want to delete document "{{ document.document.name }}"?</p>
							<form method="post">
								{% csrf_token %}
								<button type="submit">Confirm Delete</button>
							</form>
							<a href="{% url 'project-detail' document.project.pk %}">Cancel</a>
						</div>
						{% endblock %}

		├── document_form.html
					{% extends "base.html" %}
					{% load static %}

					{% block content %}
					<div class="container">
						<h2>Upload Document for {{ project.project_name }}</h2>
						<form method="post" enctype="multipart/form-data">
							{% csrf_token %}
							{{ form.as_p }}
							<button type="submit">Upload</button>
						</form>
						<a class="btn btn-secondary" href="{% url 'project-detail' project.pk %}"><i class="fa-solid fa-arrow-left"></i> Back to Project</a>
					</div>
					{% endblock %}

		
		├── project_detail.html
					{% extends "base.html" %}
					{% load static %}

					{% block content %}
					<h2>Project Detail: {{ project.project_name }}</h2>

					<ul>
						<li><strong>Customer:</strong> {{ project.customer_name }}</li>
						<li><strong>Status:</strong> {{ project.status }}</li>
						<li><strong>Start Date:</strong> {{ project.start_date }}</li>
						<li><strong>End Date:</strong> {{ project.end_date }}</li>
						<li><strong>Progress:</strong> {{ project.progress }}%</li>
					</ul>

					<h3>Tasks</h3>
					{% if project.tasks.exists %}
						<ul>
							{% for task in project.tasks.all %}
								<li>{{ task.task_name }} - {{ task.status }}</li>
							{% endfor %}
						</ul>
					{% else %}
						<p>No tasks assigned.</p>
					{% endif %}

					<a href="{% url 'project:project-list' %}" class="btn">← Back to Projects</a>
					{% endblock %}

		├── project_form.html
				<!DOCTYPE html>
				<html lang="en">
				<head>
					<title>{{ title }}</title>
					<!-- Google Fonts & FontAwesome (same as before) -->
					<link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet">
					<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">

					<style>
						/* Same CSS from edit_profile.html for consistency */
						body { font-family: 'Roboto', sans-serif; background-color: #f0f2f5; margin:0; padding:0; }
						.container { max-width:800px; background:#fff; margin:40px auto; padding:30px; border-radius:8px; box-shadow:0 4px 10px rgba(0,0,0,0.05); }
						h2 { color:#343a40; text-align:center; margin-bottom:20px; }
						.form-group { margin-bottom:15px; }
						.form-group label { display:block; font-weight:500; margin-bottom:5px; }
						.form-group input, .form-group select, .form-group textarea { width:100%; padding:10px; border:1px solid #ced4da; border-radius:4px; box-sizing:border-box; }
						button { padding:10px 20px; background-color:#007bff; color:#ffffff; border:none; border-radius:5px; cursor:pointer; width:100%; }
						.back-btn { margin-top:15px; display:inline-block; color:#007bff; text-decoration:none; }
					</style>
				</head>
				<body>
				<div class="container">
					<h2>{{ title }}</h2>
					<form method="post">
						{% csrf_token %}
						{% for field in form %}
							<div class="form-group">
								<label>{{ field.label }}</label>
								{{ field }}
								{% if field.errors %}
									<div style="color:#dc3545;">{{ field.errors }}</div>
								{% endif %}
							</div>
						{% endfor %}
						<button type="submit">Save</button>
					</form>
					<a class="btn btn-secondary" href="{% url 'project-list' %}"><i class="fa-solid fa-arrow-left"></i> Back to Project List</a>
				</div>
				</body>
				</html>




		├── project_list.html
					{% extends "base.html" %}
					{% load static %}

					{% block content %}
					<h2>Project List</h2>
					<a class="btn" href="{% url 'project-create' %}"><i class="fa-solid fa-plus"></i> Add New Project</a>
					<ul>
						{% for project in projects %}
							<li><a href="{% url 'project-detail' project.pk %}">{{ project.project_name }}</a></li>
						{% endfor %}
					</ul>
					{% endblock %}




		├── task_form.html
				{% extends "base.html" %}
				{% load static %}


				{% block content %}
				<div class="container">
					<h2>{{ title }} for {{ project.project_name }}</h2>
					<form method="post">
						{% csrf_token %}
						{% for field in form %}
						<div class="form-group">
							<label>{{ field.label }}</label>
							{{ field }}
						</div>
						{% endfor %}
						<button type="submit">Save Task</button>
					</form>
					<a class="btn btn-secondary" href="{% url 'project-detail' project.pk %}"><i class="fa-solid fa-arrow-left"></i> Back to Project</a>
				</div>
				{% endblock %}

		
├── templates/
│   └── base.html
			<!-- base.html -->
				{% load static %}
				<!DOCTYPE html>
				<html lang="en">
				<head>
					<meta charset="UTF-8">
					<title>{% block title %}Resource Management Pro{% endblock %}</title>
					<link href="https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap" rel="stylesheet">
					<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
					<link rel="stylesheet" href="{% static 'css/style.css' %}">
					<style>
						body {
							font-family: 'Roboto', sans-serif;
							background-color: #f4f6f9;
							margin: 0;
							padding: 0;
						}
						header {
							background-color: #007bff;
							color: #fff;
							padding: 15px;
							text-align: center;
						}
						nav {
							background-color: #343a40;
							padding: 10px;
							display: flex;
							justify-content: space-between;
							align-items: center;
						}
						nav a {
							color: #ffffff;
							text-decoration: none;
							margin: 0 10px;
						}
						.container {
							max-width: 1000px;
							margin: 30px auto;
							padding: 20px;
							background: #fff;
							border-radius: 8px;
							box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
						}
						footer {
							text-align: center;
							padding: 12px;
							background-color: #f1f1f1;
							color: #666;
							margin-top: 30px;
						}
						.btn {
							background-color: #007bff;
							color: white;
							padding: 8px 14px;
							border: none;
							border-radius: 5px;
							cursor: pointer;
							text-decoration: none;
						}
						.btn:hover {
							background-color: #0056b3;
						}
					</style>
				</head>
				<body>
						<div style="text-align: center; margin-bottom: 20px;">
							<img src="{% static 'images/logo.png' %}" alt="Logo" style="height: 60px;">
							
						</div>
					<header>
						<h2>Resource Management Pro</h2>
					</header>

					<nav>
					{% if user.is_authenticated %}
						<span style="float:right; margin-right: 20px;">
							Logged in as <strong>{{ user.username }}</strong> |
							<form method="post" action="{% url 'accounts:logout' %}" style="display:inline;">
								{% csrf_token %}
								<button type="submit" class="btn">Logout</button>
							</form>
						</span>
					{% else %}
						<span style="float:right; margin-right: 20px;">
							<a href="{% url 'accounts:login' %}" class="btn">Login</a>
						</span>
					{% endif %}
				</nav>


					<div class="container">
						{% block content %}
						{% endblock %}
					</div>

					<footer>
						&copy; {{ year|default:"2025" }} Resource Management Tool. All rights reserved.
					</footer>
				</body>
				</html>

└── urls.py (root)
		from django.contrib import admin
		from django.urls import path, include
		from django.conf import settings
		from django.conf.urls.static import static
		from django.shortcuts import redirect
		from django.contrib.staticfiles.views import serve

		def root_redirect(request):
			return redirect('accounts:login')

		urlpatterns = [
			path('', root_redirect, name='root'),  # Redirect root to login
			path('admin/', admin.site.urls),
			path('accounts/', include('accounts.urls')),
			path('employee/', include('employee.urls')),
			path('project/', include('project.urls')),
			path('timesheet/', include('timesheet.urls')),
			path('expenses/', include('expenses.urls')),
			path('manager/', include('manager.urls')),
		] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

└── settings.py (root)
		import os
		from pathlib import Path

		BASE_DIR = Path(__file__).resolve().parent.parent

		SECRET_KEY = 'your-secret-key'  # Replace with a secure key in production
		DEBUG = True
		ALLOWED_HOSTS = ['localhost', '127.0.0.1']

		INSTALLED_APPS = [
			'django.contrib.admin',
			'django.contrib.auth',
			'django.contrib.contenttypes',
			'django.contrib.sessions',
			'django.contrib.messages',
			'django.contrib.staticfiles',
			'accounts',
			'employee',
			'project',
			'expenses',
			'timesheet',
			'manager',
			'import_export',
			'widget_tweaks',
			'crispy_forms',
			'crispy_bootstrap5',
		]

		CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
		CRISPY_TEMPLATE_PACK = "bootstrap5"

		AUTH_USER_MODEL = 'accounts.CustomUser'

		MIDDLEWARE = [
			'django.middleware.security.SecurityMiddleware',
			'django.contrib.sessions.middleware.SessionMiddleware',
			'django.middleware.common.CommonMiddleware',
			'django.middleware.csrf.CsrfViewMiddleware',
			'django.contrib.auth.middleware.AuthenticationMiddleware',
			#'accounts.middleware.DisableClientSideCachingMiddleware',
			'django.contrib.messages.middleware.MessageMiddleware',
			'django.middleware.clickjacking.XFrameOptionsMiddleware',
		]

		ROOT_URLCONF = 'ResourceManagement.urls'

		TEMPLATES = [{
			'BACKEND': 'django.template.backends.django.DjangoTemplates',
			'DIRS': [os.path.join(BASE_DIR, 'templates')],
			'APP_DIRS': True,
			'OPTIONS': {
				'context_processors': [
					'django.template.context_processors.debug',
					'django.template.context_processors.request',
					'django.contrib.auth.context_processors.auth',
					'django.contrib.messages.context_processors.messages',
				],
			},
		}]

		WSGI_APPLICATION = 'ResourceManagement.wsgi.application'

		DATABASES = {
			'default': {
				'ENGINE': 'django.db.backends.sqlite3',
				'NAME': BASE_DIR / 'db.sqlite3',
			}
		}

		AUTH_PASSWORD_VALIDATORS = [
			{'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
			{'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
			{'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
			{'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
		]

		LANGUAGE_CODE = 'en-us'
		TIME_ZONE = 'Asia/Kolkata'
		USE_I18N = True
		USE_TZ = True

		STATIC_URL = '/static/'
		STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
		STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

		MEDIA_URL = '/media/'
		MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

		DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

		LOGIN_URL = '/accounts/login/'
		LOGIN_REDIRECT_URL = '/accounts/profile/'
		LOGOUT_REDIRECT_URL = '/accounts/login/'

		from django.contrib.messages import constants as messages
		MESSAGE_TAGS = {
			messages.DEBUG: 'debug',
			messages.INFO: 'info',
			messages.SUCCESS: 'success',
			messages.WARNING: 'warning',
			messages.ERROR: 'danger',
		}

		LOGGING = {
			'version': 1,
			'disable_existing_loggers': False,
			'handlers': {
				'console': {
					'class': 'logging.StreamHandler',
				},
			},
			'loggers': {
				'': {
					'handlers': ['console'],
					'level': 'INFO',
				},
			},
		}

		SESSION_COOKIE_SECURE = False  # False for local dev (http)
		SESSION_COOKIE_HTTPONLY = True
		SESSION_COOKIE_SAMESITE = 'Lax'  # Default, should be fine

manage.py(root)
	#!/usr/bin/env python
	"""Django's command-line utility for administrative tasks."""
	import os
	import sys


	def main():
		"""Run administrative tasks."""
		os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ResourceManagement.settings')
		try:
			from django.core.management import execute_from_command_line
		except ImportError as exc:
			raise ImportError(
				"Couldn't import Django. Are you sure it's installed and "
				"available on your PYTHONPATH environment variable? Did you "
				"forget to activate a virtual environment?"
			) from exc
		execute_from_command_line(sys.argv)


	if __name__ == '__main__':
		main()


		