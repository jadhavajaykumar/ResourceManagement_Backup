i am pasing the code in prompt window 1 by 1. study the code with respect to above given requirement and errors. then give the solution.fix for the app, here I m starting with manage.py, 
'#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ResourceManagement.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main() '.  
	
then next file is settings.py from main app, '"""
Django settings for ResourceManagement project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')




# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-cqljnn*gk@i-2*gz8c*4zb7)47va-g_!qtxutpx9a2us9^9seu'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'employee',  # clearly add this line
    'project',  # Add clearly
    'import_export',
    'expenses',
    'timesheet',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # Add this below auth middleware
    'accounts.middleware.DisableClientSideCachingMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'accounts.middleware.DisableCacheMiddleware',
]








ROOT_URLCONF = 'ResourceManagement.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ResourceManagement.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#LOGIN_URL = '/accounts/login/'
#LOGIN_REDIRECT_URL = '/employee/'
#LOGIN_REDIRECT_URL = '/redirect-dashboard/'

#LOGIN_URL = '/'
#LOGIN_REDIRECT_URL = '/employee/redirect-dashboard/'  # or any endpoint that checks role

# Redirect after logout
#LOGOUT_REDIRECT_URL = '/accounts/login/'

# Optional, also include this for good practice
#LOGIN_URL = '/accounts/login/'

#LOGIN_REDIRECT_URL = '/accounts/profile/'
#LOGOUT_REDIRECT_URL = '/accounts/login/'
#LOGIN_REDIRECT_URL = '/accounts/role-redirect/'  # dummy route
LOGIN_REDIRECT_URL = '/employee/dashboard/'
LOGOUT_REDIRECT_URL = '/accounts/login/'
LOGIN_URL = '/accounts/login/'




BASE_DIR = Path(__file__).resolve().parent.parent

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # <-- ensure clearly defined
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
 '. then next file is urls.py from main app, '"""
URL configuration for ResourceManagement project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import path, include
from django.shortcuts import redirect
from django.contrib.auth import views as auth_views  # clearly import built-in views
from django.conf import settings
from django.conf.urls.static import static
from employee.views import redirect_to_dashboard
from employee import views as employee_views  # import this


urlpatterns = [
    path('admin/', admin.site.urls),
    path('accounts/', include('accounts.urls')),

    # Login/Logout
    path('accounts/login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),
    path('accounts/logout/', auth_views.LogoutView.as_view(next_page='login'), name='logout'),
    
    # Redirect root to login page (not dashboard)
    path('', auth_views.LoginView.as_view(template_name='registration/login.html'), name='root-login'),
    

    # App URLs
    path('employee/', include('employee.urls')),
    path('project/', include('project.urls')),
    path('timesheet/', include('timesheet.urls')),
    path('expenses/', include('expenses.urls')),
]

# Media files
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)'. 

then next file is base.html from main app templates, '<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}Resource Management Tool{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f0f2f5;
            margin: 0;
            padding: 0;
        }
        header {
            background-color: #007bff;
            color: #fff;
            padding: 15px 20px;
            text-align: center;
        }
        nav {
            background-color: #343a40;
            padding: 10px;
            text-align: center;
        }
        nav a {
            color: #ffffff;
            text-decoration: none;
            margin: 0 10px;
        }
        nav a:hover {
            text-decoration: underline;
        }
        .container {
            max-width: 900px;
            margin: 40px auto;
            padding: 20px;
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.05);
        }
        footer {
            text-align: center;
            padding: 10px;
            background-color: #f8f9fa;
            color: #6c757d;
            position: fixed;
            width: 100%;
            bottom: 0;
        }

        .btn {
            display: inline-block;
            font-weight: 500;
            color: #ffffff;
            text-decoration: none;
            background-color: #007bff;
            border-radius: 4px;
            padding: 8px 15px;
            margin: 5px;
            transition: background-color 0.3s ease;
            cursor: pointer;
        }

        .btn:hover {
            background-color: #0056b3;
        }

        .btn-secondary {
            background-color: #6c757d;
        }

        .btn-secondary:hover {
            background-color: #5a6268;
        }
    </style>
</head>
<body>

{% if user.is_authenticated %}
<header>
    <h1>Resource Management Tool</h1>
</header>

<nav>
    <a href="{% url 'employee-profile-home' %}"><i class="fa-solid fa-user"></i> Employee</a>
	
			<nav>
		  <ul>
			<li><a href="{% url 'employee-dashboard' %}">Dashboard</a></li>
			
			{% if user.is_authenticated and user.profile.role in "Manager Director Admin SystemAdmin" %}
			  <li><a href="{% url 'project-list' %}">Projects</a></li>
			  <li><a href="{% url 'analytics-dashboard' %}">Analytics</a></li>
			{% endif %}
		  </ul>
		</nav>

    <span style="float:right; margin-right: 20px;">
        Logged in as <strong>{{ user.username }}</strong> |
        <form method="post" action="{% url 'logout' %}" style="display:inline;">
			{% csrf_token %}
			<button type="submit" class="btn btn-secondary" style="background:none; border:none; color:white; cursor:pointer;">Logout</button>
		</form>

    </span>
</nav>
{% endif %}

<div class="container">
    {% block content %}
    {% endblock %}
</div>

<footer>
    &copy; {{ year|default:"2025" }} Resource Management Tool. All Rights Reserved.
</footer>

</body>
</html>
'. 
Then next file is login.html from main app templates, '{% extends 'base.html' %}

{% block content %}
<h2>Login</h2>
<form method="post" action="{% url 'login' %}">
    {% csrf_token %}
    <div>
        <label for="id_username">Username:</label>
        <input type="text" name="username" required id="id_username">
    </div>
    <div>
        <label for="id_password">Password:</label>
        <input type="password" name="password" required id="id_password">
    </div>
    <button type="submit" class="btn">Login</button>
</form>
{% if form.errors %}
    <p style="color:red;">Invalid username or password. Please try again.</p>
{% endif %}
{% endblock %}
'.

then next file is middleware.py from accounts app(this app is must be used to handle the different user groups and user level access), 'from django.utils.deprecation import MiddlewareMixin
from django.utils.cache import add_never_cache_headers

class DisableClientSideCachingMiddleware(MiddlewareMixin):
    def process_response(self, request, response):
        if request.user.is_authenticated:
            add_never_cache_headers(response)
        return response

 '. then next file is urls.py from accounts app, '# accounts/urls.py
from django.urls import path
from .views import logout_view, custom_login_view
from django.urls import path
from . import views
from django.contrib.auth import views as auth_views
from django.contrib.auth.views import LoginView, LogoutView

urlpatterns = [
    path('login/', LoginView.as_view(template_name='login.html'), name='login'),
    path('logout/', LogoutView.as_view(next_page='login'), name='logout'),
    path('profile/', views.redirect_to_dashboard, name='profile'),
]






 '. then next file is views.py from accounts app, 'from django.shortcuts import redirect, render
from django.contrib.auth.decorators import login_required
from django.contrib.auth import logout
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth import authenticate, login


@login_required
def profile_redirect(request):
    user = request.user
    if user.is_superuser:
        return redirect('/admin/')
    elif hasattr(user, 'employeeprofile'):
        return redirect('employee-dashboard')
    else:
        # Placeholder for other user types (e.g., manager, account)
        return redirect('employee-dashboard')



def logout_view(request):
    logout(request)
    return redirect('login')  # This should render login page properly


def custom_login_view(request):
    if request.method == "POST":
        form = AuthenticationForm(data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            # Now redirect based on user access level
            if user.is_superuser:
                return redirect('/admin/')  # or director dashboard
            elif hasattr(user, 'employeeprofile'):
                return redirect('employee-dashboard')  # employee dashboard route name
            else:
                return redirect('/')  # fallback
    else:
        form = AuthenticationForm()
    return render(request, 'registration/login.html', {'form': form})


from django.shortcuts import redirect
from django.contrib.auth.decorators import login_required

@login_required
def redirect_to_dashboard(request):
    user = request.user

    # You can change this condition based on your logic
    if hasattr(user, 'employee'):
        return redirect('employee-dashboard')
    elif user.is_superuser:
        return redirect('/admin/')
    else:
        return redirect('/employee/') '. then next file is admin.py from employee app, 'from django.contrib import admin
from .models import EmployeeProfile

admin.site.register(EmployeeProfile) '. then next file is apps.py from employee app, 'from django.apps import AppConfig


class EmployeeConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'employee' '. then next file is forms.py from employee app, 'from django import forms
from .models import EmployeeProfile

class EmployeeProfileForm(forms.ModelForm):
    class Meta:
        model = EmployeeProfile
        fields = [
            'career_start_date',
            'probotix_joining_date',  
            'date_of_birth',
            'contact_number',
            'address',
            'emergency_contact_name',
            'emergency_contact_relation',
            'emergency_contact_number',
            'employee_id',
            'role',
            'department',
            'reporting_manager',
            'employment_type',
            'confirmation_date',
            'pan_aadhar_ssn',
            'bank_account_number',
            'bank_ifsc_code',
            'epf_number',
        ]

        widgets = {
            'career_start_date': forms.DateInput(attrs={'type': 'date'}),
            'probotix_joining_date': forms.DateInput(attrs={'type': 'date'}),
            'date_of_birth': forms.DateInput(attrs={'type': 'date'}),
        }'. then next file is models.py from employee app, 'from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
from datetime import timedelta

class EmployeeProfile(models.Model):

    EMPLOYMENT_TYPES = [
        ('Permanent', 'Permanent'),
        ('Contract', 'Contract'),
        ('Intern', 'Intern'),
    ]

    user = models.OneToOneField(User, on_delete=models.CASCADE)
    
     # New field for career start date
    career_start_date = models.DateField(null=True, blank=True)

    # Renamed field (previously joining_date)
    probotix_joining_date = models.DateField(default=timezone.now)
    confirmation_date = models.DateField(null=True, blank=True)
    
    # Personal Info
    date_of_birth = models.DateField(null=True, blank=True)
    contact_number = models.CharField(max_length=15, blank=True)
    address = models.TextField(blank=True)
    emergency_contact_name = models.CharField(max_length=100, blank=True)
    emergency_contact_relation = models.CharField(max_length=50, blank=True)
    emergency_contact_number = models.CharField(max_length=15, blank=True)

    # Employment Info
    employee_id = models.CharField(max_length=20, unique=True, blank=True)
    role = models.CharField(max_length=50, blank=True)
    department = models.CharField(max_length=50, blank=True)
    reporting_manager = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='managed_employees')
    employment_type = models.CharField(max_length=20, choices=EMPLOYMENT_TYPES, default='Permanent')
        

    # HR & Payroll (Optional)
    pan_aadhar_ssn = models.CharField(max_length=20, blank=True)
    bank_account_number = models.CharField(max_length=30, blank=True)
    bank_ifsc_code = models.CharField(max_length=20, blank=True)
    epf_number = models.CharField(max_length=20, blank=True)

    def __str__(self):
        return f"{self.user.get_full_name()} ({self.employee_id})"
        
    def save(self, *args, **kwargs):
        if not self.confirmation_date and self.probotix_joining_date:
            # Automatically set confirmation_date 180 days after probotix_joining_date
            self.confirmation_date = self.probotix_joining_date + timedelta(days=180)
        super(EmployeeProfile, self).save(*args, **kwargs)    
        
    @property
    def total_experience(self):
        if self.career_start_date:
            today = timezone.now().date()
            experience_years = today.year - self.career_start_date.year - ((today.month, today.day) < (self.career_start_date.month, self.career_start_date.day))
            return experience_years
        return None
        
    @property
    def confirmation_due_today(self):
        return self.confirmation_date == timezone.now().date()

class Skill(models.Model):
    name = models.CharField(max_length=50, unique=True)

    def __str__(self):
        return self.name

class EmployeeSkill(models.Model):
    RATING_CHOICES = [(i, label) for i, label in enumerate(["Not Known", "Poor", "Average", "Good", "Very Good"])]

    employee = models.ForeignKey(EmployeeProfile, on_delete=models.CASCADE, related_name='skills')
    skill = models.ForeignKey(Skill, on_delete=models.CASCADE)
    rating = models.IntegerField(choices=RATING_CHOICES, default=0)

    class Meta:
        unique_together = ('employee', 'skill')

    def __str__(self):
        return f"{self.employee.user.get_full_name()} - {self.skill.name} ({self.get_rating_display()})"

     '. then next file is tests.py from employee app, 'from django.test import TestCase

# Create your tests here. '. then next file is urls.py from employee app, 'from django.urls import path
from . import views



urlpatterns = [
    path('', views.profile_home, name='employee-profile-home'),
    path('edit/', views.edit_profile, name='edit-employee-profile'),
    path('dashboard/', views.employee_dashboard, name='employee-dashboard'),
    path('my-projects/', views.employee_projects, name='employee-projects'),
]




 '. then next file is views.py from employee app, '# employee/views.py
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from .models import EmployeeProfile, EmployeeSkill
from .forms import EmployeeProfileForm  # <-- Add this clearly


@login_required
def profile_home(request):
    profile, created = EmployeeProfile.objects.get_or_create(user=request.user)
    employee_skills = EmployeeSkill.objects.filter(employee=profile)
    
    context = {
        'profile': profile,
        'employee_skills': employee_skills,
        'confirmation_due_today': profile.confirmation_due_today,
    }
    return render(request, 'employee/profile_home.html', context)



@login_required
def edit_profile(request):
    profile, created = EmployeeProfile.objects.get_or_create(user=request.user)
    if request.method == 'POST':
        form = EmployeeProfileForm(request.POST, instance=profile)
        if form.is_valid():
            form.save()
            return redirect('employee-profile-home')
    else:
        form = EmployeeProfileForm(instance=profile)

    return render(request, 'employee/edit_profile.html', {'form': form})





@login_required
def employee_dashboard(request):
    profile = EmployeeProfile.objects.get(user=request.user)
    return render(request, 'employee/dashboard.html', {'profile': profile})

@login_required
def employee_projects(request):
    profile = EmployeeProfile.objects.get(user=request.user)
    projects = profile.projects_assigned.all()
    return render(request, 'employee/my_projects.html', {'projects': projects})



    


@login_required
def redirect_to_dashboard(request):
    if hasattr(request.user, 'employeeprofile'):
        return redirect('employee-dashboard')
    elif request.user.is_superuser:
        return redirect('/admin/')  # Or a dedicated superuser dashboard
    elif request.user.groups.filter(name='Manager').exists():
        return redirect('manager-dashboard')  # You can update this view later
    else:
        return redirect('login')  # fallback



 '. then next file is dashboard.html from employee app templates, '{% extends 'base.html' %}
{% block content %}
<div class="container">
    <h2>Welcome, {{ profile.user.get_full_name }}</h2>
		
    <div style="display:flex; flex-wrap:wrap; gap:20px; margin-top:20px;">
        <a href="{% url 'employee-profile-home' %}" class="btn"><i class="fa-solid fa-id-card"></i> My Profile</a>
        <a href="{% url 'employee-projects' %}" class="btn"><i class="fa-solid fa-folder"></i> My Projects</a>
        <a href="{% url 'employee-timesheets' %}" class="btn"><i class="fa-solid fa-clock"></i> My Timesheets</a>
        <a href="{% url 'employee-expenses' %}" class="btn"><i class="fa-solid fa-receipt"></i> My Expenses</a>
    </div>
		

</div>
{% endblock %} '. then next file is edit_profile.html from employee app templates, '
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Edit Employee Profile</title>
    <div style="text-align: right;">
		<a class="btn btn-secondary" href="{% url 'employee-dashboard' %}">← Back to Dashboard</a>
	</div>

	
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap" rel="stylesheet">
    
    <!-- Font Awesome Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f0f2f5;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 800px;
            background: #fff;
            margin: 40px auto;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.05);
        }

        h2 {
            color: #343a40;
            border-bottom: 2px solid #e7eaf0;
            padding-bottom: 10px;
            margin-bottom: 20px;
            text-align: center;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            font-weight: 500;
            color: #495057;
            margin-bottom: 5px;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 10px;
            font-size: 15px;
            color: #495057;
            border: 1px solid #ced4da;
            border-radius: 4px;
            transition: border-color 0.3s;
            box-sizing: border-box;
        }

        .form-group input:focus,
        .form-group textarea:focus,
        .form-group select:focus {
            outline: none;
            border-color: #80bdff;
            box-shadow: 0 0 5px rgba(0,123,255,0.1);
        }

        button {
            padding: 10px 20px;
            background-color: #007bff;
            color: #ffffff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
            width: 100%;
        }

        button:hover {
            background-color: #0056b3;
        }

        .back-btn {
            display: inline-block;
            margin-top: 15px;
            color: #007bff;
            text-decoration: none;
            font-size: 14px;
        }

        .back-btn:hover {
            text-decoration: underline;
            color: #0056b3;
        }

        @media (max-width: 600px) {
            .container {
                padding: 15px;
                margin: 20px;
            }
        }
    </style>
</head>
<body>

<div class="container">
    <h2><i class="fa-solid fa-user-pen"></i> Edit Employee Profile</h2>

    <form method="POST">
        {% csrf_token %}

        {% for field in form %}
            <div class="form-group">
                <label for="{{ field.id_for_label }}">{{ field.label }}:</label>
                {{ field }}
                {% if field.errors %}
                    <div style="color: #dc3545; margin-top: 5px;">
                        {{ field.errors }}
                    </div>
                {% endif %}
            </div>
        {% endfor %}

        <button type="submit"><i class="fa-solid fa-floppy-disk"></i> Save Changes</button>
    </form>

    <a href="{% url 'employee-profile-home' %}" class="back-btn"><i class="fa-solid fa-arrow-left"></i> Back to Profile</a>
</div>

</body>
</html>
 '. then next file is employee_dashboard.html from employee app templates, '{% extends "base.html" %}

{% block content %}
<div class="container mt-5">
    <h2 class="text-center mb-4">Employee Dashboard</h2>
			

    <div class="row">
        <!-- My Profile -->
        <div class="col-md-6 mb-4">
            <div class="card text-center shadow">
                <img src="{{ url_for('static', filename='images/my_profile.png') }}" class="card-img-top mx-auto mt-3" alt="My Profile" style="width: 100px;">
                <div class="card-body">
                    <h5 class="card-title">My Profile</h5>
                    <p class="card-text">View your personal details and experience.</p>
                    <a href="{{ url_for('routes.my_profile', employee_id=current_user.id) }}" class="btn btn-primary">Go to My Profile</a>
                </div>
            </div>
        </div>
		
			<div style="text-align: right;">
				  <form action="{% url 'logout' %}" method="post">
					{% csrf_token %}
					<button type="submit" class="btn btn-danger">Logout</button>
				  </form>
			</div>

        <!-- Assigned Projects -->
        <div class="col-md-6 mb-4">
            <div class="card text-center shadow">
                <img src="{{ url_for('static', filename='images/my_projects.png') }}" class="card-img-top mx-auto mt-3" alt="My Projects" style="width: 100px;">
                <div class="card-body">
                    <h5 class="card-title">Assigned Projects</h5>
                    <p class="card-text">View the projects assigned to you.</p>
                    <a href="{{ url_for('routes.assigned_projects') }}" class="btn btn-primary">View Projects</a>
                </div>
            </div>
        </div>

        <!-- Submit Timesheet -->
        <div class="col-md-6 mb-4">
            <div class="card text-center shadow">
                <img src="{{ url_for('static', filename='images/submit_timesheet.png') }}" class="card-img-top mx-auto mt-3" alt="Submit Timesheet" style="width: 100px;">
                <div class="card-body">
                    <h5 class="card-title">Submit Timesheet</h5>
                    <p class="card-text">Log your work hours and tasks.</p>
                    <a href="{{ url_for('routes.submit_timesheet') }}" class="btn btn-primary">Go to Timesheet</a>
                </div>
            </div>
        </div>

        <!-- Submit Expense -->
        <div class="col-md-6 mb-4">
            <div class="card text-center shadow">
                <img src="{{ url_for('static', filename='images/submit_expense.png') }}" class="card-img-top mx-auto mt-3" alt="Submit Expense" style="width: 100px;">
                <div class="card-body">
                    <h5 class="card-title">Submit Expense</h5>
                    <p class="card-text">Submit your work-related expenses.</p>
                    <a href="{{ url_for('routes.submit_expense') }}" class="btn btn-primary">Go to Expenses</a>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %} '. 

then next file is my_projects.html from employee app templates,
 '{% extends 'base.html' %}
{% block content %}
<div class="container">
    <h2>My Projects</h2>
    <ul>
        {% for project in projects %}
            <li>
                <strong>{{ project.project_name }}</strong> ({{ project.customer_name }})<br>
                Status: {{ project.status }} | Progress: {{ project.progress }}%
            </li>
        {% empty %}
            <li>You are not assigned to any project.</li>
        {% endfor %}
    </ul>
    <a class="btn btn-secondary" href="{% url 'employee-dashboard' %}">Back to Dashboard</a>
</div>
{% endblock %} '. 
then next file is profile_home.html from employee app templates, 
'<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ profile.user.get_full_name }} - Employee Profile</title>
		
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet">

    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f4f7fa;
            margin: 0;
            padding: 0;
        }
        .container {
            max-width: 900px;
            margin: 40px auto;
            padding: 20px;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            border-radius: 8px;
        }
        h1, h2 {
            color: #333;
            border-bottom: 2px solid #f0f0f0;
            padding-bottom: 10px;
        }
        .info {
            display: flex;
            flex-wrap: wrap;
            margin-top: 20px;
        }
        .info-item {
            flex: 1 1 45%;
            margin: 10px;
        }
        .label {
            font-weight: 600;
            color: #555;
        }
        .value {
            color: #000;
        }
        .edit-btn {
            display: inline-block;
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #007bff;
            color: #fff;
            text-decoration: none;
            border-radius: 4px;
        }
        .edit-btn:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>
			{% if profile.user.get_full_name %}
				{{ profile.user.get_full_name }}
			{% else %}
				{{ profile.user.username }}
			{% endif %}
			{% if profile.role %}
				({{ profile.role }})
			{% endif %}
		</h1>
			{% if confirmation_due_today %}
			<div style="padding: 15px; background-color: #ffebcc; border: 1px solid #ffcc00; border-radius: 5px; margin-bottom: 20px;">
				<strong>Notice:</strong> Your confirmation date is today and is pending manager approval.
			</div>
			{% endif %}

			<div style="text-align: right;">
				<a class="btn btn-secondary" href="{% url 'employee-dashboard' %}" class="edit-btn">← Back to Dashboard</a>
			</div>
        <div class="info">
            <div class="info-item">
                <div class="label">Employee ID:</div>
                <div class="value">{{ profile.employee_id }}</div>
            </div>
            <div class="info-item">
                <div class="label">Department:</div>
                <div class="value">{{ profile.department }}</div>
            </div>
            <div class="info-item">
                <div class="label">Employment Type:</div>
                <div class="value">{{ profile.employment_type }}</div>
            </div>
            <!-- Add this clearly in the Employment Information Section -->
			
				<div class="info-item">
					<div class="label">Career Start Date:</div>
					<div class="value">{{ profile.career_start_date }}</div>
				</div>
				<div class="info-item">
					<div class="label">Probotix Joining Date:</div>
					<div class="value">{{ profile.probotix_joining_date }}</div>
				</div>
				<div class="info-item">
					<div class="label">Confirmation Date:</div>
					<div class="value">
						{% if profile.confirmation_date %}
							{{ profile.confirmation_date }} 
						{% else %}
							Not Set
						{% endif %}
					</div>
				</div>

				<div class="info-item">
					<div class="label">Total Experience (Years):</div>
					<div class="value">
						{% if profile.total_experience != None %}
							{{ profile.total_experience }} Years
						{% else %}
							Not Provided
						{% endif %}
					</div>
				</div>

            <div class="info-item">
                <div class="label">Reporting Manager:</div>
                <div class="value">{{ profile.reporting_manager.get_full_name }}</div>
            </div>
            <div class="info-item">
                <div class="label">Confirmation Date:</div>
                <div class="value">{{ profile.confirmation_date }}</div>
            </div>
        </div>

        <h2>Contact Information</h2>
        <div class="info">
            <div class="info-item">
                <div class="label">Email:</div>
                <div class="value">{{ profile.user.email }}</div>
            </div>
            <div class="info-item">
                <div class="label">Contact Number:</div>
                <div class="value">{{ profile.contact_number }}</div>
            </div>
            <div class="info-item">
                <div class="label">Address:</div>
                <div class="value">{{ profile.address }}</div>
            </div>
        </div>

        <h2>Emergency Contact</h2>
        <div class="info">
            <div class="info-item">
                <div class="label">Name:</div>
                <div class="value">{{ profile.emergency_contact_name }}</div>
            </div>
            <div class="info-item">
                <div class="label">Relation:</div>
                <div class="value">{{ profile.emergency_contact_relation }}</div>
            </div>
            <div class="info-item">
                <div class="label">Contact Number:</div>
                <div class="value">{{ profile.emergency_contact_number }}</div>
            </div>
        </div>

        <h2>HR Information</h2>
        <div class="info">
            <div class="info-item">
                <div class="label">PAN/Aadhar:</div>
                <div class="value">{{ profile.pan_aadhar_ssn }}</div>
            </div>
            <div class="info-item">
                <div class="label">Bank Account:</div>
                <div class="value">{{ profile.bank_account_number }}</div>
            </div>
            <div class="info-item">
                <div class="label">IFSC Code:</div>
                <div class="value">{{ profile.bank_ifsc_code }}</div>
            </div>
            <div class="info-item">
                <div class="label">EPF Number:</div>
                <div class="value">{{ profile.epf_number }}</div>
            </div>
        </div>
			<h2>Skillsets</h2>
				{% if employee_skills.exists %}
					<table style="width:100%; border-collapse: collapse; margin-top: 10px;">
						<tr style="background-color:#f8f8f8;">
							<th style="border: 1px solid #ddd; padding: 8px;">Skill</th>
							<th style="border: 1px solid #ddd; padding: 8px;">Rating</th>
						</tr>
						{% for skill in employee_skills %}
						<tr>
							<td style="border: 1px solid #ddd; padding: 8px;">{{ skill.skill.name }}</td>
							<td style="border: 1px solid #ddd; padding: 8px;">
								{% if skill.rating == 0 %} Not Known
								{% elif skill.rating == 1 %} Poor
								{% elif skill.rating == 2 %} Average
								{% elif skill.rating == 3 %} Good
								{% elif skill.rating == 4 %} Very Good
								{% endif %}
							</td>
						</tr>
						{% endfor %}
					</table>
				{% else %}
					<p>No skill data added yet.</p>
				{% endif %}

        <a href="{% url 'edit-employee-profile' %}" class="edit-btn">Edit Profile</a>
    </div>
</body>
</html> '. 

then next file is forms.py from expenses app, 
'from django import forms
from .models import Expense

class ExpenseForm(forms.ModelForm):
    class Meta:
        model = Expense
        fields = ['project', 'expense_type', 'date', 'kilometers', 'amount', 'receipt']
        widgets = {
            'date': forms.DateInput(attrs={'type': 'date'}),
        }
'
then next file is models.py from expenses app,
'from django.db import models
from employee.models import EmployeeProfile
from project.models import Project
from django.utils import timezone

class Expense(models.Model):
    EXPENSE_TYPES = [
        ('Travel - Public Transport', 'Travel - Public Transport'),
        ('Travel - Cab', 'Travel - Cab'),
        ('Travel - Bike', 'Travel - Bike'),
        ('Travel - Personal Car', 'Travel - Personal Car'),
        ('DA - Within Pune', 'DA - Within Pune'),
        ('DA - Outside Pune', 'DA - Outside Pune'),
        ('Other', 'Other'),
    ]

    employee = models.ForeignKey(EmployeeProfile, on_delete=models.CASCADE)
    project = models.ForeignKey(Project, on_delete=models.SET_NULL, null=True, blank=True)
    expense_type = models.CharField(max_length=50, choices=EXPENSE_TYPES)
    date = models.DateField(default=timezone.now)
    amount = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    kilometers = models.IntegerField(null=True, blank=True)
    receipt = models.FileField(upload_to='expense_receipts/', null=True, blank=True)

    def save(self, *args, **kwargs):
        if not self.amount and self.kilometers is not None:
            if 'Bike' in self.expense_type:
                self.amount = self.kilometers * 5
            elif 'Car' in self.expense_type:
                self.amount = self.kilometers * 12
            elif 'Within Pune' in self.expense_type:
                self.amount = 300
            elif 'Outside Pune' in self.expense_type:
                self.amount = 600
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.employee.user.get_full_name()} - {self.expense_type} on {self.date}"
'.
the next file is urls.py from expenses app,
'from django.urls import path
from . import views

urlpatterns = [
    path('my-expenses/', views.employee_expenses, name='employee-expenses'),
]
'.
the next file is views.py from expenses app,
'from django.shortcuts import render, redirect
from employee.models import EmployeeProfile
from .models import Expense
from .forms import ExpenseForm
from django.contrib.auth.decorators import login_required

@login_required
def employee_expenses(request):
    profile = EmployeeProfile.objects.get(user=request.user)
    expenses = Expense.objects.filter(employee=profile).order_by('-date')

    if request.method == 'POST':
        form = ExpenseForm(request.POST, request.FILES)
        if form.is_valid():
            expense = form.save(commit=False)
            expense.employee = profile
            expense.save()
            return redirect('employee-expenses')
    else:
        form = ExpenseForm()

    return render(request, 'expenses/my_expenses.html', {
        'form': form,
        'expenses': expenses
    })
'.
the next file is my_expenses.html from expenses app,
'{% extends 'base.html' %}
{% block content %}
<div class="container">
    <h2><i class="fa-solid fa-receipt"></i> My Expenses</h2>
		<div style="text-align: right;">
		<a class="btn btn-secondary" href="{% url 'employee-dashboard' %}">← Back to Dashboard</a>
		</div>

    <form method="POST" enctype="multipart/form-data">
        {% csrf_token %}
        {{ form.as_p }}
        <button class="btn" type="submit">Submit Expense</button>
    </form>

    <hr>
    <h3>Expense History</h3>
    <ul>
        {% for ex in expenses %}
            <li>
                {{ ex.date }} - {{ ex.expense_type }}: ₹{{ ex.amount }}
                {% if ex.receipt %}
                    - <a href="{{ ex.receipt.url }}" target="_blank">Receipt</a>
                {% endif %}
            </li>
        {% empty %}
            <li>No expenses submitted yet.</li>
        {% endfor %}
    </ul>
</div>
{% endblock %}
'.
the next file is admin.py from project app,
'
# Register your models here.
from django.contrib import admin
from .models import Project, Task, ProjectDocument, ProjectComment, ProjectBudget

admin.site.register(Project)
admin.site.register(Task)
admin.site.register(ProjectDocument)
admin.site.register(ProjectComment)
admin.site.register(ProjectBudget)  # Add clearly

'.
the next file is apps.py from project app,
'from django.apps import AppConfig


class ProjectConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'project'
'. 
the next file is forms.py from project app,
'# project/forms.py
from django import forms
from .models import Project, Task, ProjectDocument, ProjectBudget  # Add ProjectBudget here clearly




class ProjectForm(forms.ModelForm):
    class Meta:
        model = Project
        fields = [
            'project_name', 'customer_name', 'description', 'location',
            'start_date', 'end_date', 'project_manager', 'assigned_employees',
            'status', 'progress',  # new fields
        ]
        widgets = {
            'start_date': forms.DateInput(attrs={'type': 'date'}),
            'end_date': forms.DateInput(attrs={'type': 'date'}),
            'description': forms.Textarea(attrs={'rows': 4}),
            'assigned_employees': forms.CheckboxSelectMultiple(),
            'status': forms.Select(),
            'progress': forms.NumberInput(attrs={'min':0, 'max':100}),
        }



class TaskForm(forms.ModelForm):
    class Meta:
        model = Task
        fields = ['title', 'description', 'assigned_to', 'due_date', 'completed']
        widgets = {
            'due_date': forms.DateInput(attrs={'type': 'date'}),
            'description': forms.Textarea(attrs={'rows':3}),
            'assigned_to': forms.Select(),
        }

class ProjectDocumentForm(forms.ModelForm):
    class Meta:
        model = ProjectDocument
        fields = ['document', 'description']

class ProjectBudgetForm(forms.ModelForm):
    class Meta:
        model = ProjectBudget
        fields = ['allocated_budget', 'expenses_incurred']
        widgets = {
            'allocated_budget': forms.NumberInput(attrs={'step':'0.01'}),
            'expenses_incurred': forms.NumberInput(attrs={'step':'0.01'}),
        }
'.
the next file is models.py from project app,
'
# project/models.py
from django.db import models
from django.contrib.auth.models import User
from employee.models import EmployeeProfile
from django.utils import timezone

class Project(models.Model):
    LOCATION_CHOICES = [
        ('Within Pune', 'Within Pune'),
        ('Outside Pune', 'Outside Pune'),
    ]
    
    STATUS_CHOICES = [
        ('Not Started', 'Not Started'),
        ('In Progress', 'In Progress'),
        ('Completed', 'Completed'),
        ('On Hold', 'On Hold'),
        ('Cancelled', 'Cancelled'),
    ]

    project_name = models.CharField(max_length=100)
    customer_name = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    location = models.CharField(max_length=20, choices=LOCATION_CHOICES)
    start_date = models.DateField()
    end_date = models.DateField()
    project_manager = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='managed_projects')
    assigned_employees = models.ManyToManyField(EmployeeProfile, related_name='projects_assigned', blank=True)

    # New fields for status and progress
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Not Started')
    progress = models.PositiveIntegerField(default=0)
    
    @property
    def is_starting_today(self):
        return self.start_date == timezone.now().date()

    @property
    def is_ending_today(self):
        return self.end_date == timezone.now().date()
                
    @property
    def is_due_today(self):
        return self.due_date == timezone.now().date()

    def __str__(self):
        return f"{self.project_name} ({self.customer_name})"
        
        
                


class Task(models.Model):
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='tasks')
    title = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    assigned_to = models.ForeignKey(EmployeeProfile, on_delete=models.SET_NULL, null=True, blank=True, related_name='tasks')
    due_date = models.DateField()
    completed = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.title} ({self.project.project_name})"

class ProjectDocument(models.Model):
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='documents')
    document = models.FileField(upload_to='project_documents/')
    description = models.CharField(max_length=200, blank=True)
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.project.project_name} Document: {self.document.name}"

class ProjectComment(models.Model):
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='comments')
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    comment = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.username} on {self.project.project_name}"

class ProjectBudget(models.Model):
    project = models.OneToOneField(Project, on_delete=models.CASCADE, related_name='budget')
    allocated_budget = models.DecimalField(max_digits=12, decimal_places=2, default=0.00)
    expenses_incurred = models.DecimalField(max_digits=12, decimal_places=2, default=0.00)

    def remaining_budget(self):
        return self.allocated_budget - self.expenses_incurred

    def __str__(self):
        return f"Budget for {self.project.project_name}"

'.
the next file is tests.py from project app,
from django.test import TestCase

# Create your tests here.
'.
the next file is urls.py from project app,
'# project/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.project_list, name='project-list'),
    path('project/<int:pk>/', views.project_detail, name='project-detail'),
    path('project/new/', views.project_create, name='project-create'),
    path('project/<int:pk>/edit/', views.project_edit, name='project-edit'),
    path('project/<int:project_pk>/task/new/', views.task_create, name='task-create'),
    path('project/<int:project_pk>/task/<int:task_pk>/edit/', views.task_edit, name='task-edit'),
    path('project/<int:project_pk>/document/upload/', views.document_upload, name='document-upload'),
    path('project/<int:project_pk>/document/<int:doc_pk>/delete/', views.document_delete, name='document-delete'),
    path('project/<int:project_pk>/budget/', views.budget_manage, name='budget-manage'),
    path('analytics/', views.analytics_dashboard, name='analytics-dashboard'),
    path('export/projects/', views.export_projects_excel, name='export-projects-excel'),

    
]
'.
the next file is views.py from project app,
'
# project/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from .models import Project, ProjectDocument
from .forms import ProjectForm
from .forms import ProjectDocumentForm
from .models import Task
from .forms import TaskForm
from .models import ProjectBudget
from .forms import ProjectBudgetForm
from django.http import HttpResponse
from import_export import resources

from tablib import Dataset




@login_required
def project_list(request):
    projects = Project.objects.all()
    return render(request, 'project/project_list.html', {'projects': projects})

@login_required
def project_detail(request, pk):
    project = get_object_or_404(Project, pk=pk)
    today_start = project.is_starting_today
    today_end = project.is_ending_today
    return render(request, 'project/project_detail.html', {
        'project': project,
        'today_start': today_start,
        'today_end': today_end,
    })


@login_required
def project_create(request):
    if request.method == 'POST':
        form = ProjectForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('project-list')
    else:
        form = ProjectForm()
    return render(request, 'project/project_form.html', {'form': form, 'title': 'Add New Project'})

@login_required
def project_edit(request, pk):
    project = get_object_or_404(Project, pk=pk)
    if request.method == 'POST':
        form = ProjectForm(request.POST, instance=project)
        if form.is_valid():
            form.save()
            return redirect('project-detail', pk=pk)
    else:
        form = ProjectForm(instance=project)
    return render(request, 'project/project_form.html', {'form': form, 'title': 'Edit Project'})



@login_required
def task_create(request, project_pk):
    project = get_object_or_404(Project, pk=project_pk)
    if request.method == 'POST':
        form = TaskForm(request.POST)
        if form.is_valid():
            task = form.save(commit=False)
            task.project = project
            task.save()
            return redirect('project-detail', pk=project.pk)
    else:
        form = TaskForm()
    return render(request, 'project/task_form.html', {'form': form, 'project': project, 'title':'Add Task'})

@login_required
def task_edit(request, project_pk, task_pk):
    project = get_object_or_404(Project, pk=project_pk)
    task = get_object_or_404(Task, pk=task_pk, project=project)
    if request.method == 'POST':
        form = TaskForm(request.POST, instance=task)
        if form.is_valid():
            form.save()
            return redirect('project-detail', pk=project.pk)
    else:
        form = TaskForm(instance=task)
    return render(request, 'project/task_form.html', {'form': form, 'project': project, 'title':'Edit Task'})



@login_required
def document_delete(request, project_pk, doc_pk):
    document = get_object_or_404(ProjectDocument, pk=doc_pk, project_id=project_pk)
    if request.method == 'POST':
        document.document.delete()
        document.delete()
        return redirect('project-detail', pk=project_pk)
    return render(request, 'project/document_confirm_delete.html', {'document': document})


@login_required
def document_upload(request, project_pk):
    project = get_object_or_404(Project, pk=project_pk)
    if request.method == 'POST':
        form = ProjectDocumentForm(request.POST, request.FILES)
        if form.is_valid():
            doc = form.save(commit=False)
            doc.project = project
            doc.save()
            return redirect('project-detail', pk=project.pk)
    else:
        form = ProjectDocumentForm()
    return render(request, 'project/document_form.html', {'form': form, 'project': project})


@login_required
def budget_manage(request, project_pk):
    project = get_object_or_404(Project, pk=project_pk)
    budget, created = ProjectBudget.objects.get_or_create(project=project)
    if request.method == 'POST':
        form = ProjectBudgetForm(request.POST, instance=budget)
        if form.is_valid():
            form.save()
            return redirect('project-detail', pk=project.pk)
    else:
        form = ProjectBudgetForm(instance=budget)
    return render(request, 'project/budget_form.html', {'form': form, 'project': project, 'budget': budget})


@login_required
def analytics_dashboard(request):
    total_projects = Project.objects.count()
    projects_completed = Project.objects.filter(status='Completed').count()
    projects_in_progress = Project.objects.filter(status='In Progress').count()
    projects_on_hold = Project.objects.filter(status='On Hold').count()
    projects_not_started = Project.objects.filter(status='Not Started').count()

    context = {
        'total_projects': total_projects,
        'projects_completed': projects_completed,
        'projects_in_progress': projects_in_progress,
        'projects_on_hold': projects_on_hold,
        'projects_not_started': projects_not_started,
    }
    return render(request, 'project/analytics_dashboard.html', context)


@login_required
def export_projects_excel(request):
    project_resource = ProjectResource()
    dataset = project_resource.export()
    response = HttpResponse(dataset.xlsx, content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename="projects_report.xlsx"'
    return response

class ProjectResource(resources.ModelResource):
    class Meta:
        model = Project
        fields = ('id', 'project_name', 'customer_name', 'location', 'status', 'progress', 'start_date', 'end_date')
'.
the next file is analytics_dashboard.html from project app templates,
'{% extends 'base.html' %}

{% block content %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<div class="container">
    <h2><i class="fa-solid fa-chart-pie"></i> Project Analytics Dashboard</h2>
    <canvas id="projectStatusChart" width="400" height="200"></canvas>
</div>
	<a class="btn" href="{% url 'export-projects-excel' %}">
		<i class="fa-solid fa-file-excel"></i> Export Projects to Excel
	</a>

<script>
    const ctx = document.getElementById('projectStatusChart').getContext('2d');
    const projectStatusChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ['Completed', 'In Progress', 'On Hold', 'Not Started'],
            datasets: [{
                label: 'Project Status',
                data: [
                    {{ projects_completed }},
                    {{ projects_in_progress }},
                    {{ projects_on_hold }},
                    {{ projects_not_started }}
                ],
                backgroundColor: [
                    '#28a745',
                    '#007bff',
                    '#ffc107',
                    '#6c757d'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true
        }
    });
</script>
{% endblock %}
'.
the next file is budget_form.html from project app templates,
'{% extends 'base.html' %}
{% block content %}
<div class="container">
    <h2>Manage Budget for {{ project.project_name }}</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Save Budget</button>
    </form>
    <a class="btn btn-secondary" href="{% url 'project-detail' project.pk %}"><i class="fa-solid fa-arrow-left"></i> Back to Project</a>
</div>
{% endblock %}
'.
the next file is document_confirm_delete.html from project app templates,
'{% extends 'base.html' %}
{% block content %}
<div class="container">
    <h2>Confirm Delete</h2>
    <p>Are you sure you want to delete document "{{ document.document.name }}"?</p>
    <form method="post">
        {% csrf_token %}
        <button type="submit">Confirm Delete</button>
    </form>
    <a href="{% url 'project-detail' document.project.pk %}">Cancel</a>
</div>
{% endblock %}
'.
the next file is document_form.html from project app templates,
'{% extends 'base.html' %}
{% block content %}
<div class="container">
    <h2>Upload Document for {{ project.project_name }}</h2>
    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Upload</button>
    </form>
    <a class="btn btn-secondary" href="{% url 'project-detail' project.pk %}"><i class="fa-solid fa-arrow-left"></i> Back to Project</a>
</div>
{% endblock %}
'.
next file is project_list.html from project app templates,
'{% extends 'base.html' %}
{% block content %}
<h2>Project List</h2>
<a class="btn" href="{% url 'project-create' %}"><i class="fa-solid fa-plus"></i> Add New Project</a>
<ul>
    {% for project in projects %}
        <li><a href="{% url 'project-detail' project.pk %}">{{ project.project_name }}</a></li>
    {% endfor %}
</ul>
{% endblock %}
'.
the next file is task_form.html from project app templates,
'{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>{{ title }} for {{ project.project_name }}</h2>
    <form method="post">
        {% csrf_token %}
        {% for field in form %}
        <div class="form-group">
            <label>{{ field.label }}</label>
            {{ field }}
        </div>
        {% endfor %}
        <button type="submit">Save Task</button>
    </form>
    <a class="btn btn-secondary" href="{% url 'project-detail' project.pk %}"><i class="fa-solid fa-arrow-left"></i> Back to Project</a>
</div>
{% endblock %}
'.
the next file is forms.py from timesheet app,
'from django import forms
from .models import Timesheet

class TimesheetForm(forms.ModelForm):
    class Meta:
        model = Timesheet
        fields = ['project', 'date', 'time_from', 'time_to', 'task_description']
        widgets = {
            'date': forms.DateInput(attrs={'type': 'date'}),
            'time_from': forms.TimeInput(attrs={'type': 'time'}),
            'time_to': forms.TimeInput(attrs={'type': 'time'}),
            'task_description': forms.Textarea(attrs={'rows': 3}),
        }
'.
the next file is models.py from timesheet app,
'from django.db import models
from django.utils import timezone
from employee.models import EmployeeProfile
from project.models import Project

class Timesheet(models.Model):
    employee = models.ForeignKey(EmployeeProfile, on_delete=models.CASCADE, related_name='timesheets')
    project = models.ForeignKey(Project, on_delete=models.CASCADE)
    date = models.DateField(default=timezone.now)
    time_from = models.TimeField()
    time_to = models.TimeField()
    task_description = models.TextField()

    def __str__(self):
        return f"{self.employee.user.get_full_name()} - {self.project.project_name} ({self.date})"
'.
the next file is urls.py from timesheet app, 
'from django.urls import path
from . import views

urlpatterns = [
    path('my-timesheets/', views.employee_timesheets, name='employee-timesheets'),
]
'. 
the next file is views.py from timesheet app, 
'from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from .forms import TimesheetForm
from .models import Timesheet
from employee.models import EmployeeProfile

@login_required
def employee_timesheets(request):
    profile = EmployeeProfile.objects.get(user=request.user)
    timesheets = Timesheet.objects.filter(employee=profile).order_by('-date')

    if request.method == 'POST':
        form = TimesheetForm(request.POST)
        if form.is_valid():
            entry = form.save(commit=False)
            entry.employee = profile
            entry.save()
            return redirect('employee-timesheets')
    else:
        form = TimesheetForm()

    return render(request, 'timesheet/my_timesheets.html', {
        'form': form,
        'timesheets': timesheets
    })
'.
the next file is my_timesheet.html from timesheet app,
'{% extends 'base.html' %}
{% block content %}
<div class="container">
    <h2><i class="fa-solid fa-clock"></i> My Timesheets</h2>
		<div style="text-align: right;">
		<a class="btn btn-secondary" href="{% url 'employee-dashboard' %}">← Back to Dashboard</a>
		</div>

    <form method="POST">
        {% csrf_token %}
        {{ form.as_p }}
        <button class="btn" type="submit">Submit Timesheet</button>
    </form>

    <hr>
    <h3>My Timesheet History</h3>
    <ul>
        {% for ts in timesheets %}
            <li>
                <strong>{{ ts.date }}</strong>: {{ ts.project.project_name }} — {{ ts.time_from }} to {{ ts.time_to }}<br>
                {{ ts.task_description }}
            </li>
        {% empty %}
            <li>No timesheet submitted yet.</li>
        {% endfor %}
    </ul>
</div>
{% endblock %}
'. 
consider all above files with respect to the provided app structure. fixthe all codes completely and give the complete codes.


